{"version":3,"file":"948.mjs","sources":["webpack://example-esm/./node_modules/@apollo/protobufjs/minimal.js","webpack://example-esm/./node_modules/@apollo/protobufjs/src/index-minimal.js","webpack://example-esm/./node_modules/@apollo/protobufjs/src/reader.js","webpack://example-esm/./node_modules/@apollo/protobufjs/src/reader_buffer.js","webpack://example-esm/./node_modules/@apollo/protobufjs/src/roots.js","webpack://example-esm/./node_modules/@apollo/protobufjs/src/rpc.js","webpack://example-esm/./node_modules/@apollo/protobufjs/src/rpc/service.js","webpack://example-esm/./node_modules/@apollo/protobufjs/src/util/longbits.js","webpack://example-esm/./node_modules/@apollo/protobufjs/src/util/minimal.js","webpack://example-esm/./node_modules/@apollo/protobufjs/src/writer.js","webpack://example-esm/./node_modules/@apollo/protobufjs/src/writer_buffer.js","webpack://example-esm/./node_modules/@protobufjs/aspromise/index.js","webpack://example-esm/./node_modules/@protobufjs/base64/index.js","webpack://example-esm/./node_modules/@protobufjs/eventemitter/index.js","webpack://example-esm/./node_modules/@protobufjs/float/index.js","webpack://example-esm/./node_modules/@protobufjs/inquire/index.js","webpack://example-esm/./node_modules/@protobufjs/pool/index.js","webpack://example-esm/./node_modules/@protobufjs/utf8/index.js","webpack://example-esm/./node_modules/@apollo/server/dist/esm/plugin/schemaIsSubgraph.js","webpack://example-esm/./node_modules/@apollo/server/dist/esm/plugin/traceTreeBuilder.js","webpack://example-esm/./node_modules/@apollo/usage-reporting-protobuf/generated/esm/protobuf.js"],"sourcesContent":["// minimal library entry point.\n\n\"use strict\";\nmodule.exports = require(\"./src/index-minimal\");\n","\"use strict\";\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = require(\"./writer\");\nprotobuf.BufferWriter = require(\"./writer_buffer\");\nprotobuf.Reader       = require(\"./reader\");\nprotobuf.BufferReader = require(\"./reader_buffer\");\n\n// Utility\nprotobuf.util         = require(\"./util/minimal\");\nprotobuf.rpc          = require(\"./rpc\");\nprotobuf.roots        = require(\"./roots\");\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.Reader._configure(protobuf.BufferReader);\n    protobuf.util._configure();\n}\n\n// Set up buffer utility according to the environment\nprotobuf.Writer._configure(protobuf.BufferWriter);\nconfigure();\n","\"use strict\";\nmodule.exports = Reader;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = util.Buffer\n    ? function create_buffer_setup(buffer) {\n        return (Reader.create = function create_buffer(buffer) {\n            return util.Buffer.isBuffer(buffer)\n                ? new BufferReader(buffer)\n                /* istanbul ignore next */\n                : create_array(buffer);\n        })(buffer);\n    }\n    /* istanbul ignore next */\n    : create_array;\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/*\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/*\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/*\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/*\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/*\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n        ? new this.buf.constructor(0)\n        : this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n","\"use strict\";\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(\"./reader\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\n/* istanbul ignore else */\nif (util.Buffer)\n    BufferReader.prototype._slice = util.Buffer.prototype.slice;\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n","\"use strict\";\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available accross modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n","\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(\"./rpc/service\");\n","\"use strict\";\nmodule.exports = Service;\n\nvar util = require(\"../util/minimal\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n","\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(\"../util/minimal\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/*\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n","\"use strict\";\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(\"@protobufjs/aspromise\");\n\n// converts to / from base64 encoded strings\nutil.base64 = require(\"@protobufjs/base64\");\n\n// base class of rpc.Service\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\n\n// float handling accross browsers\nutil.float = require(\"@protobufjs/float\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(\"@protobufjs/inquire\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(\"@protobufjs/utf8\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(\"@protobufjs/pool\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(\"./longbits\");\n\n// global object reference\nutil.global = typeof window !== \"undefined\" && window\n           || typeof global !== \"undefined\" && global\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n * @const\n */\nutil.isNode = Boolean(util.global.process && util.global.process.versions && util.global.process.versions.node);\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/*\n * Long.js's Long class if available and $ENABLE_LONG is set. This lets us leave it on\n * for this package's tests but have it be off in actual usage-reporting-protobuf use.\n * (We leave it on for some mode where there is no `process` that is used by tests.)\n */\nutil.Long = (typeof process === 'undefined' || process.env.ENABLE_LONG) ? (/* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\")) : undefined;\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/*\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/*\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: (new Error()).stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\n\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\n\n    CustomError.prototype.toString = function toString() {\n        return this.name + \": \" + this.message;\n    };\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n","\"use strict\";\nmodule.exports = Writer;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = util.Buffer\n    ? function create_buffer_setup() {\n        return (Writer.create = function create_buffer() {\n            return new BufferWriter();\n        })();\n    }\n    /* istanbul ignore next */\n    : function create_array() {\n        return new Writer();\n    };\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n};\n","\"use strict\";\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(\"./writer\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(\"./util/minimal\");\n\nvar Buffer = util.Buffer;\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Buffer} Buffer\n */\nBufferWriter.alloc = function alloc_buffer(size) {\n    return (BufferWriter.alloc = util._Buffer_allocUnsafe)(size);\n};\n\nvar writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && Buffer.prototype.set.name === \"set\"\n    ? function writeBytesBuffer_set(val, buf, pos) {\n        buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n                           // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytesBuffer_copy(val, buf, pos) {\n        if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n        else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n    };\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else\n        buf.utf8Write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","import { isObjectType, isScalarType, isNonNullType, } from 'graphql';\nexport function schemaIsSubgraph(schema) {\n    const serviceType = schema.getType('_Service');\n    if (!isObjectType(serviceType)) {\n        return false;\n    }\n    const sdlField = serviceType.getFields().sdl;\n    if (!sdlField) {\n        return false;\n    }\n    let sdlFieldType = sdlField.type;\n    if (isNonNullType(sdlFieldType)) {\n        sdlFieldType = sdlFieldType.ofType;\n    }\n    if (!isScalarType(sdlFieldType)) {\n        return false;\n    }\n    return sdlFieldType.name == 'String';\n}\n//# sourceMappingURL=schemaIsSubgraph.js.map","import { GraphQLError, } from 'graphql';\nimport { Trace, google } from '@apollo/usage-reporting-protobuf';\nimport { UnreachableCaseError } from '../utils/UnreachableCaseError.js';\nfunction internalError(message) {\n    return new Error(`[internal apollo-server error] ${message}`);\n}\nexport class TraceTreeBuilder {\n    constructor(options) {\n        this.rootNode = new Trace.Node();\n        this.trace = new Trace({\n            root: this.rootNode,\n            fieldExecutionWeight: 1,\n        });\n        this.stopped = false;\n        this.nodes = new Map([\n            [responsePathAsString(), this.rootNode],\n        ]);\n        const { sendErrors, maskedBy } = options;\n        if (!sendErrors || 'masked' in sendErrors) {\n            this.transformError = () => new GraphQLError('<masked>', {\n                extensions: { maskedBy },\n            });\n        }\n        else if ('transform' in sendErrors) {\n            this.transformError = sendErrors.transform;\n        }\n        else if ('unmodified' in sendErrors) {\n            this.transformError = null;\n        }\n        else {\n            throw new UnreachableCaseError(sendErrors);\n        }\n    }\n    startTiming() {\n        if (this.startHrTime) {\n            throw internalError('startTiming called twice!');\n        }\n        if (this.stopped) {\n            throw internalError('startTiming called after stopTiming!');\n        }\n        this.trace.startTime = dateToProtoTimestamp(new Date());\n        this.startHrTime = process.hrtime();\n    }\n    stopTiming() {\n        if (!this.startHrTime) {\n            throw internalError('stopTiming called before startTiming!');\n        }\n        if (this.stopped) {\n            throw internalError('stopTiming called twice!');\n        }\n        this.trace.durationNs = durationHrTimeToNanos(process.hrtime(this.startHrTime));\n        this.trace.endTime = dateToProtoTimestamp(new Date());\n        this.stopped = true;\n    }\n    willResolveField(info) {\n        if (!this.startHrTime) {\n            throw internalError('willResolveField called before startTiming!');\n        }\n        if (this.stopped) {\n            return () => { };\n        }\n        const path = info.path;\n        const node = this.newNode(path);\n        node.type = info.returnType.toString();\n        node.parentType = info.parentType.toString();\n        node.startTime = durationHrTimeToNanos(process.hrtime(this.startHrTime));\n        if (typeof path.key === 'string' && path.key !== info.fieldName) {\n            node.originalFieldName = info.fieldName;\n        }\n        return () => {\n            node.endTime = durationHrTimeToNanos(process.hrtime(this.startHrTime));\n        };\n    }\n    didEncounterErrors(errors) {\n        errors.forEach((err) => {\n            if (err.extensions?.serviceName) {\n                return;\n            }\n            const errorForReporting = this.transformAndNormalizeError(err);\n            if (errorForReporting === null) {\n                return;\n            }\n            this.addProtobufError(errorForReporting.path, errorToProtobufError(errorForReporting));\n        });\n    }\n    addProtobufError(path, error) {\n        if (!this.startHrTime) {\n            throw internalError('addProtobufError called before startTiming!');\n        }\n        if (this.stopped) {\n            throw internalError('addProtobufError called after stopTiming!');\n        }\n        let node = this.rootNode;\n        if (Array.isArray(path)) {\n            const specificNode = this.nodes.get(path.join('.'));\n            if (specificNode) {\n                node = specificNode;\n            }\n            else {\n                const responsePath = responsePathFromArray(path, this.rootNode);\n                if (!responsePath) {\n                    throw internalError('addProtobufError called with invalid path!');\n                }\n                node = this.newNode(responsePath);\n            }\n        }\n        node.error.push(error);\n    }\n    newNode(path) {\n        const node = new Trace.Node();\n        const id = path.key;\n        if (typeof id === 'number') {\n            node.index = id;\n        }\n        else {\n            node.responseName = id;\n        }\n        this.nodes.set(responsePathAsString(path), node);\n        const parentNode = this.ensureParentNode(path);\n        parentNode.child.push(node);\n        return node;\n    }\n    ensureParentNode(path) {\n        const parentPath = responsePathAsString(path.prev);\n        const parentNode = this.nodes.get(parentPath);\n        if (parentNode) {\n            return parentNode;\n        }\n        return this.newNode(path.prev);\n    }\n    transformAndNormalizeError(err) {\n        if (this.transformError) {\n            const clonedError = Object.assign(Object.create(Object.getPrototypeOf(err)), err);\n            const rewrittenError = this.transformError(clonedError);\n            if (rewrittenError === null) {\n                return null;\n            }\n            if (!(rewrittenError instanceof GraphQLError)) {\n                return err;\n            }\n            return new GraphQLError(rewrittenError.message, {\n                nodes: err.nodes,\n                source: err.source,\n                positions: err.positions,\n                path: err.path,\n                originalError: err.originalError,\n                extensions: rewrittenError.extensions || err.extensions,\n            });\n        }\n        return err;\n    }\n}\nfunction durationHrTimeToNanos(hrtime) {\n    return hrtime[0] * 1e9 + hrtime[1];\n}\nfunction responsePathAsString(p) {\n    if (p === undefined) {\n        return '';\n    }\n    let res = String(p.key);\n    while ((p = p.prev) !== undefined) {\n        res = `${p.key}.${res}`;\n    }\n    return res;\n}\nfunction responsePathFromArray(path, node) {\n    let responsePath;\n    let nodePtr = node;\n    for (const key of path) {\n        nodePtr = nodePtr?.child?.find((child) => child.responseName === key);\n        responsePath = {\n            key,\n            prev: responsePath,\n            typename: nodePtr?.type ?? undefined,\n        };\n    }\n    return responsePath;\n}\nfunction errorToProtobufError(error) {\n    return new Trace.Error({\n        message: error.message,\n        location: (error.locations || []).map(({ line, column }) => new Trace.Location({ line, column })),\n        json: JSON.stringify(error),\n    });\n}\nexport function dateToProtoTimestamp(date) {\n    const totalMillis = +date;\n    const millis = totalMillis % 1000;\n    return new google.protobuf.Timestamp({\n        seconds: (totalMillis - millis) / 1000,\n        nanos: millis * 1e6,\n    });\n}\n//# sourceMappingURL=traceTreeBuilder.js.map","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\nimport $protobuf from \"@apollo/protobufjs/minimal\";\n\n// Common aliases\nconst $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nconst $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\nexport const Trace = $root.Trace = (() => {\n\n    /**\n     * Properties of a Trace.\n     * @exports ITrace\n     * @interface ITrace\n     * @property {google.protobuf.ITimestamp|null} [startTime] Trace startTime\n     * @property {google.protobuf.ITimestamp|null} [endTime] Trace endTime\n     * @property {number|null} [durationNs] Trace durationNs\n     * @property {Trace.INode|null} [root] Trace root\n     * @property {boolean|null} [isIncomplete] Trace isIncomplete\n     * @property {string|null} [signature] Trace signature\n     * @property {string|null} [unexecutedOperationBody] Trace unexecutedOperationBody\n     * @property {string|null} [unexecutedOperationName] Trace unexecutedOperationName\n     * @property {Trace.IDetails|null} [details] Trace details\n     * @property {string|null} [clientName] Trace clientName\n     * @property {string|null} [clientVersion] Trace clientVersion\n     * @property {Trace.IHTTP|null} [http] Trace http\n     * @property {Trace.ICachePolicy|null} [cachePolicy] Trace cachePolicy\n     * @property {Trace.IQueryPlanNode|null} [queryPlan] Trace queryPlan\n     * @property {boolean|null} [fullQueryCacheHit] Trace fullQueryCacheHit\n     * @property {boolean|null} [persistedQueryHit] Trace persistedQueryHit\n     * @property {boolean|null} [persistedQueryRegister] Trace persistedQueryRegister\n     * @property {boolean|null} [registeredOperation] Trace registeredOperation\n     * @property {boolean|null} [forbiddenOperation] Trace forbiddenOperation\n     * @property {number|null} [fieldExecutionWeight] Trace fieldExecutionWeight\n     */\n\n    /**\n     * Constructs a new Trace.\n     * @exports Trace\n     * @classdesc Represents a Trace.\n     * @implements ITrace\n     * @constructor\n     * @param {ITrace=} [properties] Properties to set\n     */\n    function Trace(properties) {\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Trace startTime.\n     * @member {google.protobuf.ITimestamp|null|undefined} startTime\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.startTime = null;\n\n    /**\n     * Trace endTime.\n     * @member {google.protobuf.ITimestamp|null|undefined} endTime\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.endTime = null;\n\n    /**\n     * Trace durationNs.\n     * @member {number} durationNs\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.durationNs = 0;\n\n    /**\n     * Trace root.\n     * @member {Trace.INode|null|undefined} root\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.root = null;\n\n    /**\n     * Trace isIncomplete.\n     * @member {boolean} isIncomplete\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.isIncomplete = false;\n\n    /**\n     * Trace signature.\n     * @member {string} signature\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.signature = \"\";\n\n    /**\n     * Trace unexecutedOperationBody.\n     * @member {string} unexecutedOperationBody\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.unexecutedOperationBody = \"\";\n\n    /**\n     * Trace unexecutedOperationName.\n     * @member {string} unexecutedOperationName\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.unexecutedOperationName = \"\";\n\n    /**\n     * Trace details.\n     * @member {Trace.IDetails|null|undefined} details\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.details = null;\n\n    /**\n     * Trace clientName.\n     * @member {string} clientName\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.clientName = \"\";\n\n    /**\n     * Trace clientVersion.\n     * @member {string} clientVersion\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.clientVersion = \"\";\n\n    /**\n     * Trace http.\n     * @member {Trace.IHTTP|null|undefined} http\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.http = null;\n\n    /**\n     * Trace cachePolicy.\n     * @member {Trace.ICachePolicy|null|undefined} cachePolicy\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.cachePolicy = null;\n\n    /**\n     * Trace queryPlan.\n     * @member {Trace.IQueryPlanNode|null|undefined} queryPlan\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.queryPlan = null;\n\n    /**\n     * Trace fullQueryCacheHit.\n     * @member {boolean} fullQueryCacheHit\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.fullQueryCacheHit = false;\n\n    /**\n     * Trace persistedQueryHit.\n     * @member {boolean} persistedQueryHit\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.persistedQueryHit = false;\n\n    /**\n     * Trace persistedQueryRegister.\n     * @member {boolean} persistedQueryRegister\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.persistedQueryRegister = false;\n\n    /**\n     * Trace registeredOperation.\n     * @member {boolean} registeredOperation\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.registeredOperation = false;\n\n    /**\n     * Trace forbiddenOperation.\n     * @member {boolean} forbiddenOperation\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.forbiddenOperation = false;\n\n    /**\n     * Trace fieldExecutionWeight.\n     * @member {number} fieldExecutionWeight\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.fieldExecutionWeight = 0;\n\n    /**\n     * Creates a new Trace instance using the specified properties.\n     * @function create\n     * @memberof Trace\n     * @static\n     * @param {ITrace=} [properties] Properties to set\n     * @returns {Trace} Trace instance\n     */\n    Trace.create = function create(properties) {\n        return new Trace(properties);\n    };\n\n    /**\n     * Encodes the specified Trace message. Does not implicitly {@link Trace.verify|verify} messages.\n     * @function encode\n     * @memberof Trace\n     * @static\n     * @param {ITrace} message Trace message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Trace.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.endTime != null && Object.hasOwnProperty.call(message, \"endTime\"))\n            $root.google.protobuf.Timestamp.encode(message.endTime, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n        if (message.startTime != null && Object.hasOwnProperty.call(message, \"startTime\"))\n            $root.google.protobuf.Timestamp.encode(message.startTime, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n        if (message.details != null && Object.hasOwnProperty.call(message, \"details\"))\n            $root.Trace.Details.encode(message.details, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n        if (message.clientName != null && Object.hasOwnProperty.call(message, \"clientName\"))\n            writer.uint32(/* id 7, wireType 2 =*/58).string(message.clientName);\n        if (message.clientVersion != null && Object.hasOwnProperty.call(message, \"clientVersion\"))\n            writer.uint32(/* id 8, wireType 2 =*/66).string(message.clientVersion);\n        if (message.http != null && Object.hasOwnProperty.call(message, \"http\"))\n            $root.Trace.HTTP.encode(message.http, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n        if (message.durationNs != null && Object.hasOwnProperty.call(message, \"durationNs\"))\n            writer.uint32(/* id 11, wireType 0 =*/88).uint64(message.durationNs);\n        if (message.root != null && Object.hasOwnProperty.call(message, \"root\"))\n            $root.Trace.Node.encode(message.root, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n        if (message.cachePolicy != null && Object.hasOwnProperty.call(message, \"cachePolicy\"))\n            $root.Trace.CachePolicy.encode(message.cachePolicy, writer.uint32(/* id 18, wireType 2 =*/146).fork()).ldelim();\n        if (message.signature != null && Object.hasOwnProperty.call(message, \"signature\"))\n            writer.uint32(/* id 19, wireType 2 =*/154).string(message.signature);\n        if (message.fullQueryCacheHit != null && Object.hasOwnProperty.call(message, \"fullQueryCacheHit\"))\n            writer.uint32(/* id 20, wireType 0 =*/160).bool(message.fullQueryCacheHit);\n        if (message.persistedQueryHit != null && Object.hasOwnProperty.call(message, \"persistedQueryHit\"))\n            writer.uint32(/* id 21, wireType 0 =*/168).bool(message.persistedQueryHit);\n        if (message.persistedQueryRegister != null && Object.hasOwnProperty.call(message, \"persistedQueryRegister\"))\n            writer.uint32(/* id 22, wireType 0 =*/176).bool(message.persistedQueryRegister);\n        if (message.registeredOperation != null && Object.hasOwnProperty.call(message, \"registeredOperation\"))\n            writer.uint32(/* id 24, wireType 0 =*/192).bool(message.registeredOperation);\n        if (message.forbiddenOperation != null && Object.hasOwnProperty.call(message, \"forbiddenOperation\"))\n            writer.uint32(/* id 25, wireType 0 =*/200).bool(message.forbiddenOperation);\n        if (message.queryPlan != null && Object.hasOwnProperty.call(message, \"queryPlan\"))\n            $root.Trace.QueryPlanNode.encode(message.queryPlan, writer.uint32(/* id 26, wireType 2 =*/210).fork()).ldelim();\n        if (message.unexecutedOperationBody != null && Object.hasOwnProperty.call(message, \"unexecutedOperationBody\"))\n            writer.uint32(/* id 27, wireType 2 =*/218).string(message.unexecutedOperationBody);\n        if (message.unexecutedOperationName != null && Object.hasOwnProperty.call(message, \"unexecutedOperationName\"))\n            writer.uint32(/* id 28, wireType 2 =*/226).string(message.unexecutedOperationName);\n        if (message.fieldExecutionWeight != null && Object.hasOwnProperty.call(message, \"fieldExecutionWeight\"))\n            writer.uint32(/* id 31, wireType 1 =*/249).double(message.fieldExecutionWeight);\n        if (message.isIncomplete != null && Object.hasOwnProperty.call(message, \"isIncomplete\"))\n            writer.uint32(/* id 33, wireType 0 =*/264).bool(message.isIncomplete);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified Trace message, length delimited. Does not implicitly {@link Trace.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Trace\n     * @static\n     * @param {ITrace} message Trace message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Trace.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a Trace message from the specified reader or buffer.\n     * @function decode\n     * @memberof Trace\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Trace} Trace\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Trace.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 4:\n                message.startTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());\n                break;\n            case 3:\n                message.endTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());\n                break;\n            case 11:\n                message.durationNs = reader.uint64();\n                break;\n            case 14:\n                message.root = $root.Trace.Node.decode(reader, reader.uint32());\n                break;\n            case 33:\n                message.isIncomplete = reader.bool();\n                break;\n            case 19:\n                message.signature = reader.string();\n                break;\n            case 27:\n                message.unexecutedOperationBody = reader.string();\n                break;\n            case 28:\n                message.unexecutedOperationName = reader.string();\n                break;\n            case 6:\n                message.details = $root.Trace.Details.decode(reader, reader.uint32());\n                break;\n            case 7:\n                message.clientName = reader.string();\n                break;\n            case 8:\n                message.clientVersion = reader.string();\n                break;\n            case 10:\n                message.http = $root.Trace.HTTP.decode(reader, reader.uint32());\n                break;\n            case 18:\n                message.cachePolicy = $root.Trace.CachePolicy.decode(reader, reader.uint32());\n                break;\n            case 26:\n                message.queryPlan = $root.Trace.QueryPlanNode.decode(reader, reader.uint32());\n                break;\n            case 20:\n                message.fullQueryCacheHit = reader.bool();\n                break;\n            case 21:\n                message.persistedQueryHit = reader.bool();\n                break;\n            case 22:\n                message.persistedQueryRegister = reader.bool();\n                break;\n            case 24:\n                message.registeredOperation = reader.bool();\n                break;\n            case 25:\n                message.forbiddenOperation = reader.bool();\n                break;\n            case 31:\n                message.fieldExecutionWeight = reader.double();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a Trace message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Trace\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Trace} Trace\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Trace.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a Trace message.\n     * @function verify\n     * @memberof Trace\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    Trace.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.startTime != null && message.hasOwnProperty(\"startTime\")) {\n            let error = $root.google.protobuf.Timestamp.verify(message.startTime);\n            if (error)\n                return \"startTime.\" + error;\n        }\n        if (message.endTime != null && message.hasOwnProperty(\"endTime\")) {\n            let error = $root.google.protobuf.Timestamp.verify(message.endTime);\n            if (error)\n                return \"endTime.\" + error;\n        }\n        if (message.durationNs != null && message.hasOwnProperty(\"durationNs\"))\n            if (!$util.isInteger(message.durationNs) && !(message.durationNs && $util.isInteger(message.durationNs.low) && $util.isInteger(message.durationNs.high)))\n                return \"durationNs: integer|Long expected\";\n        if (message.root != null && message.hasOwnProperty(\"root\")) {\n            let error = $root.Trace.Node.verify(message.root);\n            if (error)\n                return \"root.\" + error;\n        }\n        if (message.isIncomplete != null && message.hasOwnProperty(\"isIncomplete\"))\n            if (typeof message.isIncomplete !== \"boolean\")\n                return \"isIncomplete: boolean expected\";\n        if (message.signature != null && message.hasOwnProperty(\"signature\"))\n            if (!$util.isString(message.signature))\n                return \"signature: string expected\";\n        if (message.unexecutedOperationBody != null && message.hasOwnProperty(\"unexecutedOperationBody\"))\n            if (!$util.isString(message.unexecutedOperationBody))\n                return \"unexecutedOperationBody: string expected\";\n        if (message.unexecutedOperationName != null && message.hasOwnProperty(\"unexecutedOperationName\"))\n            if (!$util.isString(message.unexecutedOperationName))\n                return \"unexecutedOperationName: string expected\";\n        if (message.details != null && message.hasOwnProperty(\"details\")) {\n            let error = $root.Trace.Details.verify(message.details);\n            if (error)\n                return \"details.\" + error;\n        }\n        if (message.clientName != null && message.hasOwnProperty(\"clientName\"))\n            if (!$util.isString(message.clientName))\n                return \"clientName: string expected\";\n        if (message.clientVersion != null && message.hasOwnProperty(\"clientVersion\"))\n            if (!$util.isString(message.clientVersion))\n                return \"clientVersion: string expected\";\n        if (message.http != null && message.hasOwnProperty(\"http\")) {\n            let error = $root.Trace.HTTP.verify(message.http);\n            if (error)\n                return \"http.\" + error;\n        }\n        if (message.cachePolicy != null && message.hasOwnProperty(\"cachePolicy\")) {\n            let error = $root.Trace.CachePolicy.verify(message.cachePolicy);\n            if (error)\n                return \"cachePolicy.\" + error;\n        }\n        if (message.queryPlan != null && message.hasOwnProperty(\"queryPlan\")) {\n            let error = $root.Trace.QueryPlanNode.verify(message.queryPlan);\n            if (error)\n                return \"queryPlan.\" + error;\n        }\n        if (message.fullQueryCacheHit != null && message.hasOwnProperty(\"fullQueryCacheHit\"))\n            if (typeof message.fullQueryCacheHit !== \"boolean\")\n                return \"fullQueryCacheHit: boolean expected\";\n        if (message.persistedQueryHit != null && message.hasOwnProperty(\"persistedQueryHit\"))\n            if (typeof message.persistedQueryHit !== \"boolean\")\n                return \"persistedQueryHit: boolean expected\";\n        if (message.persistedQueryRegister != null && message.hasOwnProperty(\"persistedQueryRegister\"))\n            if (typeof message.persistedQueryRegister !== \"boolean\")\n                return \"persistedQueryRegister: boolean expected\";\n        if (message.registeredOperation != null && message.hasOwnProperty(\"registeredOperation\"))\n            if (typeof message.registeredOperation !== \"boolean\")\n                return \"registeredOperation: boolean expected\";\n        if (message.forbiddenOperation != null && message.hasOwnProperty(\"forbiddenOperation\"))\n            if (typeof message.forbiddenOperation !== \"boolean\")\n                return \"forbiddenOperation: boolean expected\";\n        if (message.fieldExecutionWeight != null && message.hasOwnProperty(\"fieldExecutionWeight\"))\n            if (typeof message.fieldExecutionWeight !== \"number\")\n                return \"fieldExecutionWeight: number expected\";\n        return null;\n    };\n\n    /**\n     * Creates a plain object from a Trace message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Trace\n     * @static\n     * @param {Trace} message Trace\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Trace.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        let object = {};\n        if (options.defaults) {\n            object.endTime = null;\n            object.startTime = null;\n            object.details = null;\n            object.clientName = \"\";\n            object.clientVersion = \"\";\n            object.http = null;\n            object.durationNs = 0;\n            object.root = null;\n            object.cachePolicy = null;\n            object.signature = \"\";\n            object.fullQueryCacheHit = false;\n            object.persistedQueryHit = false;\n            object.persistedQueryRegister = false;\n            object.registeredOperation = false;\n            object.forbiddenOperation = false;\n            object.queryPlan = null;\n            object.unexecutedOperationBody = \"\";\n            object.unexecutedOperationName = \"\";\n            object.fieldExecutionWeight = 0;\n            object.isIncomplete = false;\n        }\n        if (message.endTime != null && message.hasOwnProperty(\"endTime\"))\n            object.endTime = $root.google.protobuf.Timestamp.toObject(message.endTime, options);\n        if (message.startTime != null && message.hasOwnProperty(\"startTime\"))\n            object.startTime = $root.google.protobuf.Timestamp.toObject(message.startTime, options);\n        if (message.details != null && message.hasOwnProperty(\"details\"))\n            object.details = $root.Trace.Details.toObject(message.details, options);\n        if (message.clientName != null && message.hasOwnProperty(\"clientName\"))\n            object.clientName = message.clientName;\n        if (message.clientVersion != null && message.hasOwnProperty(\"clientVersion\"))\n            object.clientVersion = message.clientVersion;\n        if (message.http != null && message.hasOwnProperty(\"http\"))\n            object.http = $root.Trace.HTTP.toObject(message.http, options);\n        if (message.durationNs != null && message.hasOwnProperty(\"durationNs\"))\n            if (typeof message.durationNs === \"number\")\n                object.durationNs = options.longs === String ? String(message.durationNs) : message.durationNs;\n            else\n                object.durationNs = options.longs === String ? $util.Long.prototype.toString.call(message.durationNs) : options.longs === Number ? new $util.LongBits(message.durationNs.low >>> 0, message.durationNs.high >>> 0).toNumber(true) : message.durationNs;\n        if (message.root != null && message.hasOwnProperty(\"root\"))\n            object.root = $root.Trace.Node.toObject(message.root, options);\n        if (message.cachePolicy != null && message.hasOwnProperty(\"cachePolicy\"))\n            object.cachePolicy = $root.Trace.CachePolicy.toObject(message.cachePolicy, options);\n        if (message.signature != null && message.hasOwnProperty(\"signature\"))\n            object.signature = message.signature;\n        if (message.fullQueryCacheHit != null && message.hasOwnProperty(\"fullQueryCacheHit\"))\n            object.fullQueryCacheHit = message.fullQueryCacheHit;\n        if (message.persistedQueryHit != null && message.hasOwnProperty(\"persistedQueryHit\"))\n            object.persistedQueryHit = message.persistedQueryHit;\n        if (message.persistedQueryRegister != null && message.hasOwnProperty(\"persistedQueryRegister\"))\n            object.persistedQueryRegister = message.persistedQueryRegister;\n        if (message.registeredOperation != null && message.hasOwnProperty(\"registeredOperation\"))\n            object.registeredOperation = message.registeredOperation;\n        if (message.forbiddenOperation != null && message.hasOwnProperty(\"forbiddenOperation\"))\n            object.forbiddenOperation = message.forbiddenOperation;\n        if (message.queryPlan != null && message.hasOwnProperty(\"queryPlan\"))\n            object.queryPlan = $root.Trace.QueryPlanNode.toObject(message.queryPlan, options);\n        if (message.unexecutedOperationBody != null && message.hasOwnProperty(\"unexecutedOperationBody\"))\n            object.unexecutedOperationBody = message.unexecutedOperationBody;\n        if (message.unexecutedOperationName != null && message.hasOwnProperty(\"unexecutedOperationName\"))\n            object.unexecutedOperationName = message.unexecutedOperationName;\n        if (message.fieldExecutionWeight != null && message.hasOwnProperty(\"fieldExecutionWeight\"))\n            object.fieldExecutionWeight = options.json && !isFinite(message.fieldExecutionWeight) ? String(message.fieldExecutionWeight) : message.fieldExecutionWeight;\n        if (message.isIncomplete != null && message.hasOwnProperty(\"isIncomplete\"))\n            object.isIncomplete = message.isIncomplete;\n        return object;\n    };\n\n    /**\n     * Converts this Trace to JSON.\n     * @function toJSON\n     * @memberof Trace\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Trace.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    Trace.CachePolicy = (function() {\n\n        /**\n         * Properties of a CachePolicy.\n         * @memberof Trace\n         * @interface ICachePolicy\n         * @property {Trace.CachePolicy.Scope|null} [scope] CachePolicy scope\n         * @property {number|null} [maxAgeNs] CachePolicy maxAgeNs\n         */\n\n        /**\n         * Constructs a new CachePolicy.\n         * @memberof Trace\n         * @classdesc Represents a CachePolicy.\n         * @implements ICachePolicy\n         * @constructor\n         * @param {Trace.ICachePolicy=} [properties] Properties to set\n         */\n        function CachePolicy(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * CachePolicy scope.\n         * @member {Trace.CachePolicy.Scope} scope\n         * @memberof Trace.CachePolicy\n         * @instance\n         */\n        CachePolicy.prototype.scope = 0;\n\n        /**\n         * CachePolicy maxAgeNs.\n         * @member {number} maxAgeNs\n         * @memberof Trace.CachePolicy\n         * @instance\n         */\n        CachePolicy.prototype.maxAgeNs = 0;\n\n        /**\n         * Creates a new CachePolicy instance using the specified properties.\n         * @function create\n         * @memberof Trace.CachePolicy\n         * @static\n         * @param {Trace.ICachePolicy=} [properties] Properties to set\n         * @returns {Trace.CachePolicy} CachePolicy instance\n         */\n        CachePolicy.create = function create(properties) {\n            return new CachePolicy(properties);\n        };\n\n        /**\n         * Encodes the specified CachePolicy message. Does not implicitly {@link Trace.CachePolicy.verify|verify} messages.\n         * @function encode\n         * @memberof Trace.CachePolicy\n         * @static\n         * @param {Trace.ICachePolicy} message CachePolicy message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CachePolicy.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.scope != null && Object.hasOwnProperty.call(message, \"scope\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.scope);\n            if (message.maxAgeNs != null && Object.hasOwnProperty.call(message, \"maxAgeNs\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.maxAgeNs);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified CachePolicy message, length delimited. Does not implicitly {@link Trace.CachePolicy.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Trace.CachePolicy\n         * @static\n         * @param {Trace.ICachePolicy} message CachePolicy message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CachePolicy.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a CachePolicy message from the specified reader or buffer.\n         * @function decode\n         * @memberof Trace.CachePolicy\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Trace.CachePolicy} CachePolicy\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CachePolicy.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.CachePolicy();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.scope = reader.int32();\n                    break;\n                case 2:\n                    message.maxAgeNs = reader.int64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a CachePolicy message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Trace.CachePolicy\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Trace.CachePolicy} CachePolicy\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CachePolicy.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a CachePolicy message.\n         * @function verify\n         * @memberof Trace.CachePolicy\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        CachePolicy.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.scope != null && message.hasOwnProperty(\"scope\"))\n                switch (message.scope) {\n                default:\n                    return \"scope: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                    break;\n                }\n            if (message.maxAgeNs != null && message.hasOwnProperty(\"maxAgeNs\"))\n                if (!$util.isInteger(message.maxAgeNs) && !(message.maxAgeNs && $util.isInteger(message.maxAgeNs.low) && $util.isInteger(message.maxAgeNs.high)))\n                    return \"maxAgeNs: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates a plain object from a CachePolicy message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Trace.CachePolicy\n         * @static\n         * @param {Trace.CachePolicy} message CachePolicy\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        CachePolicy.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.scope = options.enums === String ? \"UNKNOWN\" : 0;\n                object.maxAgeNs = 0;\n            }\n            if (message.scope != null && message.hasOwnProperty(\"scope\"))\n                object.scope = options.enums === String ? $root.Trace.CachePolicy.Scope[message.scope] : message.scope;\n            if (message.maxAgeNs != null && message.hasOwnProperty(\"maxAgeNs\"))\n                if (typeof message.maxAgeNs === \"number\")\n                    object.maxAgeNs = options.longs === String ? String(message.maxAgeNs) : message.maxAgeNs;\n                else\n                    object.maxAgeNs = options.longs === String ? $util.Long.prototype.toString.call(message.maxAgeNs) : options.longs === Number ? new $util.LongBits(message.maxAgeNs.low >>> 0, message.maxAgeNs.high >>> 0).toNumber() : message.maxAgeNs;\n            return object;\n        };\n\n        /**\n         * Converts this CachePolicy to JSON.\n         * @function toJSON\n         * @memberof Trace.CachePolicy\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        CachePolicy.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Scope enum.\n         * @name Trace.CachePolicy.Scope\n         * @enum {string}\n         * @property {number} UNKNOWN=0 UNKNOWN value\n         * @property {number} PUBLIC=1 PUBLIC value\n         * @property {number} PRIVATE=2 PRIVATE value\n         */\n        CachePolicy.Scope = (function() {\n            const valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNKNOWN\"] = 0;\n            values[valuesById[1] = \"PUBLIC\"] = 1;\n            values[valuesById[2] = \"PRIVATE\"] = 2;\n            return values;\n        })();\n\n        return CachePolicy;\n    })();\n\n    Trace.Details = (function() {\n\n        /**\n         * Properties of a Details.\n         * @memberof Trace\n         * @interface IDetails\n         * @property {Object.<string,string>|null} [variablesJson] Details variablesJson\n         * @property {string|null} [operationName] Details operationName\n         */\n\n        /**\n         * Constructs a new Details.\n         * @memberof Trace\n         * @classdesc Represents a Details.\n         * @implements IDetails\n         * @constructor\n         * @param {Trace.IDetails=} [properties] Properties to set\n         */\n        function Details(properties) {\n            this.variablesJson = {};\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Details variablesJson.\n         * @member {Object.<string,string>} variablesJson\n         * @memberof Trace.Details\n         * @instance\n         */\n        Details.prototype.variablesJson = $util.emptyObject;\n\n        /**\n         * Details operationName.\n         * @member {string} operationName\n         * @memberof Trace.Details\n         * @instance\n         */\n        Details.prototype.operationName = \"\";\n\n        /**\n         * Creates a new Details instance using the specified properties.\n         * @function create\n         * @memberof Trace.Details\n         * @static\n         * @param {Trace.IDetails=} [properties] Properties to set\n         * @returns {Trace.Details} Details instance\n         */\n        Details.create = function create(properties) {\n            return new Details(properties);\n        };\n\n        /**\n         * Encodes the specified Details message. Does not implicitly {@link Trace.Details.verify|verify} messages.\n         * @function encode\n         * @memberof Trace.Details\n         * @static\n         * @param {Trace.IDetails} message Details message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Details.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.operationName != null && Object.hasOwnProperty.call(message, \"operationName\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.operationName);\n            if (message.variablesJson != null && Object.hasOwnProperty.call(message, \"variablesJson\"))\n                for (let keys = Object.keys(message.variablesJson), i = 0; i < keys.length; ++i)\n                    writer.uint32(/* id 4, wireType 2 =*/34).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.variablesJson[keys[i]]).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Details message, length delimited. Does not implicitly {@link Trace.Details.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Trace.Details\n         * @static\n         * @param {Trace.IDetails} message Details message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Details.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a Details message from the specified reader or buffer.\n         * @function decode\n         * @memberof Trace.Details\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Trace.Details} Details\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Details.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.Details(), key;\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 4:\n                    reader.skip().pos++;\n                    if (message.variablesJson === $util.emptyObject)\n                        message.variablesJson = {};\n                    key = reader.string();\n                    reader.pos++;\n                    message.variablesJson[key] = reader.string();\n                    break;\n                case 3:\n                    message.operationName = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a Details message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Trace.Details\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Trace.Details} Details\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Details.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a Details message.\n         * @function verify\n         * @memberof Trace.Details\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Details.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.variablesJson != null && message.hasOwnProperty(\"variablesJson\")) {\n                if (!$util.isObject(message.variablesJson))\n                    return \"variablesJson: object expected\";\n                let key = Object.keys(message.variablesJson);\n                for (let i = 0; i < key.length; ++i)\n                    if (!$util.isString(message.variablesJson[key[i]]))\n                        return \"variablesJson: string{k:string} expected\";\n            }\n            if (message.operationName != null && message.hasOwnProperty(\"operationName\"))\n                if (!$util.isString(message.operationName))\n                    return \"operationName: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a plain object from a Details message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Trace.Details\n         * @static\n         * @param {Trace.Details} message Details\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Details.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.objects || options.defaults)\n                object.variablesJson = {};\n            if (options.defaults)\n                object.operationName = \"\";\n            if (message.operationName != null && message.hasOwnProperty(\"operationName\"))\n                object.operationName = message.operationName;\n            let keys2;\n            if (message.variablesJson && (keys2 = Object.keys(message.variablesJson)).length) {\n                object.variablesJson = {};\n                for (let j = 0; j < keys2.length; ++j)\n                    object.variablesJson[keys2[j]] = message.variablesJson[keys2[j]];\n            }\n            return object;\n        };\n\n        /**\n         * Converts this Details to JSON.\n         * @function toJSON\n         * @memberof Trace.Details\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Details.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return Details;\n    })();\n\n    Trace.Error = (function() {\n\n        /**\n         * Properties of an Error.\n         * @memberof Trace\n         * @interface IError\n         * @property {string|null} [message] Error message\n         * @property {Array.<Trace.ILocation>|null} [location] Error location\n         * @property {number|null} [timeNs] Error timeNs\n         * @property {string|null} [json] Error json\n         */\n\n        /**\n         * Constructs a new Error.\n         * @memberof Trace\n         * @classdesc Represents an Error.\n         * @implements IError\n         * @constructor\n         * @param {Trace.IError=} [properties] Properties to set\n         */\n        function Error(properties) {\n            this.location = [];\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Error message.\n         * @member {string} message\n         * @memberof Trace.Error\n         * @instance\n         */\n        Error.prototype.message = \"\";\n\n        /**\n         * Error location.\n         * @member {Array.<Trace.ILocation>} location\n         * @memberof Trace.Error\n         * @instance\n         */\n        Error.prototype.location = $util.emptyArray;\n\n        /**\n         * Error timeNs.\n         * @member {number} timeNs\n         * @memberof Trace.Error\n         * @instance\n         */\n        Error.prototype.timeNs = 0;\n\n        /**\n         * Error json.\n         * @member {string} json\n         * @memberof Trace.Error\n         * @instance\n         */\n        Error.prototype.json = \"\";\n\n        /**\n         * Creates a new Error instance using the specified properties.\n         * @function create\n         * @memberof Trace.Error\n         * @static\n         * @param {Trace.IError=} [properties] Properties to set\n         * @returns {Trace.Error} Error instance\n         */\n        Error.create = function create(properties) {\n            return new Error(properties);\n        };\n\n        /**\n         * Encodes the specified Error message. Does not implicitly {@link Trace.Error.verify|verify} messages.\n         * @function encode\n         * @memberof Trace.Error\n         * @static\n         * @param {Trace.IError} message Error message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Error.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.message != null && Object.hasOwnProperty.call(message, \"message\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.message);\n            if (message.location != null && message.location.length)\n                for (let i = 0; i < message.location.length; ++i)\n                    $root.Trace.Location.encode(message.location[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.timeNs != null && Object.hasOwnProperty.call(message, \"timeNs\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.timeNs);\n            if (message.json != null && Object.hasOwnProperty.call(message, \"json\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.json);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Error message, length delimited. Does not implicitly {@link Trace.Error.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Trace.Error\n         * @static\n         * @param {Trace.IError} message Error message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Error.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an Error message from the specified reader or buffer.\n         * @function decode\n         * @memberof Trace.Error\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Trace.Error} Error\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Error.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.Error();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.message = reader.string();\n                    break;\n                case 2:\n                    if (!(message.location && message.location.length))\n                        message.location = [];\n                    message.location.push($root.Trace.Location.decode(reader, reader.uint32()));\n                    break;\n                case 3:\n                    message.timeNs = reader.uint64();\n                    break;\n                case 4:\n                    message.json = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an Error message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Trace.Error\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Trace.Error} Error\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Error.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an Error message.\n         * @function verify\n         * @memberof Trace.Error\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Error.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.message != null && message.hasOwnProperty(\"message\"))\n                if (!$util.isString(message.message))\n                    return \"message: string expected\";\n            if (message.location != null && message.hasOwnProperty(\"location\")) {\n                if (!Array.isArray(message.location))\n                    return \"location: array expected\";\n                for (let i = 0; i < message.location.length; ++i) {\n                    let error = $root.Trace.Location.verify(message.location[i]);\n                    if (error)\n                        return \"location.\" + error;\n                }\n            }\n            if (message.timeNs != null && message.hasOwnProperty(\"timeNs\"))\n                if (!$util.isInteger(message.timeNs) && !(message.timeNs && $util.isInteger(message.timeNs.low) && $util.isInteger(message.timeNs.high)))\n                    return \"timeNs: integer|Long expected\";\n            if (message.json != null && message.hasOwnProperty(\"json\"))\n                if (!$util.isString(message.json))\n                    return \"json: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a plain object from an Error message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Trace.Error\n         * @static\n         * @param {Trace.Error} message Error\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Error.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.arrays || options.defaults)\n                object.location = [];\n            if (options.defaults) {\n                object.message = \"\";\n                object.timeNs = 0;\n                object.json = \"\";\n            }\n            if (message.message != null && message.hasOwnProperty(\"message\"))\n                object.message = message.message;\n            if (message.location && message.location.length) {\n                object.location = [];\n                for (let j = 0; j < message.location.length; ++j)\n                    object.location[j] = $root.Trace.Location.toObject(message.location[j], options);\n            }\n            if (message.timeNs != null && message.hasOwnProperty(\"timeNs\"))\n                if (typeof message.timeNs === \"number\")\n                    object.timeNs = options.longs === String ? String(message.timeNs) : message.timeNs;\n                else\n                    object.timeNs = options.longs === String ? $util.Long.prototype.toString.call(message.timeNs) : options.longs === Number ? new $util.LongBits(message.timeNs.low >>> 0, message.timeNs.high >>> 0).toNumber(true) : message.timeNs;\n            if (message.json != null && message.hasOwnProperty(\"json\"))\n                object.json = message.json;\n            return object;\n        };\n\n        /**\n         * Converts this Error to JSON.\n         * @function toJSON\n         * @memberof Trace.Error\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Error.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return Error;\n    })();\n\n    Trace.HTTP = (function() {\n\n        /**\n         * Properties of a HTTP.\n         * @memberof Trace\n         * @interface IHTTP\n         * @property {Trace.HTTP.Method|null} [method] HTTP method\n         * @property {Object.<string,Trace.HTTP.IValues>|null} [requestHeaders] HTTP requestHeaders\n         * @property {Object.<string,Trace.HTTP.IValues>|null} [responseHeaders] HTTP responseHeaders\n         * @property {number|null} [statusCode] HTTP statusCode\n         */\n\n        /**\n         * Constructs a new HTTP.\n         * @memberof Trace\n         * @classdesc Represents a HTTP.\n         * @implements IHTTP\n         * @constructor\n         * @param {Trace.IHTTP=} [properties] Properties to set\n         */\n        function HTTP(properties) {\n            this.requestHeaders = {};\n            this.responseHeaders = {};\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * HTTP method.\n         * @member {Trace.HTTP.Method} method\n         * @memberof Trace.HTTP\n         * @instance\n         */\n        HTTP.prototype.method = 0;\n\n        /**\n         * HTTP requestHeaders.\n         * @member {Object.<string,Trace.HTTP.IValues>} requestHeaders\n         * @memberof Trace.HTTP\n         * @instance\n         */\n        HTTP.prototype.requestHeaders = $util.emptyObject;\n\n        /**\n         * HTTP responseHeaders.\n         * @member {Object.<string,Trace.HTTP.IValues>} responseHeaders\n         * @memberof Trace.HTTP\n         * @instance\n         */\n        HTTP.prototype.responseHeaders = $util.emptyObject;\n\n        /**\n         * HTTP statusCode.\n         * @member {number} statusCode\n         * @memberof Trace.HTTP\n         * @instance\n         */\n        HTTP.prototype.statusCode = 0;\n\n        /**\n         * Creates a new HTTP instance using the specified properties.\n         * @function create\n         * @memberof Trace.HTTP\n         * @static\n         * @param {Trace.IHTTP=} [properties] Properties to set\n         * @returns {Trace.HTTP} HTTP instance\n         */\n        HTTP.create = function create(properties) {\n            return new HTTP(properties);\n        };\n\n        /**\n         * Encodes the specified HTTP message. Does not implicitly {@link Trace.HTTP.verify|verify} messages.\n         * @function encode\n         * @memberof Trace.HTTP\n         * @static\n         * @param {Trace.IHTTP} message HTTP message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        HTTP.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.method != null && Object.hasOwnProperty.call(message, \"method\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.method);\n            if (message.requestHeaders != null && Object.hasOwnProperty.call(message, \"requestHeaders\"))\n                for (let keys = Object.keys(message.requestHeaders), i = 0; i < keys.length; ++i) {\n                    writer.uint32(/* id 4, wireType 2 =*/34).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);\n                    $root.Trace.HTTP.Values.encode(message.requestHeaders[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n                }\n            if (message.responseHeaders != null && Object.hasOwnProperty.call(message, \"responseHeaders\"))\n                for (let keys = Object.keys(message.responseHeaders), i = 0; i < keys.length; ++i) {\n                    writer.uint32(/* id 5, wireType 2 =*/42).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);\n                    $root.Trace.HTTP.Values.encode(message.responseHeaders[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n                }\n            if (message.statusCode != null && Object.hasOwnProperty.call(message, \"statusCode\"))\n                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.statusCode);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified HTTP message, length delimited. Does not implicitly {@link Trace.HTTP.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Trace.HTTP\n         * @static\n         * @param {Trace.IHTTP} message HTTP message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        HTTP.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a HTTP message from the specified reader or buffer.\n         * @function decode\n         * @memberof Trace.HTTP\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Trace.HTTP} HTTP\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        HTTP.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.HTTP(), key;\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.method = reader.int32();\n                    break;\n                case 4:\n                    reader.skip().pos++;\n                    if (message.requestHeaders === $util.emptyObject)\n                        message.requestHeaders = {};\n                    key = reader.string();\n                    reader.pos++;\n                    message.requestHeaders[key] = $root.Trace.HTTP.Values.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    reader.skip().pos++;\n                    if (message.responseHeaders === $util.emptyObject)\n                        message.responseHeaders = {};\n                    key = reader.string();\n                    reader.pos++;\n                    message.responseHeaders[key] = $root.Trace.HTTP.Values.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.statusCode = reader.uint32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a HTTP message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Trace.HTTP\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Trace.HTTP} HTTP\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        HTTP.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a HTTP message.\n         * @function verify\n         * @memberof Trace.HTTP\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        HTTP.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.method != null && message.hasOwnProperty(\"method\"))\n                switch (message.method) {\n                default:\n                    return \"method: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                case 8:\n                case 9:\n                    break;\n                }\n            if (message.requestHeaders != null && message.hasOwnProperty(\"requestHeaders\")) {\n                if (!$util.isObject(message.requestHeaders))\n                    return \"requestHeaders: object expected\";\n                let key = Object.keys(message.requestHeaders);\n                for (let i = 0; i < key.length; ++i) {\n                    let error = $root.Trace.HTTP.Values.verify(message.requestHeaders[key[i]]);\n                    if (error)\n                        return \"requestHeaders.\" + error;\n                }\n            }\n            if (message.responseHeaders != null && message.hasOwnProperty(\"responseHeaders\")) {\n                if (!$util.isObject(message.responseHeaders))\n                    return \"responseHeaders: object expected\";\n                let key = Object.keys(message.responseHeaders);\n                for (let i = 0; i < key.length; ++i) {\n                    let error = $root.Trace.HTTP.Values.verify(message.responseHeaders[key[i]]);\n                    if (error)\n                        return \"responseHeaders.\" + error;\n                }\n            }\n            if (message.statusCode != null && message.hasOwnProperty(\"statusCode\"))\n                if (!$util.isInteger(message.statusCode))\n                    return \"statusCode: integer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a plain object from a HTTP message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Trace.HTTP\n         * @static\n         * @param {Trace.HTTP} message HTTP\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        HTTP.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.objects || options.defaults) {\n                object.requestHeaders = {};\n                object.responseHeaders = {};\n            }\n            if (options.defaults) {\n                object.method = options.enums === String ? \"UNKNOWN\" : 0;\n                object.statusCode = 0;\n            }\n            if (message.method != null && message.hasOwnProperty(\"method\"))\n                object.method = options.enums === String ? $root.Trace.HTTP.Method[message.method] : message.method;\n            let keys2;\n            if (message.requestHeaders && (keys2 = Object.keys(message.requestHeaders)).length) {\n                object.requestHeaders = {};\n                for (let j = 0; j < keys2.length; ++j)\n                    object.requestHeaders[keys2[j]] = $root.Trace.HTTP.Values.toObject(message.requestHeaders[keys2[j]], options);\n            }\n            if (message.responseHeaders && (keys2 = Object.keys(message.responseHeaders)).length) {\n                object.responseHeaders = {};\n                for (let j = 0; j < keys2.length; ++j)\n                    object.responseHeaders[keys2[j]] = $root.Trace.HTTP.Values.toObject(message.responseHeaders[keys2[j]], options);\n            }\n            if (message.statusCode != null && message.hasOwnProperty(\"statusCode\"))\n                object.statusCode = message.statusCode;\n            return object;\n        };\n\n        /**\n         * Converts this HTTP to JSON.\n         * @function toJSON\n         * @memberof Trace.HTTP\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        HTTP.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        HTTP.Values = (function() {\n\n            /**\n             * Properties of a Values.\n             * @memberof Trace.HTTP\n             * @interface IValues\n             * @property {Array.<string>|null} [value] Values value\n             */\n\n            /**\n             * Constructs a new Values.\n             * @memberof Trace.HTTP\n             * @classdesc Represents a Values.\n             * @implements IValues\n             * @constructor\n             * @param {Trace.HTTP.IValues=} [properties] Properties to set\n             */\n            function Values(properties) {\n                this.value = [];\n                if (properties)\n                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Values value.\n             * @member {Array.<string>} value\n             * @memberof Trace.HTTP.Values\n             * @instance\n             */\n            Values.prototype.value = $util.emptyArray;\n\n            /**\n             * Creates a new Values instance using the specified properties.\n             * @function create\n             * @memberof Trace.HTTP.Values\n             * @static\n             * @param {Trace.HTTP.IValues=} [properties] Properties to set\n             * @returns {Trace.HTTP.Values} Values instance\n             */\n            Values.create = function create(properties) {\n                return new Values(properties);\n            };\n\n            /**\n             * Encodes the specified Values message. Does not implicitly {@link Trace.HTTP.Values.verify|verify} messages.\n             * @function encode\n             * @memberof Trace.HTTP.Values\n             * @static\n             * @param {Trace.HTTP.IValues} message Values message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Values.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.value != null && message.value.length)\n                    for (let i = 0; i < message.value.length; ++i)\n                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.value[i]);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Values message, length delimited. Does not implicitly {@link Trace.HTTP.Values.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof Trace.HTTP.Values\n             * @static\n             * @param {Trace.HTTP.IValues} message Values message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Values.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Values message from the specified reader or buffer.\n             * @function decode\n             * @memberof Trace.HTTP.Values\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {Trace.HTTP.Values} Values\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Values.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.HTTP.Values();\n                while (reader.pos < end) {\n                    let tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        if (!(message.value && message.value.length))\n                            message.value = [];\n                        message.value.push(reader.string());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Values message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof Trace.HTTP.Values\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {Trace.HTTP.Values} Values\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Values.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Values message.\n             * @function verify\n             * @memberof Trace.HTTP.Values\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Values.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.value != null && message.hasOwnProperty(\"value\")) {\n                    if (!Array.isArray(message.value))\n                        return \"value: array expected\";\n                    for (let i = 0; i < message.value.length; ++i)\n                        if (!$util.isString(message.value[i]))\n                            return \"value: string[] expected\";\n                }\n                return null;\n            };\n\n            /**\n             * Creates a plain object from a Values message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Trace.HTTP.Values\n             * @static\n             * @param {Trace.HTTP.Values} message Values\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Values.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                let object = {};\n                if (options.arrays || options.defaults)\n                    object.value = [];\n                if (message.value && message.value.length) {\n                    object.value = [];\n                    for (let j = 0; j < message.value.length; ++j)\n                        object.value[j] = message.value[j];\n                }\n                return object;\n            };\n\n            /**\n             * Converts this Values to JSON.\n             * @function toJSON\n             * @memberof Trace.HTTP.Values\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Values.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Values;\n        })();\n\n        /**\n         * Method enum.\n         * @name Trace.HTTP.Method\n         * @enum {string}\n         * @property {number} UNKNOWN=0 UNKNOWN value\n         * @property {number} OPTIONS=1 OPTIONS value\n         * @property {number} GET=2 GET value\n         * @property {number} HEAD=3 HEAD value\n         * @property {number} POST=4 POST value\n         * @property {number} PUT=5 PUT value\n         * @property {number} DELETE=6 DELETE value\n         * @property {number} TRACE=7 TRACE value\n         * @property {number} CONNECT=8 CONNECT value\n         * @property {number} PATCH=9 PATCH value\n         */\n        HTTP.Method = (function() {\n            const valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNKNOWN\"] = 0;\n            values[valuesById[1] = \"OPTIONS\"] = 1;\n            values[valuesById[2] = \"GET\"] = 2;\n            values[valuesById[3] = \"HEAD\"] = 3;\n            values[valuesById[4] = \"POST\"] = 4;\n            values[valuesById[5] = \"PUT\"] = 5;\n            values[valuesById[6] = \"DELETE\"] = 6;\n            values[valuesById[7] = \"TRACE\"] = 7;\n            values[valuesById[8] = \"CONNECT\"] = 8;\n            values[valuesById[9] = \"PATCH\"] = 9;\n            return values;\n        })();\n\n        return HTTP;\n    })();\n\n    Trace.Location = (function() {\n\n        /**\n         * Properties of a Location.\n         * @memberof Trace\n         * @interface ILocation\n         * @property {number|null} [line] Location line\n         * @property {number|null} [column] Location column\n         */\n\n        /**\n         * Constructs a new Location.\n         * @memberof Trace\n         * @classdesc Represents a Location.\n         * @implements ILocation\n         * @constructor\n         * @param {Trace.ILocation=} [properties] Properties to set\n         */\n        function Location(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Location line.\n         * @member {number} line\n         * @memberof Trace.Location\n         * @instance\n         */\n        Location.prototype.line = 0;\n\n        /**\n         * Location column.\n         * @member {number} column\n         * @memberof Trace.Location\n         * @instance\n         */\n        Location.prototype.column = 0;\n\n        /**\n         * Creates a new Location instance using the specified properties.\n         * @function create\n         * @memberof Trace.Location\n         * @static\n         * @param {Trace.ILocation=} [properties] Properties to set\n         * @returns {Trace.Location} Location instance\n         */\n        Location.create = function create(properties) {\n            return new Location(properties);\n        };\n\n        /**\n         * Encodes the specified Location message. Does not implicitly {@link Trace.Location.verify|verify} messages.\n         * @function encode\n         * @memberof Trace.Location\n         * @static\n         * @param {Trace.ILocation} message Location message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Location.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.line != null && Object.hasOwnProperty.call(message, \"line\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.line);\n            if (message.column != null && Object.hasOwnProperty.call(message, \"column\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.column);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Location message, length delimited. Does not implicitly {@link Trace.Location.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Trace.Location\n         * @static\n         * @param {Trace.ILocation} message Location message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Location.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a Location message from the specified reader or buffer.\n         * @function decode\n         * @memberof Trace.Location\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Trace.Location} Location\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Location.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.Location();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.line = reader.uint32();\n                    break;\n                case 2:\n                    message.column = reader.uint32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a Location message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Trace.Location\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Trace.Location} Location\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Location.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a Location message.\n         * @function verify\n         * @memberof Trace.Location\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Location.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.line != null && message.hasOwnProperty(\"line\"))\n                if (!$util.isInteger(message.line))\n                    return \"line: integer expected\";\n            if (message.column != null && message.hasOwnProperty(\"column\"))\n                if (!$util.isInteger(message.column))\n                    return \"column: integer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a plain object from a Location message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Trace.Location\n         * @static\n         * @param {Trace.Location} message Location\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Location.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.line = 0;\n                object.column = 0;\n            }\n            if (message.line != null && message.hasOwnProperty(\"line\"))\n                object.line = message.line;\n            if (message.column != null && message.hasOwnProperty(\"column\"))\n                object.column = message.column;\n            return object;\n        };\n\n        /**\n         * Converts this Location to JSON.\n         * @function toJSON\n         * @memberof Trace.Location\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Location.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return Location;\n    })();\n\n    Trace.Node = (function() {\n\n        /**\n         * Properties of a Node.\n         * @memberof Trace\n         * @interface INode\n         * @property {string|null} [responseName] Node responseName\n         * @property {number|null} [index] Node index\n         * @property {string|null} [originalFieldName] Node originalFieldName\n         * @property {string|null} [type] Node type\n         * @property {string|null} [parentType] Node parentType\n         * @property {Trace.ICachePolicy|null} [cachePolicy] Node cachePolicy\n         * @property {number|null} [startTime] Node startTime\n         * @property {number|null} [endTime] Node endTime\n         * @property {Array.<Trace.IError>|null} [error] Node error\n         * @property {Array.<Trace.INode>|null} [child] Node child\n         */\n\n        /**\n         * Constructs a new Node.\n         * @memberof Trace\n         * @classdesc Represents a Node.\n         * @implements INode\n         * @constructor\n         * @param {Trace.INode=} [properties] Properties to set\n         */\n        function Node(properties) {\n            this.error = [];\n            this.child = [];\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Node responseName.\n         * @member {string} responseName\n         * @memberof Trace.Node\n         * @instance\n         */\n        Node.prototype.responseName = \"\";\n\n        /**\n         * Node index.\n         * @member {number} index\n         * @memberof Trace.Node\n         * @instance\n         */\n        Node.prototype.index = 0;\n\n        /**\n         * Node originalFieldName.\n         * @member {string} originalFieldName\n         * @memberof Trace.Node\n         * @instance\n         */\n        Node.prototype.originalFieldName = \"\";\n\n        /**\n         * Node type.\n         * @member {string} type\n         * @memberof Trace.Node\n         * @instance\n         */\n        Node.prototype.type = \"\";\n\n        /**\n         * Node parentType.\n         * @member {string} parentType\n         * @memberof Trace.Node\n         * @instance\n         */\n        Node.prototype.parentType = \"\";\n\n        /**\n         * Node cachePolicy.\n         * @member {Trace.ICachePolicy|null|undefined} cachePolicy\n         * @memberof Trace.Node\n         * @instance\n         */\n        Node.prototype.cachePolicy = null;\n\n        /**\n         * Node startTime.\n         * @member {number} startTime\n         * @memberof Trace.Node\n         * @instance\n         */\n        Node.prototype.startTime = 0;\n\n        /**\n         * Node endTime.\n         * @member {number} endTime\n         * @memberof Trace.Node\n         * @instance\n         */\n        Node.prototype.endTime = 0;\n\n        /**\n         * Node error.\n         * @member {Array.<Trace.IError>} error\n         * @memberof Trace.Node\n         * @instance\n         */\n        Node.prototype.error = $util.emptyArray;\n\n        /**\n         * Node child.\n         * @member {Array.<Trace.INode>} child\n         * @memberof Trace.Node\n         * @instance\n         */\n        Node.prototype.child = $util.emptyArray;\n\n        // OneOf field names bound to virtual getters and setters\n        let $oneOfFields;\n\n        /**\n         * Node id.\n         * @member {\"responseName\"|\"index\"|undefined} id\n         * @memberof Trace.Node\n         * @instance\n         */\n        Object.defineProperty(Node.prototype, \"id\", {\n            get: $util.oneOfGetter($oneOfFields = [\"responseName\", \"index\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new Node instance using the specified properties.\n         * @function create\n         * @memberof Trace.Node\n         * @static\n         * @param {Trace.INode=} [properties] Properties to set\n         * @returns {Trace.Node} Node instance\n         */\n        Node.create = function create(properties) {\n            return new Node(properties);\n        };\n\n        /**\n         * Encodes the specified Node message. Does not implicitly {@link Trace.Node.verify|verify} messages.\n         * @function encode\n         * @memberof Trace.Node\n         * @static\n         * @param {Trace.INode} message Node message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Node.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.responseName != null && Object.hasOwnProperty.call(message, \"responseName\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.responseName);\n            if (message.index != null && Object.hasOwnProperty.call(message, \"index\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.index);\n            if (message.type != null && Object.hasOwnProperty.call(message, \"type\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.type);\n            if (message.cachePolicy != null && Object.hasOwnProperty.call(message, \"cachePolicy\"))\n                $root.Trace.CachePolicy.encode(message.cachePolicy, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.startTime != null && Object.hasOwnProperty.call(message, \"startTime\"))\n                writer.uint32(/* id 8, wireType 0 =*/64).uint64(message.startTime);\n            if (message.endTime != null && Object.hasOwnProperty.call(message, \"endTime\"))\n                writer.uint32(/* id 9, wireType 0 =*/72).uint64(message.endTime);\n            if (message.error != null && message.error.length)\n                for (let i = 0; i < message.error.length; ++i)\n                    $root.Trace.Error.encode(message.error[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.child != null && message.child.length)\n                for (let i = 0; i < message.child.length; ++i)\n                    $root.Trace.Node.encode(message.child[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();\n            if (message.parentType != null && Object.hasOwnProperty.call(message, \"parentType\"))\n                writer.uint32(/* id 13, wireType 2 =*/106).string(message.parentType);\n            if (message.originalFieldName != null && Object.hasOwnProperty.call(message, \"originalFieldName\"))\n                writer.uint32(/* id 14, wireType 2 =*/114).string(message.originalFieldName);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Node message, length delimited. Does not implicitly {@link Trace.Node.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Trace.Node\n         * @static\n         * @param {Trace.INode} message Node message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Node.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a Node message from the specified reader or buffer.\n         * @function decode\n         * @memberof Trace.Node\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Trace.Node} Node\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Node.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.Node();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.responseName = reader.string();\n                    break;\n                case 2:\n                    message.index = reader.uint32();\n                    break;\n                case 14:\n                    message.originalFieldName = reader.string();\n                    break;\n                case 3:\n                    message.type = reader.string();\n                    break;\n                case 13:\n                    message.parentType = reader.string();\n                    break;\n                case 5:\n                    message.cachePolicy = $root.Trace.CachePolicy.decode(reader, reader.uint32());\n                    break;\n                case 8:\n                    message.startTime = reader.uint64();\n                    break;\n                case 9:\n                    message.endTime = reader.uint64();\n                    break;\n                case 11:\n                    if (!(message.error && message.error.length))\n                        message.error = [];\n                    message.error.push($root.Trace.Error.decode(reader, reader.uint32()));\n                    break;\n                case 12:\n                    if (!(message.child && message.child.length))\n                        message.child = [];\n                    message.child.push($root.Trace.Node.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a Node message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Trace.Node\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Trace.Node} Node\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Node.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a Node message.\n         * @function verify\n         * @memberof Trace.Node\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Node.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            let properties = {};\n            if (message.responseName != null && message.hasOwnProperty(\"responseName\")) {\n                properties.id = 1;\n                if (!$util.isString(message.responseName))\n                    return \"responseName: string expected\";\n            }\n            if (message.index != null && message.hasOwnProperty(\"index\")) {\n                if (properties.id === 1)\n                    return \"id: multiple values\";\n                properties.id = 1;\n                if (!$util.isInteger(message.index))\n                    return \"index: integer expected\";\n            }\n            if (message.originalFieldName != null && message.hasOwnProperty(\"originalFieldName\"))\n                if (!$util.isString(message.originalFieldName))\n                    return \"originalFieldName: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                if (!$util.isString(message.type))\n                    return \"type: string expected\";\n            if (message.parentType != null && message.hasOwnProperty(\"parentType\"))\n                if (!$util.isString(message.parentType))\n                    return \"parentType: string expected\";\n            if (message.cachePolicy != null && message.hasOwnProperty(\"cachePolicy\")) {\n                let error = $root.Trace.CachePolicy.verify(message.cachePolicy);\n                if (error)\n                    return \"cachePolicy.\" + error;\n            }\n            if (message.startTime != null && message.hasOwnProperty(\"startTime\"))\n                if (!$util.isInteger(message.startTime) && !(message.startTime && $util.isInteger(message.startTime.low) && $util.isInteger(message.startTime.high)))\n                    return \"startTime: integer|Long expected\";\n            if (message.endTime != null && message.hasOwnProperty(\"endTime\"))\n                if (!$util.isInteger(message.endTime) && !(message.endTime && $util.isInteger(message.endTime.low) && $util.isInteger(message.endTime.high)))\n                    return \"endTime: integer|Long expected\";\n            if (message.error != null && message.hasOwnProperty(\"error\")) {\n                if (!Array.isArray(message.error))\n                    return \"error: array expected\";\n                for (let i = 0; i < message.error.length; ++i) {\n                    let error = $root.Trace.Error.verify(message.error[i]);\n                    if (error)\n                        return \"error.\" + error;\n                }\n            }\n            if (message.child != null && message.hasOwnProperty(\"child\")) {\n                if (!Array.isArray(message.child))\n                    return \"child: array expected\";\n                for (let i = 0; i < message.child.length; ++i) {\n                    let error = $root.Trace.Node.verify(message.child[i]);\n                    if (error)\n                        return \"child.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a plain object from a Node message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Trace.Node\n         * @static\n         * @param {Trace.Node} message Node\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Node.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.arrays || options.defaults) {\n                object.error = [];\n                object.child = [];\n            }\n            if (options.defaults) {\n                object.type = \"\";\n                object.cachePolicy = null;\n                object.startTime = 0;\n                object.endTime = 0;\n                object.parentType = \"\";\n                object.originalFieldName = \"\";\n            }\n            if (message.responseName != null && message.hasOwnProperty(\"responseName\")) {\n                object.responseName = message.responseName;\n                if (options.oneofs)\n                    object.id = \"responseName\";\n            }\n            if (message.index != null && message.hasOwnProperty(\"index\")) {\n                object.index = message.index;\n                if (options.oneofs)\n                    object.id = \"index\";\n            }\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = message.type;\n            if (message.cachePolicy != null && message.hasOwnProperty(\"cachePolicy\"))\n                object.cachePolicy = $root.Trace.CachePolicy.toObject(message.cachePolicy, options);\n            if (message.startTime != null && message.hasOwnProperty(\"startTime\"))\n                if (typeof message.startTime === \"number\")\n                    object.startTime = options.longs === String ? String(message.startTime) : message.startTime;\n                else\n                    object.startTime = options.longs === String ? $util.Long.prototype.toString.call(message.startTime) : options.longs === Number ? new $util.LongBits(message.startTime.low >>> 0, message.startTime.high >>> 0).toNumber(true) : message.startTime;\n            if (message.endTime != null && message.hasOwnProperty(\"endTime\"))\n                if (typeof message.endTime === \"number\")\n                    object.endTime = options.longs === String ? String(message.endTime) : message.endTime;\n                else\n                    object.endTime = options.longs === String ? $util.Long.prototype.toString.call(message.endTime) : options.longs === Number ? new $util.LongBits(message.endTime.low >>> 0, message.endTime.high >>> 0).toNumber(true) : message.endTime;\n            if (message.error && message.error.length) {\n                object.error = [];\n                for (let j = 0; j < message.error.length; ++j)\n                    object.error[j] = $root.Trace.Error.toObject(message.error[j], options);\n            }\n            if (message.child && message.child.length) {\n                object.child = [];\n                for (let j = 0; j < message.child.length; ++j)\n                    object.child[j] = $root.Trace.Node.toObject(message.child[j], options);\n            }\n            if (message.parentType != null && message.hasOwnProperty(\"parentType\"))\n                object.parentType = message.parentType;\n            if (message.originalFieldName != null && message.hasOwnProperty(\"originalFieldName\"))\n                object.originalFieldName = message.originalFieldName;\n            return object;\n        };\n\n        /**\n         * Converts this Node to JSON.\n         * @function toJSON\n         * @memberof Trace.Node\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Node.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return Node;\n    })();\n\n    Trace.QueryPlanNode = (function() {\n\n        /**\n         * Properties of a QueryPlanNode.\n         * @memberof Trace\n         * @interface IQueryPlanNode\n         * @property {Trace.QueryPlanNode.ISequenceNode|null} [sequence] QueryPlanNode sequence\n         * @property {Trace.QueryPlanNode.IParallelNode|null} [parallel] QueryPlanNode parallel\n         * @property {Trace.QueryPlanNode.IFetchNode|null} [fetch] QueryPlanNode fetch\n         * @property {Trace.QueryPlanNode.IFlattenNode|null} [flatten] QueryPlanNode flatten\n         * @property {Trace.QueryPlanNode.IDeferNode|null} [defer] QueryPlanNode defer\n         * @property {Trace.QueryPlanNode.IConditionNode|null} [condition] QueryPlanNode condition\n         */\n\n        /**\n         * Constructs a new QueryPlanNode.\n         * @memberof Trace\n         * @classdesc Represents a QueryPlanNode.\n         * @implements IQueryPlanNode\n         * @constructor\n         * @param {Trace.IQueryPlanNode=} [properties] Properties to set\n         */\n        function QueryPlanNode(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * QueryPlanNode sequence.\n         * @member {Trace.QueryPlanNode.ISequenceNode|null|undefined} sequence\n         * @memberof Trace.QueryPlanNode\n         * @instance\n         */\n        QueryPlanNode.prototype.sequence = null;\n\n        /**\n         * QueryPlanNode parallel.\n         * @member {Trace.QueryPlanNode.IParallelNode|null|undefined} parallel\n         * @memberof Trace.QueryPlanNode\n         * @instance\n         */\n        QueryPlanNode.prototype.parallel = null;\n\n        /**\n         * QueryPlanNode fetch.\n         * @member {Trace.QueryPlanNode.IFetchNode|null|undefined} fetch\n         * @memberof Trace.QueryPlanNode\n         * @instance\n         */\n        QueryPlanNode.prototype.fetch = null;\n\n        /**\n         * QueryPlanNode flatten.\n         * @member {Trace.QueryPlanNode.IFlattenNode|null|undefined} flatten\n         * @memberof Trace.QueryPlanNode\n         * @instance\n         */\n        QueryPlanNode.prototype.flatten = null;\n\n        /**\n         * QueryPlanNode defer.\n         * @member {Trace.QueryPlanNode.IDeferNode|null|undefined} defer\n         * @memberof Trace.QueryPlanNode\n         * @instance\n         */\n        QueryPlanNode.prototype.defer = null;\n\n        /**\n         * QueryPlanNode condition.\n         * @member {Trace.QueryPlanNode.IConditionNode|null|undefined} condition\n         * @memberof Trace.QueryPlanNode\n         * @instance\n         */\n        QueryPlanNode.prototype.condition = null;\n\n        // OneOf field names bound to virtual getters and setters\n        let $oneOfFields;\n\n        /**\n         * QueryPlanNode node.\n         * @member {\"sequence\"|\"parallel\"|\"fetch\"|\"flatten\"|\"defer\"|\"condition\"|undefined} node\n         * @memberof Trace.QueryPlanNode\n         * @instance\n         */\n        Object.defineProperty(QueryPlanNode.prototype, \"node\", {\n            get: $util.oneOfGetter($oneOfFields = [\"sequence\", \"parallel\", \"fetch\", \"flatten\", \"defer\", \"condition\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new QueryPlanNode instance using the specified properties.\n         * @function create\n         * @memberof Trace.QueryPlanNode\n         * @static\n         * @param {Trace.IQueryPlanNode=} [properties] Properties to set\n         * @returns {Trace.QueryPlanNode} QueryPlanNode instance\n         */\n        QueryPlanNode.create = function create(properties) {\n            return new QueryPlanNode(properties);\n        };\n\n        /**\n         * Encodes the specified QueryPlanNode message. Does not implicitly {@link Trace.QueryPlanNode.verify|verify} messages.\n         * @function encode\n         * @memberof Trace.QueryPlanNode\n         * @static\n         * @param {Trace.IQueryPlanNode} message QueryPlanNode message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        QueryPlanNode.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.sequence != null && Object.hasOwnProperty.call(message, \"sequence\"))\n                $root.Trace.QueryPlanNode.SequenceNode.encode(message.sequence, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.parallel != null && Object.hasOwnProperty.call(message, \"parallel\"))\n                $root.Trace.QueryPlanNode.ParallelNode.encode(message.parallel, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.fetch != null && Object.hasOwnProperty.call(message, \"fetch\"))\n                $root.Trace.QueryPlanNode.FetchNode.encode(message.fetch, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.flatten != null && Object.hasOwnProperty.call(message, \"flatten\"))\n                $root.Trace.QueryPlanNode.FlattenNode.encode(message.flatten, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n            if (message.defer != null && Object.hasOwnProperty.call(message, \"defer\"))\n                $root.Trace.QueryPlanNode.DeferNode.encode(message.defer, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.condition != null && Object.hasOwnProperty.call(message, \"condition\"))\n                $root.Trace.QueryPlanNode.ConditionNode.encode(message.condition, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified QueryPlanNode message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Trace.QueryPlanNode\n         * @static\n         * @param {Trace.IQueryPlanNode} message QueryPlanNode message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        QueryPlanNode.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a QueryPlanNode message from the specified reader or buffer.\n         * @function decode\n         * @memberof Trace.QueryPlanNode\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Trace.QueryPlanNode} QueryPlanNode\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        QueryPlanNode.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.sequence = $root.Trace.QueryPlanNode.SequenceNode.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.parallel = $root.Trace.QueryPlanNode.ParallelNode.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.fetch = $root.Trace.QueryPlanNode.FetchNode.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.flatten = $root.Trace.QueryPlanNode.FlattenNode.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    message.defer = $root.Trace.QueryPlanNode.DeferNode.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.condition = $root.Trace.QueryPlanNode.ConditionNode.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a QueryPlanNode message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Trace.QueryPlanNode\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Trace.QueryPlanNode} QueryPlanNode\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        QueryPlanNode.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a QueryPlanNode message.\n         * @function verify\n         * @memberof Trace.QueryPlanNode\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        QueryPlanNode.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            let properties = {};\n            if (message.sequence != null && message.hasOwnProperty(\"sequence\")) {\n                properties.node = 1;\n                {\n                    let error = $root.Trace.QueryPlanNode.SequenceNode.verify(message.sequence);\n                    if (error)\n                        return \"sequence.\" + error;\n                }\n            }\n            if (message.parallel != null && message.hasOwnProperty(\"parallel\")) {\n                if (properties.node === 1)\n                    return \"node: multiple values\";\n                properties.node = 1;\n                {\n                    let error = $root.Trace.QueryPlanNode.ParallelNode.verify(message.parallel);\n                    if (error)\n                        return \"parallel.\" + error;\n                }\n            }\n            if (message.fetch != null && message.hasOwnProperty(\"fetch\")) {\n                if (properties.node === 1)\n                    return \"node: multiple values\";\n                properties.node = 1;\n                {\n                    let error = $root.Trace.QueryPlanNode.FetchNode.verify(message.fetch);\n                    if (error)\n                        return \"fetch.\" + error;\n                }\n            }\n            if (message.flatten != null && message.hasOwnProperty(\"flatten\")) {\n                if (properties.node === 1)\n                    return \"node: multiple values\";\n                properties.node = 1;\n                {\n                    let error = $root.Trace.QueryPlanNode.FlattenNode.verify(message.flatten);\n                    if (error)\n                        return \"flatten.\" + error;\n                }\n            }\n            if (message.defer != null && message.hasOwnProperty(\"defer\")) {\n                if (properties.node === 1)\n                    return \"node: multiple values\";\n                properties.node = 1;\n                {\n                    let error = $root.Trace.QueryPlanNode.DeferNode.verify(message.defer);\n                    if (error)\n                        return \"defer.\" + error;\n                }\n            }\n            if (message.condition != null && message.hasOwnProperty(\"condition\")) {\n                if (properties.node === 1)\n                    return \"node: multiple values\";\n                properties.node = 1;\n                {\n                    let error = $root.Trace.QueryPlanNode.ConditionNode.verify(message.condition);\n                    if (error)\n                        return \"condition.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a plain object from a QueryPlanNode message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Trace.QueryPlanNode\n         * @static\n         * @param {Trace.QueryPlanNode} message QueryPlanNode\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        QueryPlanNode.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (message.sequence != null && message.hasOwnProperty(\"sequence\")) {\n                object.sequence = $root.Trace.QueryPlanNode.SequenceNode.toObject(message.sequence, options);\n                if (options.oneofs)\n                    object.node = \"sequence\";\n            }\n            if (message.parallel != null && message.hasOwnProperty(\"parallel\")) {\n                object.parallel = $root.Trace.QueryPlanNode.ParallelNode.toObject(message.parallel, options);\n                if (options.oneofs)\n                    object.node = \"parallel\";\n            }\n            if (message.fetch != null && message.hasOwnProperty(\"fetch\")) {\n                object.fetch = $root.Trace.QueryPlanNode.FetchNode.toObject(message.fetch, options);\n                if (options.oneofs)\n                    object.node = \"fetch\";\n            }\n            if (message.flatten != null && message.hasOwnProperty(\"flatten\")) {\n                object.flatten = $root.Trace.QueryPlanNode.FlattenNode.toObject(message.flatten, options);\n                if (options.oneofs)\n                    object.node = \"flatten\";\n            }\n            if (message.defer != null && message.hasOwnProperty(\"defer\")) {\n                object.defer = $root.Trace.QueryPlanNode.DeferNode.toObject(message.defer, options);\n                if (options.oneofs)\n                    object.node = \"defer\";\n            }\n            if (message.condition != null && message.hasOwnProperty(\"condition\")) {\n                object.condition = $root.Trace.QueryPlanNode.ConditionNode.toObject(message.condition, options);\n                if (options.oneofs)\n                    object.node = \"condition\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this QueryPlanNode to JSON.\n         * @function toJSON\n         * @memberof Trace.QueryPlanNode\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        QueryPlanNode.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        QueryPlanNode.SequenceNode = (function() {\n\n            /**\n             * Properties of a SequenceNode.\n             * @memberof Trace.QueryPlanNode\n             * @interface ISequenceNode\n             * @property {Array.<Trace.IQueryPlanNode>|null} [nodes] SequenceNode nodes\n             */\n\n            /**\n             * Constructs a new SequenceNode.\n             * @memberof Trace.QueryPlanNode\n             * @classdesc Represents a SequenceNode.\n             * @implements ISequenceNode\n             * @constructor\n             * @param {Trace.QueryPlanNode.ISequenceNode=} [properties] Properties to set\n             */\n            function SequenceNode(properties) {\n                this.nodes = [];\n                if (properties)\n                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * SequenceNode nodes.\n             * @member {Array.<Trace.IQueryPlanNode>} nodes\n             * @memberof Trace.QueryPlanNode.SequenceNode\n             * @instance\n             */\n            SequenceNode.prototype.nodes = $util.emptyArray;\n\n            /**\n             * Creates a new SequenceNode instance using the specified properties.\n             * @function create\n             * @memberof Trace.QueryPlanNode.SequenceNode\n             * @static\n             * @param {Trace.QueryPlanNode.ISequenceNode=} [properties] Properties to set\n             * @returns {Trace.QueryPlanNode.SequenceNode} SequenceNode instance\n             */\n            SequenceNode.create = function create(properties) {\n                return new SequenceNode(properties);\n            };\n\n            /**\n             * Encodes the specified SequenceNode message. Does not implicitly {@link Trace.QueryPlanNode.SequenceNode.verify|verify} messages.\n             * @function encode\n             * @memberof Trace.QueryPlanNode.SequenceNode\n             * @static\n             * @param {Trace.QueryPlanNode.ISequenceNode} message SequenceNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            SequenceNode.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.nodes != null && message.nodes.length)\n                    for (let i = 0; i < message.nodes.length; ++i)\n                        $root.Trace.QueryPlanNode.encode(message.nodes[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified SequenceNode message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.SequenceNode.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof Trace.QueryPlanNode.SequenceNode\n             * @static\n             * @param {Trace.QueryPlanNode.ISequenceNode} message SequenceNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            SequenceNode.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a SequenceNode message from the specified reader or buffer.\n             * @function decode\n             * @memberof Trace.QueryPlanNode.SequenceNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {Trace.QueryPlanNode.SequenceNode} SequenceNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            SequenceNode.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode.SequenceNode();\n                while (reader.pos < end) {\n                    let tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        if (!(message.nodes && message.nodes.length))\n                            message.nodes = [];\n                        message.nodes.push($root.Trace.QueryPlanNode.decode(reader, reader.uint32()));\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a SequenceNode message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof Trace.QueryPlanNode.SequenceNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {Trace.QueryPlanNode.SequenceNode} SequenceNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            SequenceNode.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a SequenceNode message.\n             * @function verify\n             * @memberof Trace.QueryPlanNode.SequenceNode\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            SequenceNode.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.nodes != null && message.hasOwnProperty(\"nodes\")) {\n                    if (!Array.isArray(message.nodes))\n                        return \"nodes: array expected\";\n                    for (let i = 0; i < message.nodes.length; ++i) {\n                        let error = $root.Trace.QueryPlanNode.verify(message.nodes[i]);\n                        if (error)\n                            return \"nodes.\" + error;\n                    }\n                }\n                return null;\n            };\n\n            /**\n             * Creates a plain object from a SequenceNode message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Trace.QueryPlanNode.SequenceNode\n             * @static\n             * @param {Trace.QueryPlanNode.SequenceNode} message SequenceNode\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            SequenceNode.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                let object = {};\n                if (options.arrays || options.defaults)\n                    object.nodes = [];\n                if (message.nodes && message.nodes.length) {\n                    object.nodes = [];\n                    for (let j = 0; j < message.nodes.length; ++j)\n                        object.nodes[j] = $root.Trace.QueryPlanNode.toObject(message.nodes[j], options);\n                }\n                return object;\n            };\n\n            /**\n             * Converts this SequenceNode to JSON.\n             * @function toJSON\n             * @memberof Trace.QueryPlanNode.SequenceNode\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            SequenceNode.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return SequenceNode;\n        })();\n\n        QueryPlanNode.ParallelNode = (function() {\n\n            /**\n             * Properties of a ParallelNode.\n             * @memberof Trace.QueryPlanNode\n             * @interface IParallelNode\n             * @property {Array.<Trace.IQueryPlanNode>|null} [nodes] ParallelNode nodes\n             */\n\n            /**\n             * Constructs a new ParallelNode.\n             * @memberof Trace.QueryPlanNode\n             * @classdesc Represents a ParallelNode.\n             * @implements IParallelNode\n             * @constructor\n             * @param {Trace.QueryPlanNode.IParallelNode=} [properties] Properties to set\n             */\n            function ParallelNode(properties) {\n                this.nodes = [];\n                if (properties)\n                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * ParallelNode nodes.\n             * @member {Array.<Trace.IQueryPlanNode>} nodes\n             * @memberof Trace.QueryPlanNode.ParallelNode\n             * @instance\n             */\n            ParallelNode.prototype.nodes = $util.emptyArray;\n\n            /**\n             * Creates a new ParallelNode instance using the specified properties.\n             * @function create\n             * @memberof Trace.QueryPlanNode.ParallelNode\n             * @static\n             * @param {Trace.QueryPlanNode.IParallelNode=} [properties] Properties to set\n             * @returns {Trace.QueryPlanNode.ParallelNode} ParallelNode instance\n             */\n            ParallelNode.create = function create(properties) {\n                return new ParallelNode(properties);\n            };\n\n            /**\n             * Encodes the specified ParallelNode message. Does not implicitly {@link Trace.QueryPlanNode.ParallelNode.verify|verify} messages.\n             * @function encode\n             * @memberof Trace.QueryPlanNode.ParallelNode\n             * @static\n             * @param {Trace.QueryPlanNode.IParallelNode} message ParallelNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ParallelNode.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.nodes != null && message.nodes.length)\n                    for (let i = 0; i < message.nodes.length; ++i)\n                        $root.Trace.QueryPlanNode.encode(message.nodes[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified ParallelNode message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.ParallelNode.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof Trace.QueryPlanNode.ParallelNode\n             * @static\n             * @param {Trace.QueryPlanNode.IParallelNode} message ParallelNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ParallelNode.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a ParallelNode message from the specified reader or buffer.\n             * @function decode\n             * @memberof Trace.QueryPlanNode.ParallelNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {Trace.QueryPlanNode.ParallelNode} ParallelNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ParallelNode.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode.ParallelNode();\n                while (reader.pos < end) {\n                    let tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        if (!(message.nodes && message.nodes.length))\n                            message.nodes = [];\n                        message.nodes.push($root.Trace.QueryPlanNode.decode(reader, reader.uint32()));\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a ParallelNode message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof Trace.QueryPlanNode.ParallelNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {Trace.QueryPlanNode.ParallelNode} ParallelNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ParallelNode.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a ParallelNode message.\n             * @function verify\n             * @memberof Trace.QueryPlanNode.ParallelNode\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            ParallelNode.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.nodes != null && message.hasOwnProperty(\"nodes\")) {\n                    if (!Array.isArray(message.nodes))\n                        return \"nodes: array expected\";\n                    for (let i = 0; i < message.nodes.length; ++i) {\n                        let error = $root.Trace.QueryPlanNode.verify(message.nodes[i]);\n                        if (error)\n                            return \"nodes.\" + error;\n                    }\n                }\n                return null;\n            };\n\n            /**\n             * Creates a plain object from a ParallelNode message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Trace.QueryPlanNode.ParallelNode\n             * @static\n             * @param {Trace.QueryPlanNode.ParallelNode} message ParallelNode\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            ParallelNode.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                let object = {};\n                if (options.arrays || options.defaults)\n                    object.nodes = [];\n                if (message.nodes && message.nodes.length) {\n                    object.nodes = [];\n                    for (let j = 0; j < message.nodes.length; ++j)\n                        object.nodes[j] = $root.Trace.QueryPlanNode.toObject(message.nodes[j], options);\n                }\n                return object;\n            };\n\n            /**\n             * Converts this ParallelNode to JSON.\n             * @function toJSON\n             * @memberof Trace.QueryPlanNode.ParallelNode\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            ParallelNode.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return ParallelNode;\n        })();\n\n        QueryPlanNode.FetchNode = (function() {\n\n            /**\n             * Properties of a FetchNode.\n             * @memberof Trace.QueryPlanNode\n             * @interface IFetchNode\n             * @property {string|null} [serviceName] FetchNode serviceName\n             * @property {boolean|null} [traceParsingFailed] FetchNode traceParsingFailed\n             * @property {ITrace|null} [trace] FetchNode trace\n             * @property {number|null} [sentTimeOffset] FetchNode sentTimeOffset\n             * @property {google.protobuf.ITimestamp|null} [sentTime] FetchNode sentTime\n             * @property {google.protobuf.ITimestamp|null} [receivedTime] FetchNode receivedTime\n             */\n\n            /**\n             * Constructs a new FetchNode.\n             * @memberof Trace.QueryPlanNode\n             * @classdesc Represents a FetchNode.\n             * @implements IFetchNode\n             * @constructor\n             * @param {Trace.QueryPlanNode.IFetchNode=} [properties] Properties to set\n             */\n            function FetchNode(properties) {\n                if (properties)\n                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * FetchNode serviceName.\n             * @member {string} serviceName\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @instance\n             */\n            FetchNode.prototype.serviceName = \"\";\n\n            /**\n             * FetchNode traceParsingFailed.\n             * @member {boolean} traceParsingFailed\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @instance\n             */\n            FetchNode.prototype.traceParsingFailed = false;\n\n            /**\n             * FetchNode trace.\n             * @member {ITrace|null|undefined} trace\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @instance\n             */\n            FetchNode.prototype.trace = null;\n\n            /**\n             * FetchNode sentTimeOffset.\n             * @member {number} sentTimeOffset\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @instance\n             */\n            FetchNode.prototype.sentTimeOffset = 0;\n\n            /**\n             * FetchNode sentTime.\n             * @member {google.protobuf.ITimestamp|null|undefined} sentTime\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @instance\n             */\n            FetchNode.prototype.sentTime = null;\n\n            /**\n             * FetchNode receivedTime.\n             * @member {google.protobuf.ITimestamp|null|undefined} receivedTime\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @instance\n             */\n            FetchNode.prototype.receivedTime = null;\n\n            /**\n             * Creates a new FetchNode instance using the specified properties.\n             * @function create\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @static\n             * @param {Trace.QueryPlanNode.IFetchNode=} [properties] Properties to set\n             * @returns {Trace.QueryPlanNode.FetchNode} FetchNode instance\n             */\n            FetchNode.create = function create(properties) {\n                return new FetchNode(properties);\n            };\n\n            /**\n             * Encodes the specified FetchNode message. Does not implicitly {@link Trace.QueryPlanNode.FetchNode.verify|verify} messages.\n             * @function encode\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @static\n             * @param {Trace.QueryPlanNode.IFetchNode} message FetchNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            FetchNode.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.serviceName != null && Object.hasOwnProperty.call(message, \"serviceName\"))\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.serviceName);\n                if (message.traceParsingFailed != null && Object.hasOwnProperty.call(message, \"traceParsingFailed\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.traceParsingFailed);\n                if (message.trace != null && Object.hasOwnProperty.call(message, \"trace\"))\n                    $root.Trace.encode(message.trace, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n                if (message.sentTimeOffset != null && Object.hasOwnProperty.call(message, \"sentTimeOffset\"))\n                    writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.sentTimeOffset);\n                if (message.sentTime != null && Object.hasOwnProperty.call(message, \"sentTime\"))\n                    $root.google.protobuf.Timestamp.encode(message.sentTime, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n                if (message.receivedTime != null && Object.hasOwnProperty.call(message, \"receivedTime\"))\n                    $root.google.protobuf.Timestamp.encode(message.receivedTime, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified FetchNode message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.FetchNode.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @static\n             * @param {Trace.QueryPlanNode.IFetchNode} message FetchNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            FetchNode.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a FetchNode message from the specified reader or buffer.\n             * @function decode\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {Trace.QueryPlanNode.FetchNode} FetchNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            FetchNode.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode.FetchNode();\n                while (reader.pos < end) {\n                    let tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.serviceName = reader.string();\n                        break;\n                    case 2:\n                        message.traceParsingFailed = reader.bool();\n                        break;\n                    case 3:\n                        message.trace = $root.Trace.decode(reader, reader.uint32());\n                        break;\n                    case 4:\n                        message.sentTimeOffset = reader.uint64();\n                        break;\n                    case 5:\n                        message.sentTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());\n                        break;\n                    case 6:\n                        message.receivedTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a FetchNode message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {Trace.QueryPlanNode.FetchNode} FetchNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            FetchNode.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a FetchNode message.\n             * @function verify\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            FetchNode.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.serviceName != null && message.hasOwnProperty(\"serviceName\"))\n                    if (!$util.isString(message.serviceName))\n                        return \"serviceName: string expected\";\n                if (message.traceParsingFailed != null && message.hasOwnProperty(\"traceParsingFailed\"))\n                    if (typeof message.traceParsingFailed !== \"boolean\")\n                        return \"traceParsingFailed: boolean expected\";\n                if (message.trace != null && message.hasOwnProperty(\"trace\")) {\n                    let error = $root.Trace.verify(message.trace);\n                    if (error)\n                        return \"trace.\" + error;\n                }\n                if (message.sentTimeOffset != null && message.hasOwnProperty(\"sentTimeOffset\"))\n                    if (!$util.isInteger(message.sentTimeOffset) && !(message.sentTimeOffset && $util.isInteger(message.sentTimeOffset.low) && $util.isInteger(message.sentTimeOffset.high)))\n                        return \"sentTimeOffset: integer|Long expected\";\n                if (message.sentTime != null && message.hasOwnProperty(\"sentTime\")) {\n                    let error = $root.google.protobuf.Timestamp.verify(message.sentTime);\n                    if (error)\n                        return \"sentTime.\" + error;\n                }\n                if (message.receivedTime != null && message.hasOwnProperty(\"receivedTime\")) {\n                    let error = $root.google.protobuf.Timestamp.verify(message.receivedTime);\n                    if (error)\n                        return \"receivedTime.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a plain object from a FetchNode message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @static\n             * @param {Trace.QueryPlanNode.FetchNode} message FetchNode\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            FetchNode.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                let object = {};\n                if (options.defaults) {\n                    object.serviceName = \"\";\n                    object.traceParsingFailed = false;\n                    object.trace = null;\n                    object.sentTimeOffset = 0;\n                    object.sentTime = null;\n                    object.receivedTime = null;\n                }\n                if (message.serviceName != null && message.hasOwnProperty(\"serviceName\"))\n                    object.serviceName = message.serviceName;\n                if (message.traceParsingFailed != null && message.hasOwnProperty(\"traceParsingFailed\"))\n                    object.traceParsingFailed = message.traceParsingFailed;\n                if (message.trace != null && message.hasOwnProperty(\"trace\"))\n                    object.trace = $root.Trace.toObject(message.trace, options);\n                if (message.sentTimeOffset != null && message.hasOwnProperty(\"sentTimeOffset\"))\n                    if (typeof message.sentTimeOffset === \"number\")\n                        object.sentTimeOffset = options.longs === String ? String(message.sentTimeOffset) : message.sentTimeOffset;\n                    else\n                        object.sentTimeOffset = options.longs === String ? $util.Long.prototype.toString.call(message.sentTimeOffset) : options.longs === Number ? new $util.LongBits(message.sentTimeOffset.low >>> 0, message.sentTimeOffset.high >>> 0).toNumber(true) : message.sentTimeOffset;\n                if (message.sentTime != null && message.hasOwnProperty(\"sentTime\"))\n                    object.sentTime = $root.google.protobuf.Timestamp.toObject(message.sentTime, options);\n                if (message.receivedTime != null && message.hasOwnProperty(\"receivedTime\"))\n                    object.receivedTime = $root.google.protobuf.Timestamp.toObject(message.receivedTime, options);\n                return object;\n            };\n\n            /**\n             * Converts this FetchNode to JSON.\n             * @function toJSON\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            FetchNode.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return FetchNode;\n        })();\n\n        QueryPlanNode.FlattenNode = (function() {\n\n            /**\n             * Properties of a FlattenNode.\n             * @memberof Trace.QueryPlanNode\n             * @interface IFlattenNode\n             * @property {Array.<Trace.QueryPlanNode.IResponsePathElement>|null} [responsePath] FlattenNode responsePath\n             * @property {Trace.IQueryPlanNode|null} [node] FlattenNode node\n             */\n\n            /**\n             * Constructs a new FlattenNode.\n             * @memberof Trace.QueryPlanNode\n             * @classdesc Represents a FlattenNode.\n             * @implements IFlattenNode\n             * @constructor\n             * @param {Trace.QueryPlanNode.IFlattenNode=} [properties] Properties to set\n             */\n            function FlattenNode(properties) {\n                this.responsePath = [];\n                if (properties)\n                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * FlattenNode responsePath.\n             * @member {Array.<Trace.QueryPlanNode.IResponsePathElement>} responsePath\n             * @memberof Trace.QueryPlanNode.FlattenNode\n             * @instance\n             */\n            FlattenNode.prototype.responsePath = $util.emptyArray;\n\n            /**\n             * FlattenNode node.\n             * @member {Trace.IQueryPlanNode|null|undefined} node\n             * @memberof Trace.QueryPlanNode.FlattenNode\n             * @instance\n             */\n            FlattenNode.prototype.node = null;\n\n            /**\n             * Creates a new FlattenNode instance using the specified properties.\n             * @function create\n             * @memberof Trace.QueryPlanNode.FlattenNode\n             * @static\n             * @param {Trace.QueryPlanNode.IFlattenNode=} [properties] Properties to set\n             * @returns {Trace.QueryPlanNode.FlattenNode} FlattenNode instance\n             */\n            FlattenNode.create = function create(properties) {\n                return new FlattenNode(properties);\n            };\n\n            /**\n             * Encodes the specified FlattenNode message. Does not implicitly {@link Trace.QueryPlanNode.FlattenNode.verify|verify} messages.\n             * @function encode\n             * @memberof Trace.QueryPlanNode.FlattenNode\n             * @static\n             * @param {Trace.QueryPlanNode.IFlattenNode} message FlattenNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            FlattenNode.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.responsePath != null && message.responsePath.length)\n                    for (let i = 0; i < message.responsePath.length; ++i)\n                        $root.Trace.QueryPlanNode.ResponsePathElement.encode(message.responsePath[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                if (message.node != null && Object.hasOwnProperty.call(message, \"node\"))\n                    $root.Trace.QueryPlanNode.encode(message.node, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified FlattenNode message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.FlattenNode.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof Trace.QueryPlanNode.FlattenNode\n             * @static\n             * @param {Trace.QueryPlanNode.IFlattenNode} message FlattenNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            FlattenNode.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a FlattenNode message from the specified reader or buffer.\n             * @function decode\n             * @memberof Trace.QueryPlanNode.FlattenNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {Trace.QueryPlanNode.FlattenNode} FlattenNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            FlattenNode.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode.FlattenNode();\n                while (reader.pos < end) {\n                    let tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        if (!(message.responsePath && message.responsePath.length))\n                            message.responsePath = [];\n                        message.responsePath.push($root.Trace.QueryPlanNode.ResponsePathElement.decode(reader, reader.uint32()));\n                        break;\n                    case 2:\n                        message.node = $root.Trace.QueryPlanNode.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a FlattenNode message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof Trace.QueryPlanNode.FlattenNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {Trace.QueryPlanNode.FlattenNode} FlattenNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            FlattenNode.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a FlattenNode message.\n             * @function verify\n             * @memberof Trace.QueryPlanNode.FlattenNode\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            FlattenNode.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.responsePath != null && message.hasOwnProperty(\"responsePath\")) {\n                    if (!Array.isArray(message.responsePath))\n                        return \"responsePath: array expected\";\n                    for (let i = 0; i < message.responsePath.length; ++i) {\n                        let error = $root.Trace.QueryPlanNode.ResponsePathElement.verify(message.responsePath[i]);\n                        if (error)\n                            return \"responsePath.\" + error;\n                    }\n                }\n                if (message.node != null && message.hasOwnProperty(\"node\")) {\n                    let error = $root.Trace.QueryPlanNode.verify(message.node);\n                    if (error)\n                        return \"node.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a plain object from a FlattenNode message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Trace.QueryPlanNode.FlattenNode\n             * @static\n             * @param {Trace.QueryPlanNode.FlattenNode} message FlattenNode\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            FlattenNode.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                let object = {};\n                if (options.arrays || options.defaults)\n                    object.responsePath = [];\n                if (options.defaults)\n                    object.node = null;\n                if (message.responsePath && message.responsePath.length) {\n                    object.responsePath = [];\n                    for (let j = 0; j < message.responsePath.length; ++j)\n                        object.responsePath[j] = $root.Trace.QueryPlanNode.ResponsePathElement.toObject(message.responsePath[j], options);\n                }\n                if (message.node != null && message.hasOwnProperty(\"node\"))\n                    object.node = $root.Trace.QueryPlanNode.toObject(message.node, options);\n                return object;\n            };\n\n            /**\n             * Converts this FlattenNode to JSON.\n             * @function toJSON\n             * @memberof Trace.QueryPlanNode.FlattenNode\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            FlattenNode.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return FlattenNode;\n        })();\n\n        QueryPlanNode.DeferNode = (function() {\n\n            /**\n             * Properties of a DeferNode.\n             * @memberof Trace.QueryPlanNode\n             * @interface IDeferNode\n             * @property {Trace.QueryPlanNode.IDeferNodePrimary|null} [primary] DeferNode primary\n             * @property {Array.<Trace.QueryPlanNode.IDeferredNode>|null} [deferred] DeferNode deferred\n             */\n\n            /**\n             * Constructs a new DeferNode.\n             * @memberof Trace.QueryPlanNode\n             * @classdesc Represents a DeferNode.\n             * @implements IDeferNode\n             * @constructor\n             * @param {Trace.QueryPlanNode.IDeferNode=} [properties] Properties to set\n             */\n            function DeferNode(properties) {\n                this.deferred = [];\n                if (properties)\n                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * DeferNode primary.\n             * @member {Trace.QueryPlanNode.IDeferNodePrimary|null|undefined} primary\n             * @memberof Trace.QueryPlanNode.DeferNode\n             * @instance\n             */\n            DeferNode.prototype.primary = null;\n\n            /**\n             * DeferNode deferred.\n             * @member {Array.<Trace.QueryPlanNode.IDeferredNode>} deferred\n             * @memberof Trace.QueryPlanNode.DeferNode\n             * @instance\n             */\n            DeferNode.prototype.deferred = $util.emptyArray;\n\n            /**\n             * Creates a new DeferNode instance using the specified properties.\n             * @function create\n             * @memberof Trace.QueryPlanNode.DeferNode\n             * @static\n             * @param {Trace.QueryPlanNode.IDeferNode=} [properties] Properties to set\n             * @returns {Trace.QueryPlanNode.DeferNode} DeferNode instance\n             */\n            DeferNode.create = function create(properties) {\n                return new DeferNode(properties);\n            };\n\n            /**\n             * Encodes the specified DeferNode message. Does not implicitly {@link Trace.QueryPlanNode.DeferNode.verify|verify} messages.\n             * @function encode\n             * @memberof Trace.QueryPlanNode.DeferNode\n             * @static\n             * @param {Trace.QueryPlanNode.IDeferNode} message DeferNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            DeferNode.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.primary != null && Object.hasOwnProperty.call(message, \"primary\"))\n                    $root.Trace.QueryPlanNode.DeferNodePrimary.encode(message.primary, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                if (message.deferred != null && message.deferred.length)\n                    for (let i = 0; i < message.deferred.length; ++i)\n                        $root.Trace.QueryPlanNode.DeferredNode.encode(message.deferred[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified DeferNode message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.DeferNode.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof Trace.QueryPlanNode.DeferNode\n             * @static\n             * @param {Trace.QueryPlanNode.IDeferNode} message DeferNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            DeferNode.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a DeferNode message from the specified reader or buffer.\n             * @function decode\n             * @memberof Trace.QueryPlanNode.DeferNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {Trace.QueryPlanNode.DeferNode} DeferNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            DeferNode.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode.DeferNode();\n                while (reader.pos < end) {\n                    let tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.primary = $root.Trace.QueryPlanNode.DeferNodePrimary.decode(reader, reader.uint32());\n                        break;\n                    case 2:\n                        if (!(message.deferred && message.deferred.length))\n                            message.deferred = [];\n                        message.deferred.push($root.Trace.QueryPlanNode.DeferredNode.decode(reader, reader.uint32()));\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a DeferNode message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof Trace.QueryPlanNode.DeferNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {Trace.QueryPlanNode.DeferNode} DeferNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            DeferNode.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a DeferNode message.\n             * @function verify\n             * @memberof Trace.QueryPlanNode.DeferNode\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            DeferNode.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.primary != null && message.hasOwnProperty(\"primary\")) {\n                    let error = $root.Trace.QueryPlanNode.DeferNodePrimary.verify(message.primary);\n                    if (error)\n                        return \"primary.\" + error;\n                }\n                if (message.deferred != null && message.hasOwnProperty(\"deferred\")) {\n                    if (!Array.isArray(message.deferred))\n                        return \"deferred: array expected\";\n                    for (let i = 0; i < message.deferred.length; ++i) {\n                        let error = $root.Trace.QueryPlanNode.DeferredNode.verify(message.deferred[i]);\n                        if (error)\n                            return \"deferred.\" + error;\n                    }\n                }\n                return null;\n            };\n\n            /**\n             * Creates a plain object from a DeferNode message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Trace.QueryPlanNode.DeferNode\n             * @static\n             * @param {Trace.QueryPlanNode.DeferNode} message DeferNode\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            DeferNode.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                let object = {};\n                if (options.arrays || options.defaults)\n                    object.deferred = [];\n                if (options.defaults)\n                    object.primary = null;\n                if (message.primary != null && message.hasOwnProperty(\"primary\"))\n                    object.primary = $root.Trace.QueryPlanNode.DeferNodePrimary.toObject(message.primary, options);\n                if (message.deferred && message.deferred.length) {\n                    object.deferred = [];\n                    for (let j = 0; j < message.deferred.length; ++j)\n                        object.deferred[j] = $root.Trace.QueryPlanNode.DeferredNode.toObject(message.deferred[j], options);\n                }\n                return object;\n            };\n\n            /**\n             * Converts this DeferNode to JSON.\n             * @function toJSON\n             * @memberof Trace.QueryPlanNode.DeferNode\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            DeferNode.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return DeferNode;\n        })();\n\n        QueryPlanNode.ConditionNode = (function() {\n\n            /**\n             * Properties of a ConditionNode.\n             * @memberof Trace.QueryPlanNode\n             * @interface IConditionNode\n             * @property {string|null} [condition] ConditionNode condition\n             * @property {Trace.IQueryPlanNode|null} [ifClause] ConditionNode ifClause\n             * @property {Trace.IQueryPlanNode|null} [elseClause] ConditionNode elseClause\n             */\n\n            /**\n             * Constructs a new ConditionNode.\n             * @memberof Trace.QueryPlanNode\n             * @classdesc Represents a ConditionNode.\n             * @implements IConditionNode\n             * @constructor\n             * @param {Trace.QueryPlanNode.IConditionNode=} [properties] Properties to set\n             */\n            function ConditionNode(properties) {\n                if (properties)\n                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * ConditionNode condition.\n             * @member {string} condition\n             * @memberof Trace.QueryPlanNode.ConditionNode\n             * @instance\n             */\n            ConditionNode.prototype.condition = \"\";\n\n            /**\n             * ConditionNode ifClause.\n             * @member {Trace.IQueryPlanNode|null|undefined} ifClause\n             * @memberof Trace.QueryPlanNode.ConditionNode\n             * @instance\n             */\n            ConditionNode.prototype.ifClause = null;\n\n            /**\n             * ConditionNode elseClause.\n             * @member {Trace.IQueryPlanNode|null|undefined} elseClause\n             * @memberof Trace.QueryPlanNode.ConditionNode\n             * @instance\n             */\n            ConditionNode.prototype.elseClause = null;\n\n            /**\n             * Creates a new ConditionNode instance using the specified properties.\n             * @function create\n             * @memberof Trace.QueryPlanNode.ConditionNode\n             * @static\n             * @param {Trace.QueryPlanNode.IConditionNode=} [properties] Properties to set\n             * @returns {Trace.QueryPlanNode.ConditionNode} ConditionNode instance\n             */\n            ConditionNode.create = function create(properties) {\n                return new ConditionNode(properties);\n            };\n\n            /**\n             * Encodes the specified ConditionNode message. Does not implicitly {@link Trace.QueryPlanNode.ConditionNode.verify|verify} messages.\n             * @function encode\n             * @memberof Trace.QueryPlanNode.ConditionNode\n             * @static\n             * @param {Trace.QueryPlanNode.IConditionNode} message ConditionNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ConditionNode.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.condition != null && Object.hasOwnProperty.call(message, \"condition\"))\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.condition);\n                if (message.ifClause != null && Object.hasOwnProperty.call(message, \"ifClause\"))\n                    $root.Trace.QueryPlanNode.encode(message.ifClause, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                if (message.elseClause != null && Object.hasOwnProperty.call(message, \"elseClause\"))\n                    $root.Trace.QueryPlanNode.encode(message.elseClause, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified ConditionNode message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.ConditionNode.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof Trace.QueryPlanNode.ConditionNode\n             * @static\n             * @param {Trace.QueryPlanNode.IConditionNode} message ConditionNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ConditionNode.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a ConditionNode message from the specified reader or buffer.\n             * @function decode\n             * @memberof Trace.QueryPlanNode.ConditionNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {Trace.QueryPlanNode.ConditionNode} ConditionNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ConditionNode.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode.ConditionNode();\n                while (reader.pos < end) {\n                    let tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.condition = reader.string();\n                        break;\n                    case 2:\n                        message.ifClause = $root.Trace.QueryPlanNode.decode(reader, reader.uint32());\n                        break;\n                    case 3:\n                        message.elseClause = $root.Trace.QueryPlanNode.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a ConditionNode message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof Trace.QueryPlanNode.ConditionNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {Trace.QueryPlanNode.ConditionNode} ConditionNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ConditionNode.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a ConditionNode message.\n             * @function verify\n             * @memberof Trace.QueryPlanNode.ConditionNode\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            ConditionNode.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.condition != null && message.hasOwnProperty(\"condition\"))\n                    if (!$util.isString(message.condition))\n                        return \"condition: string expected\";\n                if (message.ifClause != null && message.hasOwnProperty(\"ifClause\")) {\n                    let error = $root.Trace.QueryPlanNode.verify(message.ifClause);\n                    if (error)\n                        return \"ifClause.\" + error;\n                }\n                if (message.elseClause != null && message.hasOwnProperty(\"elseClause\")) {\n                    let error = $root.Trace.QueryPlanNode.verify(message.elseClause);\n                    if (error)\n                        return \"elseClause.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a plain object from a ConditionNode message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Trace.QueryPlanNode.ConditionNode\n             * @static\n             * @param {Trace.QueryPlanNode.ConditionNode} message ConditionNode\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            ConditionNode.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                let object = {};\n                if (options.defaults) {\n                    object.condition = \"\";\n                    object.ifClause = null;\n                    object.elseClause = null;\n                }\n                if (message.condition != null && message.hasOwnProperty(\"condition\"))\n                    object.condition = message.condition;\n                if (message.ifClause != null && message.hasOwnProperty(\"ifClause\"))\n                    object.ifClause = $root.Trace.QueryPlanNode.toObject(message.ifClause, options);\n                if (message.elseClause != null && message.hasOwnProperty(\"elseClause\"))\n                    object.elseClause = $root.Trace.QueryPlanNode.toObject(message.elseClause, options);\n                return object;\n            };\n\n            /**\n             * Converts this ConditionNode to JSON.\n             * @function toJSON\n             * @memberof Trace.QueryPlanNode.ConditionNode\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            ConditionNode.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return ConditionNode;\n        })();\n\n        QueryPlanNode.DeferNodePrimary = (function() {\n\n            /**\n             * Properties of a DeferNodePrimary.\n             * @memberof Trace.QueryPlanNode\n             * @interface IDeferNodePrimary\n             * @property {Trace.IQueryPlanNode|null} [node] DeferNodePrimary node\n             */\n\n            /**\n             * Constructs a new DeferNodePrimary.\n             * @memberof Trace.QueryPlanNode\n             * @classdesc Represents a DeferNodePrimary.\n             * @implements IDeferNodePrimary\n             * @constructor\n             * @param {Trace.QueryPlanNode.IDeferNodePrimary=} [properties] Properties to set\n             */\n            function DeferNodePrimary(properties) {\n                if (properties)\n                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * DeferNodePrimary node.\n             * @member {Trace.IQueryPlanNode|null|undefined} node\n             * @memberof Trace.QueryPlanNode.DeferNodePrimary\n             * @instance\n             */\n            DeferNodePrimary.prototype.node = null;\n\n            /**\n             * Creates a new DeferNodePrimary instance using the specified properties.\n             * @function create\n             * @memberof Trace.QueryPlanNode.DeferNodePrimary\n             * @static\n             * @param {Trace.QueryPlanNode.IDeferNodePrimary=} [properties] Properties to set\n             * @returns {Trace.QueryPlanNode.DeferNodePrimary} DeferNodePrimary instance\n             */\n            DeferNodePrimary.create = function create(properties) {\n                return new DeferNodePrimary(properties);\n            };\n\n            /**\n             * Encodes the specified DeferNodePrimary message. Does not implicitly {@link Trace.QueryPlanNode.DeferNodePrimary.verify|verify} messages.\n             * @function encode\n             * @memberof Trace.QueryPlanNode.DeferNodePrimary\n             * @static\n             * @param {Trace.QueryPlanNode.IDeferNodePrimary} message DeferNodePrimary message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            DeferNodePrimary.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.node != null && Object.hasOwnProperty.call(message, \"node\"))\n                    $root.Trace.QueryPlanNode.encode(message.node, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified DeferNodePrimary message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.DeferNodePrimary.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof Trace.QueryPlanNode.DeferNodePrimary\n             * @static\n             * @param {Trace.QueryPlanNode.IDeferNodePrimary} message DeferNodePrimary message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            DeferNodePrimary.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a DeferNodePrimary message from the specified reader or buffer.\n             * @function decode\n             * @memberof Trace.QueryPlanNode.DeferNodePrimary\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {Trace.QueryPlanNode.DeferNodePrimary} DeferNodePrimary\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            DeferNodePrimary.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode.DeferNodePrimary();\n                while (reader.pos < end) {\n                    let tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.node = $root.Trace.QueryPlanNode.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a DeferNodePrimary message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof Trace.QueryPlanNode.DeferNodePrimary\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {Trace.QueryPlanNode.DeferNodePrimary} DeferNodePrimary\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            DeferNodePrimary.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a DeferNodePrimary message.\n             * @function verify\n             * @memberof Trace.QueryPlanNode.DeferNodePrimary\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            DeferNodePrimary.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.node != null && message.hasOwnProperty(\"node\")) {\n                    let error = $root.Trace.QueryPlanNode.verify(message.node);\n                    if (error)\n                        return \"node.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a plain object from a DeferNodePrimary message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Trace.QueryPlanNode.DeferNodePrimary\n             * @static\n             * @param {Trace.QueryPlanNode.DeferNodePrimary} message DeferNodePrimary\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            DeferNodePrimary.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                let object = {};\n                if (options.defaults)\n                    object.node = null;\n                if (message.node != null && message.hasOwnProperty(\"node\"))\n                    object.node = $root.Trace.QueryPlanNode.toObject(message.node, options);\n                return object;\n            };\n\n            /**\n             * Converts this DeferNodePrimary to JSON.\n             * @function toJSON\n             * @memberof Trace.QueryPlanNode.DeferNodePrimary\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            DeferNodePrimary.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return DeferNodePrimary;\n        })();\n\n        QueryPlanNode.DeferredNode = (function() {\n\n            /**\n             * Properties of a DeferredNode.\n             * @memberof Trace.QueryPlanNode\n             * @interface IDeferredNode\n             * @property {Array.<Trace.QueryPlanNode.IDeferredNodeDepends>|null} [depends] DeferredNode depends\n             * @property {string|null} [label] DeferredNode label\n             * @property {Array.<Trace.QueryPlanNode.IResponsePathElement>|null} [path] DeferredNode path\n             * @property {Trace.IQueryPlanNode|null} [node] DeferredNode node\n             */\n\n            /**\n             * Constructs a new DeferredNode.\n             * @memberof Trace.QueryPlanNode\n             * @classdesc Represents a DeferredNode.\n             * @implements IDeferredNode\n             * @constructor\n             * @param {Trace.QueryPlanNode.IDeferredNode=} [properties] Properties to set\n             */\n            function DeferredNode(properties) {\n                this.depends = [];\n                this.path = [];\n                if (properties)\n                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * DeferredNode depends.\n             * @member {Array.<Trace.QueryPlanNode.IDeferredNodeDepends>} depends\n             * @memberof Trace.QueryPlanNode.DeferredNode\n             * @instance\n             */\n            DeferredNode.prototype.depends = $util.emptyArray;\n\n            /**\n             * DeferredNode label.\n             * @member {string} label\n             * @memberof Trace.QueryPlanNode.DeferredNode\n             * @instance\n             */\n            DeferredNode.prototype.label = \"\";\n\n            /**\n             * DeferredNode path.\n             * @member {Array.<Trace.QueryPlanNode.IResponsePathElement>} path\n             * @memberof Trace.QueryPlanNode.DeferredNode\n             * @instance\n             */\n            DeferredNode.prototype.path = $util.emptyArray;\n\n            /**\n             * DeferredNode node.\n             * @member {Trace.IQueryPlanNode|null|undefined} node\n             * @memberof Trace.QueryPlanNode.DeferredNode\n             * @instance\n             */\n            DeferredNode.prototype.node = null;\n\n            /**\n             * Creates a new DeferredNode instance using the specified properties.\n             * @function create\n             * @memberof Trace.QueryPlanNode.DeferredNode\n             * @static\n             * @param {Trace.QueryPlanNode.IDeferredNode=} [properties] Properties to set\n             * @returns {Trace.QueryPlanNode.DeferredNode} DeferredNode instance\n             */\n            DeferredNode.create = function create(properties) {\n                return new DeferredNode(properties);\n            };\n\n            /**\n             * Encodes the specified DeferredNode message. Does not implicitly {@link Trace.QueryPlanNode.DeferredNode.verify|verify} messages.\n             * @function encode\n             * @memberof Trace.QueryPlanNode.DeferredNode\n             * @static\n             * @param {Trace.QueryPlanNode.IDeferredNode} message DeferredNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            DeferredNode.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.depends != null && message.depends.length)\n                    for (let i = 0; i < message.depends.length; ++i)\n                        $root.Trace.QueryPlanNode.DeferredNodeDepends.encode(message.depends[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                if (message.label != null && Object.hasOwnProperty.call(message, \"label\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.label);\n                if (message.path != null && message.path.length)\n                    for (let i = 0; i < message.path.length; ++i)\n                        $root.Trace.QueryPlanNode.ResponsePathElement.encode(message.path[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n                if (message.node != null && Object.hasOwnProperty.call(message, \"node\"))\n                    $root.Trace.QueryPlanNode.encode(message.node, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified DeferredNode message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.DeferredNode.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof Trace.QueryPlanNode.DeferredNode\n             * @static\n             * @param {Trace.QueryPlanNode.IDeferredNode} message DeferredNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            DeferredNode.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a DeferredNode message from the specified reader or buffer.\n             * @function decode\n             * @memberof Trace.QueryPlanNode.DeferredNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {Trace.QueryPlanNode.DeferredNode} DeferredNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            DeferredNode.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode.DeferredNode();\n                while (reader.pos < end) {\n                    let tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        if (!(message.depends && message.depends.length))\n                            message.depends = [];\n                        message.depends.push($root.Trace.QueryPlanNode.DeferredNodeDepends.decode(reader, reader.uint32()));\n                        break;\n                    case 2:\n                        message.label = reader.string();\n                        break;\n                    case 3:\n                        if (!(message.path && message.path.length))\n                            message.path = [];\n                        message.path.push($root.Trace.QueryPlanNode.ResponsePathElement.decode(reader, reader.uint32()));\n                        break;\n                    case 4:\n                        message.node = $root.Trace.QueryPlanNode.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a DeferredNode message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof Trace.QueryPlanNode.DeferredNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {Trace.QueryPlanNode.DeferredNode} DeferredNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            DeferredNode.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a DeferredNode message.\n             * @function verify\n             * @memberof Trace.QueryPlanNode.DeferredNode\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            DeferredNode.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.depends != null && message.hasOwnProperty(\"depends\")) {\n                    if (!Array.isArray(message.depends))\n                        return \"depends: array expected\";\n                    for (let i = 0; i < message.depends.length; ++i) {\n                        let error = $root.Trace.QueryPlanNode.DeferredNodeDepends.verify(message.depends[i]);\n                        if (error)\n                            return \"depends.\" + error;\n                    }\n                }\n                if (message.label != null && message.hasOwnProperty(\"label\"))\n                    if (!$util.isString(message.label))\n                        return \"label: string expected\";\n                if (message.path != null && message.hasOwnProperty(\"path\")) {\n                    if (!Array.isArray(message.path))\n                        return \"path: array expected\";\n                    for (let i = 0; i < message.path.length; ++i) {\n                        let error = $root.Trace.QueryPlanNode.ResponsePathElement.verify(message.path[i]);\n                        if (error)\n                            return \"path.\" + error;\n                    }\n                }\n                if (message.node != null && message.hasOwnProperty(\"node\")) {\n                    let error = $root.Trace.QueryPlanNode.verify(message.node);\n                    if (error)\n                        return \"node.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a plain object from a DeferredNode message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Trace.QueryPlanNode.DeferredNode\n             * @static\n             * @param {Trace.QueryPlanNode.DeferredNode} message DeferredNode\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            DeferredNode.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                let object = {};\n                if (options.arrays || options.defaults) {\n                    object.depends = [];\n                    object.path = [];\n                }\n                if (options.defaults) {\n                    object.label = \"\";\n                    object.node = null;\n                }\n                if (message.depends && message.depends.length) {\n                    object.depends = [];\n                    for (let j = 0; j < message.depends.length; ++j)\n                        object.depends[j] = $root.Trace.QueryPlanNode.DeferredNodeDepends.toObject(message.depends[j], options);\n                }\n                if (message.label != null && message.hasOwnProperty(\"label\"))\n                    object.label = message.label;\n                if (message.path && message.path.length) {\n                    object.path = [];\n                    for (let j = 0; j < message.path.length; ++j)\n                        object.path[j] = $root.Trace.QueryPlanNode.ResponsePathElement.toObject(message.path[j], options);\n                }\n                if (message.node != null && message.hasOwnProperty(\"node\"))\n                    object.node = $root.Trace.QueryPlanNode.toObject(message.node, options);\n                return object;\n            };\n\n            /**\n             * Converts this DeferredNode to JSON.\n             * @function toJSON\n             * @memberof Trace.QueryPlanNode.DeferredNode\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            DeferredNode.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return DeferredNode;\n        })();\n\n        QueryPlanNode.DeferredNodeDepends = (function() {\n\n            /**\n             * Properties of a DeferredNodeDepends.\n             * @memberof Trace.QueryPlanNode\n             * @interface IDeferredNodeDepends\n             * @property {string|null} [id] DeferredNodeDepends id\n             * @property {string|null} [deferLabel] DeferredNodeDepends deferLabel\n             */\n\n            /**\n             * Constructs a new DeferredNodeDepends.\n             * @memberof Trace.QueryPlanNode\n             * @classdesc Represents a DeferredNodeDepends.\n             * @implements IDeferredNodeDepends\n             * @constructor\n             * @param {Trace.QueryPlanNode.IDeferredNodeDepends=} [properties] Properties to set\n             */\n            function DeferredNodeDepends(properties) {\n                if (properties)\n                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * DeferredNodeDepends id.\n             * @member {string} id\n             * @memberof Trace.QueryPlanNode.DeferredNodeDepends\n             * @instance\n             */\n            DeferredNodeDepends.prototype.id = \"\";\n\n            /**\n             * DeferredNodeDepends deferLabel.\n             * @member {string} deferLabel\n             * @memberof Trace.QueryPlanNode.DeferredNodeDepends\n             * @instance\n             */\n            DeferredNodeDepends.prototype.deferLabel = \"\";\n\n            /**\n             * Creates a new DeferredNodeDepends instance using the specified properties.\n             * @function create\n             * @memberof Trace.QueryPlanNode.DeferredNodeDepends\n             * @static\n             * @param {Trace.QueryPlanNode.IDeferredNodeDepends=} [properties] Properties to set\n             * @returns {Trace.QueryPlanNode.DeferredNodeDepends} DeferredNodeDepends instance\n             */\n            DeferredNodeDepends.create = function create(properties) {\n                return new DeferredNodeDepends(properties);\n            };\n\n            /**\n             * Encodes the specified DeferredNodeDepends message. Does not implicitly {@link Trace.QueryPlanNode.DeferredNodeDepends.verify|verify} messages.\n             * @function encode\n             * @memberof Trace.QueryPlanNode.DeferredNodeDepends\n             * @static\n             * @param {Trace.QueryPlanNode.IDeferredNodeDepends} message DeferredNodeDepends message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            DeferredNodeDepends.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.id != null && Object.hasOwnProperty.call(message, \"id\"))\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);\n                if (message.deferLabel != null && Object.hasOwnProperty.call(message, \"deferLabel\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.deferLabel);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified DeferredNodeDepends message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.DeferredNodeDepends.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof Trace.QueryPlanNode.DeferredNodeDepends\n             * @static\n             * @param {Trace.QueryPlanNode.IDeferredNodeDepends} message DeferredNodeDepends message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            DeferredNodeDepends.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a DeferredNodeDepends message from the specified reader or buffer.\n             * @function decode\n             * @memberof Trace.QueryPlanNode.DeferredNodeDepends\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {Trace.QueryPlanNode.DeferredNodeDepends} DeferredNodeDepends\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            DeferredNodeDepends.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode.DeferredNodeDepends();\n                while (reader.pos < end) {\n                    let tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.id = reader.string();\n                        break;\n                    case 2:\n                        message.deferLabel = reader.string();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a DeferredNodeDepends message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof Trace.QueryPlanNode.DeferredNodeDepends\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {Trace.QueryPlanNode.DeferredNodeDepends} DeferredNodeDepends\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            DeferredNodeDepends.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a DeferredNodeDepends message.\n             * @function verify\n             * @memberof Trace.QueryPlanNode.DeferredNodeDepends\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            DeferredNodeDepends.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.id != null && message.hasOwnProperty(\"id\"))\n                    if (!$util.isString(message.id))\n                        return \"id: string expected\";\n                if (message.deferLabel != null && message.hasOwnProperty(\"deferLabel\"))\n                    if (!$util.isString(message.deferLabel))\n                        return \"deferLabel: string expected\";\n                return null;\n            };\n\n            /**\n             * Creates a plain object from a DeferredNodeDepends message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Trace.QueryPlanNode.DeferredNodeDepends\n             * @static\n             * @param {Trace.QueryPlanNode.DeferredNodeDepends} message DeferredNodeDepends\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            DeferredNodeDepends.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                let object = {};\n                if (options.defaults) {\n                    object.id = \"\";\n                    object.deferLabel = \"\";\n                }\n                if (message.id != null && message.hasOwnProperty(\"id\"))\n                    object.id = message.id;\n                if (message.deferLabel != null && message.hasOwnProperty(\"deferLabel\"))\n                    object.deferLabel = message.deferLabel;\n                return object;\n            };\n\n            /**\n             * Converts this DeferredNodeDepends to JSON.\n             * @function toJSON\n             * @memberof Trace.QueryPlanNode.DeferredNodeDepends\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            DeferredNodeDepends.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return DeferredNodeDepends;\n        })();\n\n        QueryPlanNode.ResponsePathElement = (function() {\n\n            /**\n             * Properties of a ResponsePathElement.\n             * @memberof Trace.QueryPlanNode\n             * @interface IResponsePathElement\n             * @property {string|null} [fieldName] ResponsePathElement fieldName\n             * @property {number|null} [index] ResponsePathElement index\n             */\n\n            /**\n             * Constructs a new ResponsePathElement.\n             * @memberof Trace.QueryPlanNode\n             * @classdesc Represents a ResponsePathElement.\n             * @implements IResponsePathElement\n             * @constructor\n             * @param {Trace.QueryPlanNode.IResponsePathElement=} [properties] Properties to set\n             */\n            function ResponsePathElement(properties) {\n                if (properties)\n                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * ResponsePathElement fieldName.\n             * @member {string} fieldName\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @instance\n             */\n            ResponsePathElement.prototype.fieldName = \"\";\n\n            /**\n             * ResponsePathElement index.\n             * @member {number} index\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @instance\n             */\n            ResponsePathElement.prototype.index = 0;\n\n            // OneOf field names bound to virtual getters and setters\n            let $oneOfFields;\n\n            /**\n             * ResponsePathElement id.\n             * @member {\"fieldName\"|\"index\"|undefined} id\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @instance\n             */\n            Object.defineProperty(ResponsePathElement.prototype, \"id\", {\n                get: $util.oneOfGetter($oneOfFields = [\"fieldName\", \"index\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Creates a new ResponsePathElement instance using the specified properties.\n             * @function create\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @static\n             * @param {Trace.QueryPlanNode.IResponsePathElement=} [properties] Properties to set\n             * @returns {Trace.QueryPlanNode.ResponsePathElement} ResponsePathElement instance\n             */\n            ResponsePathElement.create = function create(properties) {\n                return new ResponsePathElement(properties);\n            };\n\n            /**\n             * Encodes the specified ResponsePathElement message. Does not implicitly {@link Trace.QueryPlanNode.ResponsePathElement.verify|verify} messages.\n             * @function encode\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @static\n             * @param {Trace.QueryPlanNode.IResponsePathElement} message ResponsePathElement message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ResponsePathElement.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.fieldName != null && Object.hasOwnProperty.call(message, \"fieldName\"))\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.fieldName);\n                if (message.index != null && Object.hasOwnProperty.call(message, \"index\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.index);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified ResponsePathElement message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.ResponsePathElement.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @static\n             * @param {Trace.QueryPlanNode.IResponsePathElement} message ResponsePathElement message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ResponsePathElement.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a ResponsePathElement message from the specified reader or buffer.\n             * @function decode\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {Trace.QueryPlanNode.ResponsePathElement} ResponsePathElement\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ResponsePathElement.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode.ResponsePathElement();\n                while (reader.pos < end) {\n                    let tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.fieldName = reader.string();\n                        break;\n                    case 2:\n                        message.index = reader.uint32();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a ResponsePathElement message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {Trace.QueryPlanNode.ResponsePathElement} ResponsePathElement\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ResponsePathElement.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a ResponsePathElement message.\n             * @function verify\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            ResponsePathElement.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                let properties = {};\n                if (message.fieldName != null && message.hasOwnProperty(\"fieldName\")) {\n                    properties.id = 1;\n                    if (!$util.isString(message.fieldName))\n                        return \"fieldName: string expected\";\n                }\n                if (message.index != null && message.hasOwnProperty(\"index\")) {\n                    if (properties.id === 1)\n                        return \"id: multiple values\";\n                    properties.id = 1;\n                    if (!$util.isInteger(message.index))\n                        return \"index: integer expected\";\n                }\n                return null;\n            };\n\n            /**\n             * Creates a plain object from a ResponsePathElement message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @static\n             * @param {Trace.QueryPlanNode.ResponsePathElement} message ResponsePathElement\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            ResponsePathElement.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                let object = {};\n                if (message.fieldName != null && message.hasOwnProperty(\"fieldName\")) {\n                    object.fieldName = message.fieldName;\n                    if (options.oneofs)\n                        object.id = \"fieldName\";\n                }\n                if (message.index != null && message.hasOwnProperty(\"index\")) {\n                    object.index = message.index;\n                    if (options.oneofs)\n                        object.id = \"index\";\n                }\n                return object;\n            };\n\n            /**\n             * Converts this ResponsePathElement to JSON.\n             * @function toJSON\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            ResponsePathElement.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return ResponsePathElement;\n        })();\n\n        return QueryPlanNode;\n    })();\n\n    return Trace;\n})();\n\nexport const ReportHeader = $root.ReportHeader = (() => {\n\n    /**\n     * Properties of a ReportHeader.\n     * @exports IReportHeader\n     * @interface IReportHeader\n     * @property {string|null} [graphRef] ReportHeader graphRef\n     * @property {string|null} [hostname] ReportHeader hostname\n     * @property {string|null} [agentVersion] ReportHeader agentVersion\n     * @property {string|null} [serviceVersion] ReportHeader serviceVersion\n     * @property {string|null} [runtimeVersion] ReportHeader runtimeVersion\n     * @property {string|null} [uname] ReportHeader uname\n     * @property {string|null} [executableSchemaId] ReportHeader executableSchemaId\n     */\n\n    /**\n     * Constructs a new ReportHeader.\n     * @exports ReportHeader\n     * @classdesc Represents a ReportHeader.\n     * @implements IReportHeader\n     * @constructor\n     * @param {IReportHeader=} [properties] Properties to set\n     */\n    function ReportHeader(properties) {\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ReportHeader graphRef.\n     * @member {string} graphRef\n     * @memberof ReportHeader\n     * @instance\n     */\n    ReportHeader.prototype.graphRef = \"\";\n\n    /**\n     * ReportHeader hostname.\n     * @member {string} hostname\n     * @memberof ReportHeader\n     * @instance\n     */\n    ReportHeader.prototype.hostname = \"\";\n\n    /**\n     * ReportHeader agentVersion.\n     * @member {string} agentVersion\n     * @memberof ReportHeader\n     * @instance\n     */\n    ReportHeader.prototype.agentVersion = \"\";\n\n    /**\n     * ReportHeader serviceVersion.\n     * @member {string} serviceVersion\n     * @memberof ReportHeader\n     * @instance\n     */\n    ReportHeader.prototype.serviceVersion = \"\";\n\n    /**\n     * ReportHeader runtimeVersion.\n     * @member {string} runtimeVersion\n     * @memberof ReportHeader\n     * @instance\n     */\n    ReportHeader.prototype.runtimeVersion = \"\";\n\n    /**\n     * ReportHeader uname.\n     * @member {string} uname\n     * @memberof ReportHeader\n     * @instance\n     */\n    ReportHeader.prototype.uname = \"\";\n\n    /**\n     * ReportHeader executableSchemaId.\n     * @member {string} executableSchemaId\n     * @memberof ReportHeader\n     * @instance\n     */\n    ReportHeader.prototype.executableSchemaId = \"\";\n\n    /**\n     * Creates a new ReportHeader instance using the specified properties.\n     * @function create\n     * @memberof ReportHeader\n     * @static\n     * @param {IReportHeader=} [properties] Properties to set\n     * @returns {ReportHeader} ReportHeader instance\n     */\n    ReportHeader.create = function create(properties) {\n        return new ReportHeader(properties);\n    };\n\n    /**\n     * Encodes the specified ReportHeader message. Does not implicitly {@link ReportHeader.verify|verify} messages.\n     * @function encode\n     * @memberof ReportHeader\n     * @static\n     * @param {IReportHeader} message ReportHeader message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ReportHeader.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.hostname != null && Object.hasOwnProperty.call(message, \"hostname\"))\n            writer.uint32(/* id 5, wireType 2 =*/42).string(message.hostname);\n        if (message.agentVersion != null && Object.hasOwnProperty.call(message, \"agentVersion\"))\n            writer.uint32(/* id 6, wireType 2 =*/50).string(message.agentVersion);\n        if (message.serviceVersion != null && Object.hasOwnProperty.call(message, \"serviceVersion\"))\n            writer.uint32(/* id 7, wireType 2 =*/58).string(message.serviceVersion);\n        if (message.runtimeVersion != null && Object.hasOwnProperty.call(message, \"runtimeVersion\"))\n            writer.uint32(/* id 8, wireType 2 =*/66).string(message.runtimeVersion);\n        if (message.uname != null && Object.hasOwnProperty.call(message, \"uname\"))\n            writer.uint32(/* id 9, wireType 2 =*/74).string(message.uname);\n        if (message.executableSchemaId != null && Object.hasOwnProperty.call(message, \"executableSchemaId\"))\n            writer.uint32(/* id 11, wireType 2 =*/90).string(message.executableSchemaId);\n        if (message.graphRef != null && Object.hasOwnProperty.call(message, \"graphRef\"))\n            writer.uint32(/* id 12, wireType 2 =*/98).string(message.graphRef);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ReportHeader message, length delimited. Does not implicitly {@link ReportHeader.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ReportHeader\n     * @static\n     * @param {IReportHeader} message ReportHeader message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ReportHeader.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ReportHeader message from the specified reader or buffer.\n     * @function decode\n     * @memberof ReportHeader\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ReportHeader} ReportHeader\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ReportHeader.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ReportHeader();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 12:\n                message.graphRef = reader.string();\n                break;\n            case 5:\n                message.hostname = reader.string();\n                break;\n            case 6:\n                message.agentVersion = reader.string();\n                break;\n            case 7:\n                message.serviceVersion = reader.string();\n                break;\n            case 8:\n                message.runtimeVersion = reader.string();\n                break;\n            case 9:\n                message.uname = reader.string();\n                break;\n            case 11:\n                message.executableSchemaId = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ReportHeader message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ReportHeader\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ReportHeader} ReportHeader\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ReportHeader.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ReportHeader message.\n     * @function verify\n     * @memberof ReportHeader\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ReportHeader.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.graphRef != null && message.hasOwnProperty(\"graphRef\"))\n            if (!$util.isString(message.graphRef))\n                return \"graphRef: string expected\";\n        if (message.hostname != null && message.hasOwnProperty(\"hostname\"))\n            if (!$util.isString(message.hostname))\n                return \"hostname: string expected\";\n        if (message.agentVersion != null && message.hasOwnProperty(\"agentVersion\"))\n            if (!$util.isString(message.agentVersion))\n                return \"agentVersion: string expected\";\n        if (message.serviceVersion != null && message.hasOwnProperty(\"serviceVersion\"))\n            if (!$util.isString(message.serviceVersion))\n                return \"serviceVersion: string expected\";\n        if (message.runtimeVersion != null && message.hasOwnProperty(\"runtimeVersion\"))\n            if (!$util.isString(message.runtimeVersion))\n                return \"runtimeVersion: string expected\";\n        if (message.uname != null && message.hasOwnProperty(\"uname\"))\n            if (!$util.isString(message.uname))\n                return \"uname: string expected\";\n        if (message.executableSchemaId != null && message.hasOwnProperty(\"executableSchemaId\"))\n            if (!$util.isString(message.executableSchemaId))\n                return \"executableSchemaId: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a plain object from a ReportHeader message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ReportHeader\n     * @static\n     * @param {ReportHeader} message ReportHeader\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ReportHeader.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        let object = {};\n        if (options.defaults) {\n            object.hostname = \"\";\n            object.agentVersion = \"\";\n            object.serviceVersion = \"\";\n            object.runtimeVersion = \"\";\n            object.uname = \"\";\n            object.executableSchemaId = \"\";\n            object.graphRef = \"\";\n        }\n        if (message.hostname != null && message.hasOwnProperty(\"hostname\"))\n            object.hostname = message.hostname;\n        if (message.agentVersion != null && message.hasOwnProperty(\"agentVersion\"))\n            object.agentVersion = message.agentVersion;\n        if (message.serviceVersion != null && message.hasOwnProperty(\"serviceVersion\"))\n            object.serviceVersion = message.serviceVersion;\n        if (message.runtimeVersion != null && message.hasOwnProperty(\"runtimeVersion\"))\n            object.runtimeVersion = message.runtimeVersion;\n        if (message.uname != null && message.hasOwnProperty(\"uname\"))\n            object.uname = message.uname;\n        if (message.executableSchemaId != null && message.hasOwnProperty(\"executableSchemaId\"))\n            object.executableSchemaId = message.executableSchemaId;\n        if (message.graphRef != null && message.hasOwnProperty(\"graphRef\"))\n            object.graphRef = message.graphRef;\n        return object;\n    };\n\n    /**\n     * Converts this ReportHeader to JSON.\n     * @function toJSON\n     * @memberof ReportHeader\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ReportHeader.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ReportHeader;\n})();\n\nexport const PathErrorStats = $root.PathErrorStats = (() => {\n\n    /**\n     * Properties of a PathErrorStats.\n     * @exports IPathErrorStats\n     * @interface IPathErrorStats\n     * @property {Object.<string,IPathErrorStats>|null} [children] PathErrorStats children\n     * @property {number|null} [errorsCount] PathErrorStats errorsCount\n     * @property {number|null} [requestsWithErrorsCount] PathErrorStats requestsWithErrorsCount\n     */\n\n    /**\n     * Constructs a new PathErrorStats.\n     * @exports PathErrorStats\n     * @classdesc Represents a PathErrorStats.\n     * @implements IPathErrorStats\n     * @constructor\n     * @param {IPathErrorStats=} [properties] Properties to set\n     */\n    function PathErrorStats(properties) {\n        this.children = {};\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * PathErrorStats children.\n     * @member {Object.<string,IPathErrorStats>} children\n     * @memberof PathErrorStats\n     * @instance\n     */\n    PathErrorStats.prototype.children = $util.emptyObject;\n\n    /**\n     * PathErrorStats errorsCount.\n     * @member {number} errorsCount\n     * @memberof PathErrorStats\n     * @instance\n     */\n    PathErrorStats.prototype.errorsCount = 0;\n\n    /**\n     * PathErrorStats requestsWithErrorsCount.\n     * @member {number} requestsWithErrorsCount\n     * @memberof PathErrorStats\n     * @instance\n     */\n    PathErrorStats.prototype.requestsWithErrorsCount = 0;\n\n    /**\n     * Creates a new PathErrorStats instance using the specified properties.\n     * @function create\n     * @memberof PathErrorStats\n     * @static\n     * @param {IPathErrorStats=} [properties] Properties to set\n     * @returns {PathErrorStats} PathErrorStats instance\n     */\n    PathErrorStats.create = function create(properties) {\n        return new PathErrorStats(properties);\n    };\n\n    /**\n     * Encodes the specified PathErrorStats message. Does not implicitly {@link PathErrorStats.verify|verify} messages.\n     * @function encode\n     * @memberof PathErrorStats\n     * @static\n     * @param {IPathErrorStats} message PathErrorStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    PathErrorStats.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.children != null && Object.hasOwnProperty.call(message, \"children\"))\n            for (let keys = Object.keys(message.children), i = 0; i < keys.length; ++i) {\n                writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);\n                $root.PathErrorStats.encode(message.children[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n            }\n        if (message.errorsCount != null && Object.hasOwnProperty.call(message, \"errorsCount\"))\n            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.errorsCount);\n        if (message.requestsWithErrorsCount != null && Object.hasOwnProperty.call(message, \"requestsWithErrorsCount\"))\n            writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.requestsWithErrorsCount);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified PathErrorStats message, length delimited. Does not implicitly {@link PathErrorStats.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof PathErrorStats\n     * @static\n     * @param {IPathErrorStats} message PathErrorStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    PathErrorStats.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a PathErrorStats message from the specified reader or buffer.\n     * @function decode\n     * @memberof PathErrorStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {PathErrorStats} PathErrorStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    PathErrorStats.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.PathErrorStats(), key;\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                reader.skip().pos++;\n                if (message.children === $util.emptyObject)\n                    message.children = {};\n                key = reader.string();\n                reader.pos++;\n                message.children[key] = $root.PathErrorStats.decode(reader, reader.uint32());\n                break;\n            case 4:\n                message.errorsCount = reader.uint64();\n                break;\n            case 5:\n                message.requestsWithErrorsCount = reader.uint64();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a PathErrorStats message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof PathErrorStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {PathErrorStats} PathErrorStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    PathErrorStats.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a PathErrorStats message.\n     * @function verify\n     * @memberof PathErrorStats\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    PathErrorStats.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.children != null && message.hasOwnProperty(\"children\")) {\n            if (!$util.isObject(message.children))\n                return \"children: object expected\";\n            let key = Object.keys(message.children);\n            for (let i = 0; i < key.length; ++i) {\n                let error = $root.PathErrorStats.verify(message.children[key[i]]);\n                if (error)\n                    return \"children.\" + error;\n            }\n        }\n        if (message.errorsCount != null && message.hasOwnProperty(\"errorsCount\"))\n            if (!$util.isInteger(message.errorsCount) && !(message.errorsCount && $util.isInteger(message.errorsCount.low) && $util.isInteger(message.errorsCount.high)))\n                return \"errorsCount: integer|Long expected\";\n        if (message.requestsWithErrorsCount != null && message.hasOwnProperty(\"requestsWithErrorsCount\"))\n            if (!$util.isInteger(message.requestsWithErrorsCount) && !(message.requestsWithErrorsCount && $util.isInteger(message.requestsWithErrorsCount.low) && $util.isInteger(message.requestsWithErrorsCount.high)))\n                return \"requestsWithErrorsCount: integer|Long expected\";\n        return null;\n    };\n\n    /**\n     * Creates a plain object from a PathErrorStats message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof PathErrorStats\n     * @static\n     * @param {PathErrorStats} message PathErrorStats\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    PathErrorStats.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        let object = {};\n        if (options.objects || options.defaults)\n            object.children = {};\n        if (options.defaults) {\n            object.errorsCount = 0;\n            object.requestsWithErrorsCount = 0;\n        }\n        let keys2;\n        if (message.children && (keys2 = Object.keys(message.children)).length) {\n            object.children = {};\n            for (let j = 0; j < keys2.length; ++j)\n                object.children[keys2[j]] = $root.PathErrorStats.toObject(message.children[keys2[j]], options);\n        }\n        if (message.errorsCount != null && message.hasOwnProperty(\"errorsCount\"))\n            if (typeof message.errorsCount === \"number\")\n                object.errorsCount = options.longs === String ? String(message.errorsCount) : message.errorsCount;\n            else\n                object.errorsCount = options.longs === String ? $util.Long.prototype.toString.call(message.errorsCount) : options.longs === Number ? new $util.LongBits(message.errorsCount.low >>> 0, message.errorsCount.high >>> 0).toNumber(true) : message.errorsCount;\n        if (message.requestsWithErrorsCount != null && message.hasOwnProperty(\"requestsWithErrorsCount\"))\n            if (typeof message.requestsWithErrorsCount === \"number\")\n                object.requestsWithErrorsCount = options.longs === String ? String(message.requestsWithErrorsCount) : message.requestsWithErrorsCount;\n            else\n                object.requestsWithErrorsCount = options.longs === String ? $util.Long.prototype.toString.call(message.requestsWithErrorsCount) : options.longs === Number ? new $util.LongBits(message.requestsWithErrorsCount.low >>> 0, message.requestsWithErrorsCount.high >>> 0).toNumber(true) : message.requestsWithErrorsCount;\n        return object;\n    };\n\n    /**\n     * Converts this PathErrorStats to JSON.\n     * @function toJSON\n     * @memberof PathErrorStats\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    PathErrorStats.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return PathErrorStats;\n})();\n\nexport const QueryLatencyStats = $root.QueryLatencyStats = (() => {\n\n    /**\n     * Properties of a QueryLatencyStats.\n     * @exports IQueryLatencyStats\n     * @interface IQueryLatencyStats\n     * @property {$protobuf.ToArray.<number>|Array.<number>|null} [latencyCount] QueryLatencyStats latencyCount\n     * @property {number|null} [requestCount] QueryLatencyStats requestCount\n     * @property {number|null} [cacheHits] QueryLatencyStats cacheHits\n     * @property {number|null} [persistedQueryHits] QueryLatencyStats persistedQueryHits\n     * @property {number|null} [persistedQueryMisses] QueryLatencyStats persistedQueryMisses\n     * @property {$protobuf.ToArray.<number>|Array.<number>|null} [cacheLatencyCount] QueryLatencyStats cacheLatencyCount\n     * @property {IPathErrorStats|null} [rootErrorStats] QueryLatencyStats rootErrorStats\n     * @property {number|null} [requestsWithErrorsCount] QueryLatencyStats requestsWithErrorsCount\n     * @property {$protobuf.ToArray.<number>|Array.<number>|null} [publicCacheTtlCount] QueryLatencyStats publicCacheTtlCount\n     * @property {$protobuf.ToArray.<number>|Array.<number>|null} [privateCacheTtlCount] QueryLatencyStats privateCacheTtlCount\n     * @property {number|null} [registeredOperationCount] QueryLatencyStats registeredOperationCount\n     * @property {number|null} [forbiddenOperationCount] QueryLatencyStats forbiddenOperationCount\n     * @property {number|null} [requestsWithoutFieldInstrumentation] QueryLatencyStats requestsWithoutFieldInstrumentation\n     */\n\n    /**\n     * Constructs a new QueryLatencyStats.\n     * @exports QueryLatencyStats\n     * @classdesc Represents a QueryLatencyStats.\n     * @implements IQueryLatencyStats\n     * @constructor\n     * @param {IQueryLatencyStats=} [properties] Properties to set\n     */\n    function QueryLatencyStats(properties) {\n        this.latencyCount = [];\n        this.cacheLatencyCount = [];\n        this.publicCacheTtlCount = [];\n        this.privateCacheTtlCount = [];\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * QueryLatencyStats latencyCount.\n     * @member {Array.<number>} latencyCount\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.latencyCount = $util.emptyArray;\n\n    /**\n     * QueryLatencyStats requestCount.\n     * @member {number} requestCount\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.requestCount = 0;\n\n    /**\n     * QueryLatencyStats cacheHits.\n     * @member {number} cacheHits\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.cacheHits = 0;\n\n    /**\n     * QueryLatencyStats persistedQueryHits.\n     * @member {number} persistedQueryHits\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.persistedQueryHits = 0;\n\n    /**\n     * QueryLatencyStats persistedQueryMisses.\n     * @member {number} persistedQueryMisses\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.persistedQueryMisses = 0;\n\n    /**\n     * QueryLatencyStats cacheLatencyCount.\n     * @member {Array.<number>} cacheLatencyCount\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.cacheLatencyCount = $util.emptyArray;\n\n    /**\n     * QueryLatencyStats rootErrorStats.\n     * @member {IPathErrorStats|null|undefined} rootErrorStats\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.rootErrorStats = null;\n\n    /**\n     * QueryLatencyStats requestsWithErrorsCount.\n     * @member {number} requestsWithErrorsCount\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.requestsWithErrorsCount = 0;\n\n    /**\n     * QueryLatencyStats publicCacheTtlCount.\n     * @member {Array.<number>} publicCacheTtlCount\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.publicCacheTtlCount = $util.emptyArray;\n\n    /**\n     * QueryLatencyStats privateCacheTtlCount.\n     * @member {Array.<number>} privateCacheTtlCount\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.privateCacheTtlCount = $util.emptyArray;\n\n    /**\n     * QueryLatencyStats registeredOperationCount.\n     * @member {number} registeredOperationCount\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.registeredOperationCount = 0;\n\n    /**\n     * QueryLatencyStats forbiddenOperationCount.\n     * @member {number} forbiddenOperationCount\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.forbiddenOperationCount = 0;\n\n    /**\n     * QueryLatencyStats requestsWithoutFieldInstrumentation.\n     * @member {number} requestsWithoutFieldInstrumentation\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.requestsWithoutFieldInstrumentation = 0;\n\n    /**\n     * Creates a new QueryLatencyStats instance using the specified properties.\n     * @function create\n     * @memberof QueryLatencyStats\n     * @static\n     * @param {IQueryLatencyStats=} [properties] Properties to set\n     * @returns {QueryLatencyStats} QueryLatencyStats instance\n     */\n    QueryLatencyStats.create = function create(properties) {\n        return new QueryLatencyStats(properties);\n    };\n\n    /**\n     * Encodes the specified QueryLatencyStats message. Does not implicitly {@link QueryLatencyStats.verify|verify} messages.\n     * @function encode\n     * @memberof QueryLatencyStats\n     * @static\n     * @param {IQueryLatencyStats} message QueryLatencyStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    QueryLatencyStats.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.requestCount != null && Object.hasOwnProperty.call(message, \"requestCount\"))\n            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.requestCount);\n        if (message.cacheHits != null && Object.hasOwnProperty.call(message, \"cacheHits\"))\n            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.cacheHits);\n        if (message.persistedQueryHits != null && Object.hasOwnProperty.call(message, \"persistedQueryHits\"))\n            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.persistedQueryHits);\n        if (message.persistedQueryMisses != null && Object.hasOwnProperty.call(message, \"persistedQueryMisses\"))\n            writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.persistedQueryMisses);\n        if (message.rootErrorStats != null && Object.hasOwnProperty.call(message, \"rootErrorStats\"))\n            $root.PathErrorStats.encode(message.rootErrorStats, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n        if (message.requestsWithErrorsCount != null && Object.hasOwnProperty.call(message, \"requestsWithErrorsCount\"))\n            writer.uint32(/* id 8, wireType 0 =*/64).uint64(message.requestsWithErrorsCount);\n        if (message.registeredOperationCount != null && Object.hasOwnProperty.call(message, \"registeredOperationCount\"))\n            writer.uint32(/* id 11, wireType 0 =*/88).uint64(message.registeredOperationCount);\n        if (message.forbiddenOperationCount != null && Object.hasOwnProperty.call(message, \"forbiddenOperationCount\"))\n            writer.uint32(/* id 12, wireType 0 =*/96).uint64(message.forbiddenOperationCount);\n        let array13;\n        if (message.latencyCount != null && message.latencyCount.toArray)\n            array13 = message.latencyCount.toArray();\n        else\n            array13 = message.latencyCount;\n        if (array13 != null && array13.length) {\n            writer.uint32(/* id 13, wireType 2 =*/106).fork();\n            for (let i = 0; i < array13.length; ++i)\n                writer.sint64(array13[i]);\n            writer.ldelim();\n        }\n        let array14;\n        if (message.cacheLatencyCount != null && message.cacheLatencyCount.toArray)\n            array14 = message.cacheLatencyCount.toArray();\n        else\n            array14 = message.cacheLatencyCount;\n        if (array14 != null && array14.length) {\n            writer.uint32(/* id 14, wireType 2 =*/114).fork();\n            for (let i = 0; i < array14.length; ++i)\n                writer.sint64(array14[i]);\n            writer.ldelim();\n        }\n        let array15;\n        if (message.publicCacheTtlCount != null && message.publicCacheTtlCount.toArray)\n            array15 = message.publicCacheTtlCount.toArray();\n        else\n            array15 = message.publicCacheTtlCount;\n        if (array15 != null && array15.length) {\n            writer.uint32(/* id 15, wireType 2 =*/122).fork();\n            for (let i = 0; i < array15.length; ++i)\n                writer.sint64(array15[i]);\n            writer.ldelim();\n        }\n        let array16;\n        if (message.privateCacheTtlCount != null && message.privateCacheTtlCount.toArray)\n            array16 = message.privateCacheTtlCount.toArray();\n        else\n            array16 = message.privateCacheTtlCount;\n        if (array16 != null && array16.length) {\n            writer.uint32(/* id 16, wireType 2 =*/130).fork();\n            for (let i = 0; i < array16.length; ++i)\n                writer.sint64(array16[i]);\n            writer.ldelim();\n        }\n        if (message.requestsWithoutFieldInstrumentation != null && Object.hasOwnProperty.call(message, \"requestsWithoutFieldInstrumentation\"))\n            writer.uint32(/* id 17, wireType 0 =*/136).uint64(message.requestsWithoutFieldInstrumentation);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified QueryLatencyStats message, length delimited. Does not implicitly {@link QueryLatencyStats.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof QueryLatencyStats\n     * @static\n     * @param {IQueryLatencyStats} message QueryLatencyStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    QueryLatencyStats.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a QueryLatencyStats message from the specified reader or buffer.\n     * @function decode\n     * @memberof QueryLatencyStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {QueryLatencyStats} QueryLatencyStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    QueryLatencyStats.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.QueryLatencyStats();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 13:\n                if (!(message.latencyCount && message.latencyCount.length))\n                    message.latencyCount = [];\n                if ((tag & 7) === 2) {\n                    let end2 = reader.uint32() + reader.pos;\n                    while (reader.pos < end2)\n                        message.latencyCount.push(reader.sint64());\n                } else\n                    message.latencyCount.push(reader.sint64());\n                break;\n            case 2:\n                message.requestCount = reader.uint64();\n                break;\n            case 3:\n                message.cacheHits = reader.uint64();\n                break;\n            case 4:\n                message.persistedQueryHits = reader.uint64();\n                break;\n            case 5:\n                message.persistedQueryMisses = reader.uint64();\n                break;\n            case 14:\n                if (!(message.cacheLatencyCount && message.cacheLatencyCount.length))\n                    message.cacheLatencyCount = [];\n                if ((tag & 7) === 2) {\n                    let end2 = reader.uint32() + reader.pos;\n                    while (reader.pos < end2)\n                        message.cacheLatencyCount.push(reader.sint64());\n                } else\n                    message.cacheLatencyCount.push(reader.sint64());\n                break;\n            case 7:\n                message.rootErrorStats = $root.PathErrorStats.decode(reader, reader.uint32());\n                break;\n            case 8:\n                message.requestsWithErrorsCount = reader.uint64();\n                break;\n            case 15:\n                if (!(message.publicCacheTtlCount && message.publicCacheTtlCount.length))\n                    message.publicCacheTtlCount = [];\n                if ((tag & 7) === 2) {\n                    let end2 = reader.uint32() + reader.pos;\n                    while (reader.pos < end2)\n                        message.publicCacheTtlCount.push(reader.sint64());\n                } else\n                    message.publicCacheTtlCount.push(reader.sint64());\n                break;\n            case 16:\n                if (!(message.privateCacheTtlCount && message.privateCacheTtlCount.length))\n                    message.privateCacheTtlCount = [];\n                if ((tag & 7) === 2) {\n                    let end2 = reader.uint32() + reader.pos;\n                    while (reader.pos < end2)\n                        message.privateCacheTtlCount.push(reader.sint64());\n                } else\n                    message.privateCacheTtlCount.push(reader.sint64());\n                break;\n            case 11:\n                message.registeredOperationCount = reader.uint64();\n                break;\n            case 12:\n                message.forbiddenOperationCount = reader.uint64();\n                break;\n            case 17:\n                message.requestsWithoutFieldInstrumentation = reader.uint64();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a QueryLatencyStats message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof QueryLatencyStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {QueryLatencyStats} QueryLatencyStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    QueryLatencyStats.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a QueryLatencyStats message.\n     * @function verify\n     * @memberof QueryLatencyStats\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    QueryLatencyStats.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.latencyCount != null && message.hasOwnProperty(\"latencyCount\")) {\n            let array13;\n            if (message.latencyCount != null && message.latencyCount.toArray)\n                array13 = message.latencyCount.toArray();\n            else\n                array13 = message.latencyCount;\n            if (!Array.isArray(array13))\n                return \"latencyCount: array expected\";\n            for (let i = 0; i < array13.length; ++i)\n                if (!$util.isInteger(array13[i]) && !(array13[i] && $util.isInteger(array13[i].low) && $util.isInteger(array13[i].high)))\n                    return \"latencyCount: integer|Long[] expected\";\n        }\n        if (message.requestCount != null && message.hasOwnProperty(\"requestCount\"))\n            if (!$util.isInteger(message.requestCount) && !(message.requestCount && $util.isInteger(message.requestCount.low) && $util.isInteger(message.requestCount.high)))\n                return \"requestCount: integer|Long expected\";\n        if (message.cacheHits != null && message.hasOwnProperty(\"cacheHits\"))\n            if (!$util.isInteger(message.cacheHits) && !(message.cacheHits && $util.isInteger(message.cacheHits.low) && $util.isInteger(message.cacheHits.high)))\n                return \"cacheHits: integer|Long expected\";\n        if (message.persistedQueryHits != null && message.hasOwnProperty(\"persistedQueryHits\"))\n            if (!$util.isInteger(message.persistedQueryHits) && !(message.persistedQueryHits && $util.isInteger(message.persistedQueryHits.low) && $util.isInteger(message.persistedQueryHits.high)))\n                return \"persistedQueryHits: integer|Long expected\";\n        if (message.persistedQueryMisses != null && message.hasOwnProperty(\"persistedQueryMisses\"))\n            if (!$util.isInteger(message.persistedQueryMisses) && !(message.persistedQueryMisses && $util.isInteger(message.persistedQueryMisses.low) && $util.isInteger(message.persistedQueryMisses.high)))\n                return \"persistedQueryMisses: integer|Long expected\";\n        if (message.cacheLatencyCount != null && message.hasOwnProperty(\"cacheLatencyCount\")) {\n            let array14;\n            if (message.cacheLatencyCount != null && message.cacheLatencyCount.toArray)\n                array14 = message.cacheLatencyCount.toArray();\n            else\n                array14 = message.cacheLatencyCount;\n            if (!Array.isArray(array14))\n                return \"cacheLatencyCount: array expected\";\n            for (let i = 0; i < array14.length; ++i)\n                if (!$util.isInteger(array14[i]) && !(array14[i] && $util.isInteger(array14[i].low) && $util.isInteger(array14[i].high)))\n                    return \"cacheLatencyCount: integer|Long[] expected\";\n        }\n        if (message.rootErrorStats != null && message.hasOwnProperty(\"rootErrorStats\")) {\n            let error = $root.PathErrorStats.verify(message.rootErrorStats);\n            if (error)\n                return \"rootErrorStats.\" + error;\n        }\n        if (message.requestsWithErrorsCount != null && message.hasOwnProperty(\"requestsWithErrorsCount\"))\n            if (!$util.isInteger(message.requestsWithErrorsCount) && !(message.requestsWithErrorsCount && $util.isInteger(message.requestsWithErrorsCount.low) && $util.isInteger(message.requestsWithErrorsCount.high)))\n                return \"requestsWithErrorsCount: integer|Long expected\";\n        if (message.publicCacheTtlCount != null && message.hasOwnProperty(\"publicCacheTtlCount\")) {\n            let array15;\n            if (message.publicCacheTtlCount != null && message.publicCacheTtlCount.toArray)\n                array15 = message.publicCacheTtlCount.toArray();\n            else\n                array15 = message.publicCacheTtlCount;\n            if (!Array.isArray(array15))\n                return \"publicCacheTtlCount: array expected\";\n            for (let i = 0; i < array15.length; ++i)\n                if (!$util.isInteger(array15[i]) && !(array15[i] && $util.isInteger(array15[i].low) && $util.isInteger(array15[i].high)))\n                    return \"publicCacheTtlCount: integer|Long[] expected\";\n        }\n        if (message.privateCacheTtlCount != null && message.hasOwnProperty(\"privateCacheTtlCount\")) {\n            let array16;\n            if (message.privateCacheTtlCount != null && message.privateCacheTtlCount.toArray)\n                array16 = message.privateCacheTtlCount.toArray();\n            else\n                array16 = message.privateCacheTtlCount;\n            if (!Array.isArray(array16))\n                return \"privateCacheTtlCount: array expected\";\n            for (let i = 0; i < array16.length; ++i)\n                if (!$util.isInteger(array16[i]) && !(array16[i] && $util.isInteger(array16[i].low) && $util.isInteger(array16[i].high)))\n                    return \"privateCacheTtlCount: integer|Long[] expected\";\n        }\n        if (message.registeredOperationCount != null && message.hasOwnProperty(\"registeredOperationCount\"))\n            if (!$util.isInteger(message.registeredOperationCount) && !(message.registeredOperationCount && $util.isInteger(message.registeredOperationCount.low) && $util.isInteger(message.registeredOperationCount.high)))\n                return \"registeredOperationCount: integer|Long expected\";\n        if (message.forbiddenOperationCount != null && message.hasOwnProperty(\"forbiddenOperationCount\"))\n            if (!$util.isInteger(message.forbiddenOperationCount) && !(message.forbiddenOperationCount && $util.isInteger(message.forbiddenOperationCount.low) && $util.isInteger(message.forbiddenOperationCount.high)))\n                return \"forbiddenOperationCount: integer|Long expected\";\n        if (message.requestsWithoutFieldInstrumentation != null && message.hasOwnProperty(\"requestsWithoutFieldInstrumentation\"))\n            if (!$util.isInteger(message.requestsWithoutFieldInstrumentation) && !(message.requestsWithoutFieldInstrumentation && $util.isInteger(message.requestsWithoutFieldInstrumentation.low) && $util.isInteger(message.requestsWithoutFieldInstrumentation.high)))\n                return \"requestsWithoutFieldInstrumentation: integer|Long expected\";\n        return null;\n    };\n\n    /**\n     * Creates a plain object from a QueryLatencyStats message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof QueryLatencyStats\n     * @static\n     * @param {QueryLatencyStats} message QueryLatencyStats\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    QueryLatencyStats.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        let object = {};\n        if (options.arrays || options.defaults) {\n            object.latencyCount = [];\n            object.cacheLatencyCount = [];\n            object.publicCacheTtlCount = [];\n            object.privateCacheTtlCount = [];\n        }\n        if (options.defaults) {\n            object.requestCount = 0;\n            object.cacheHits = 0;\n            object.persistedQueryHits = 0;\n            object.persistedQueryMisses = 0;\n            object.rootErrorStats = null;\n            object.requestsWithErrorsCount = 0;\n            object.registeredOperationCount = 0;\n            object.forbiddenOperationCount = 0;\n            object.requestsWithoutFieldInstrumentation = 0;\n        }\n        if (message.requestCount != null && message.hasOwnProperty(\"requestCount\"))\n            if (typeof message.requestCount === \"number\")\n                object.requestCount = options.longs === String ? String(message.requestCount) : message.requestCount;\n            else\n                object.requestCount = options.longs === String ? $util.Long.prototype.toString.call(message.requestCount) : options.longs === Number ? new $util.LongBits(message.requestCount.low >>> 0, message.requestCount.high >>> 0).toNumber(true) : message.requestCount;\n        if (message.cacheHits != null && message.hasOwnProperty(\"cacheHits\"))\n            if (typeof message.cacheHits === \"number\")\n                object.cacheHits = options.longs === String ? String(message.cacheHits) : message.cacheHits;\n            else\n                object.cacheHits = options.longs === String ? $util.Long.prototype.toString.call(message.cacheHits) : options.longs === Number ? new $util.LongBits(message.cacheHits.low >>> 0, message.cacheHits.high >>> 0).toNumber(true) : message.cacheHits;\n        if (message.persistedQueryHits != null && message.hasOwnProperty(\"persistedQueryHits\"))\n            if (typeof message.persistedQueryHits === \"number\")\n                object.persistedQueryHits = options.longs === String ? String(message.persistedQueryHits) : message.persistedQueryHits;\n            else\n                object.persistedQueryHits = options.longs === String ? $util.Long.prototype.toString.call(message.persistedQueryHits) : options.longs === Number ? new $util.LongBits(message.persistedQueryHits.low >>> 0, message.persistedQueryHits.high >>> 0).toNumber(true) : message.persistedQueryHits;\n        if (message.persistedQueryMisses != null && message.hasOwnProperty(\"persistedQueryMisses\"))\n            if (typeof message.persistedQueryMisses === \"number\")\n                object.persistedQueryMisses = options.longs === String ? String(message.persistedQueryMisses) : message.persistedQueryMisses;\n            else\n                object.persistedQueryMisses = options.longs === String ? $util.Long.prototype.toString.call(message.persistedQueryMisses) : options.longs === Number ? new $util.LongBits(message.persistedQueryMisses.low >>> 0, message.persistedQueryMisses.high >>> 0).toNumber(true) : message.persistedQueryMisses;\n        if (message.rootErrorStats != null && message.hasOwnProperty(\"rootErrorStats\"))\n            object.rootErrorStats = $root.PathErrorStats.toObject(message.rootErrorStats, options);\n        if (message.requestsWithErrorsCount != null && message.hasOwnProperty(\"requestsWithErrorsCount\"))\n            if (typeof message.requestsWithErrorsCount === \"number\")\n                object.requestsWithErrorsCount = options.longs === String ? String(message.requestsWithErrorsCount) : message.requestsWithErrorsCount;\n            else\n                object.requestsWithErrorsCount = options.longs === String ? $util.Long.prototype.toString.call(message.requestsWithErrorsCount) : options.longs === Number ? new $util.LongBits(message.requestsWithErrorsCount.low >>> 0, message.requestsWithErrorsCount.high >>> 0).toNumber(true) : message.requestsWithErrorsCount;\n        if (message.registeredOperationCount != null && message.hasOwnProperty(\"registeredOperationCount\"))\n            if (typeof message.registeredOperationCount === \"number\")\n                object.registeredOperationCount = options.longs === String ? String(message.registeredOperationCount) : message.registeredOperationCount;\n            else\n                object.registeredOperationCount = options.longs === String ? $util.Long.prototype.toString.call(message.registeredOperationCount) : options.longs === Number ? new $util.LongBits(message.registeredOperationCount.low >>> 0, message.registeredOperationCount.high >>> 0).toNumber(true) : message.registeredOperationCount;\n        if (message.forbiddenOperationCount != null && message.hasOwnProperty(\"forbiddenOperationCount\"))\n            if (typeof message.forbiddenOperationCount === \"number\")\n                object.forbiddenOperationCount = options.longs === String ? String(message.forbiddenOperationCount) : message.forbiddenOperationCount;\n            else\n                object.forbiddenOperationCount = options.longs === String ? $util.Long.prototype.toString.call(message.forbiddenOperationCount) : options.longs === Number ? new $util.LongBits(message.forbiddenOperationCount.low >>> 0, message.forbiddenOperationCount.high >>> 0).toNumber(true) : message.forbiddenOperationCount;\n        if (message.latencyCount && message.latencyCount.length) {\n            object.latencyCount = [];\n            for (let j = 0; j < message.latencyCount.length; ++j)\n                if (typeof message.latencyCount[j] === \"number\")\n                    object.latencyCount[j] = options.longs === String ? String(message.latencyCount[j]) : message.latencyCount[j];\n                else\n                    object.latencyCount[j] = options.longs === String ? $util.Long.prototype.toString.call(message.latencyCount[j]) : options.longs === Number ? new $util.LongBits(message.latencyCount[j].low >>> 0, message.latencyCount[j].high >>> 0).toNumber() : message.latencyCount[j];\n        }\n        if (message.cacheLatencyCount && message.cacheLatencyCount.length) {\n            object.cacheLatencyCount = [];\n            for (let j = 0; j < message.cacheLatencyCount.length; ++j)\n                if (typeof message.cacheLatencyCount[j] === \"number\")\n                    object.cacheLatencyCount[j] = options.longs === String ? String(message.cacheLatencyCount[j]) : message.cacheLatencyCount[j];\n                else\n                    object.cacheLatencyCount[j] = options.longs === String ? $util.Long.prototype.toString.call(message.cacheLatencyCount[j]) : options.longs === Number ? new $util.LongBits(message.cacheLatencyCount[j].low >>> 0, message.cacheLatencyCount[j].high >>> 0).toNumber() : message.cacheLatencyCount[j];\n        }\n        if (message.publicCacheTtlCount && message.publicCacheTtlCount.length) {\n            object.publicCacheTtlCount = [];\n            for (let j = 0; j < message.publicCacheTtlCount.length; ++j)\n                if (typeof message.publicCacheTtlCount[j] === \"number\")\n                    object.publicCacheTtlCount[j] = options.longs === String ? String(message.publicCacheTtlCount[j]) : message.publicCacheTtlCount[j];\n                else\n                    object.publicCacheTtlCount[j] = options.longs === String ? $util.Long.prototype.toString.call(message.publicCacheTtlCount[j]) : options.longs === Number ? new $util.LongBits(message.publicCacheTtlCount[j].low >>> 0, message.publicCacheTtlCount[j].high >>> 0).toNumber() : message.publicCacheTtlCount[j];\n        }\n        if (message.privateCacheTtlCount && message.privateCacheTtlCount.length) {\n            object.privateCacheTtlCount = [];\n            for (let j = 0; j < message.privateCacheTtlCount.length; ++j)\n                if (typeof message.privateCacheTtlCount[j] === \"number\")\n                    object.privateCacheTtlCount[j] = options.longs === String ? String(message.privateCacheTtlCount[j]) : message.privateCacheTtlCount[j];\n                else\n                    object.privateCacheTtlCount[j] = options.longs === String ? $util.Long.prototype.toString.call(message.privateCacheTtlCount[j]) : options.longs === Number ? new $util.LongBits(message.privateCacheTtlCount[j].low >>> 0, message.privateCacheTtlCount[j].high >>> 0).toNumber() : message.privateCacheTtlCount[j];\n        }\n        if (message.requestsWithoutFieldInstrumentation != null && message.hasOwnProperty(\"requestsWithoutFieldInstrumentation\"))\n            if (typeof message.requestsWithoutFieldInstrumentation === \"number\")\n                object.requestsWithoutFieldInstrumentation = options.longs === String ? String(message.requestsWithoutFieldInstrumentation) : message.requestsWithoutFieldInstrumentation;\n            else\n                object.requestsWithoutFieldInstrumentation = options.longs === String ? $util.Long.prototype.toString.call(message.requestsWithoutFieldInstrumentation) : options.longs === Number ? new $util.LongBits(message.requestsWithoutFieldInstrumentation.low >>> 0, message.requestsWithoutFieldInstrumentation.high >>> 0).toNumber(true) : message.requestsWithoutFieldInstrumentation;\n        return object;\n    };\n\n    /**\n     * Converts this QueryLatencyStats to JSON.\n     * @function toJSON\n     * @memberof QueryLatencyStats\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    QueryLatencyStats.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return QueryLatencyStats;\n})();\n\nexport const StatsContext = $root.StatsContext = (() => {\n\n    /**\n     * Properties of a StatsContext.\n     * @exports IStatsContext\n     * @interface IStatsContext\n     * @property {string|null} [clientName] StatsContext clientName\n     * @property {string|null} [clientVersion] StatsContext clientVersion\n     */\n\n    /**\n     * Constructs a new StatsContext.\n     * @exports StatsContext\n     * @classdesc Represents a StatsContext.\n     * @implements IStatsContext\n     * @constructor\n     * @param {IStatsContext=} [properties] Properties to set\n     */\n    function StatsContext(properties) {\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * StatsContext clientName.\n     * @member {string} clientName\n     * @memberof StatsContext\n     * @instance\n     */\n    StatsContext.prototype.clientName = \"\";\n\n    /**\n     * StatsContext clientVersion.\n     * @member {string} clientVersion\n     * @memberof StatsContext\n     * @instance\n     */\n    StatsContext.prototype.clientVersion = \"\";\n\n    /**\n     * Creates a new StatsContext instance using the specified properties.\n     * @function create\n     * @memberof StatsContext\n     * @static\n     * @param {IStatsContext=} [properties] Properties to set\n     * @returns {StatsContext} StatsContext instance\n     */\n    StatsContext.create = function create(properties) {\n        return new StatsContext(properties);\n    };\n\n    /**\n     * Encodes the specified StatsContext message. Does not implicitly {@link StatsContext.verify|verify} messages.\n     * @function encode\n     * @memberof StatsContext\n     * @static\n     * @param {IStatsContext} message StatsContext message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    StatsContext.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.clientName != null && Object.hasOwnProperty.call(message, \"clientName\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.clientName);\n        if (message.clientVersion != null && Object.hasOwnProperty.call(message, \"clientVersion\"))\n            writer.uint32(/* id 3, wireType 2 =*/26).string(message.clientVersion);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified StatsContext message, length delimited. Does not implicitly {@link StatsContext.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof StatsContext\n     * @static\n     * @param {IStatsContext} message StatsContext message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    StatsContext.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a StatsContext message from the specified reader or buffer.\n     * @function decode\n     * @memberof StatsContext\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {StatsContext} StatsContext\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    StatsContext.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.StatsContext();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 2:\n                message.clientName = reader.string();\n                break;\n            case 3:\n                message.clientVersion = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a StatsContext message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof StatsContext\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {StatsContext} StatsContext\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    StatsContext.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a StatsContext message.\n     * @function verify\n     * @memberof StatsContext\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    StatsContext.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.clientName != null && message.hasOwnProperty(\"clientName\"))\n            if (!$util.isString(message.clientName))\n                return \"clientName: string expected\";\n        if (message.clientVersion != null && message.hasOwnProperty(\"clientVersion\"))\n            if (!$util.isString(message.clientVersion))\n                return \"clientVersion: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a plain object from a StatsContext message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof StatsContext\n     * @static\n     * @param {StatsContext} message StatsContext\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    StatsContext.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        let object = {};\n        if (options.defaults) {\n            object.clientName = \"\";\n            object.clientVersion = \"\";\n        }\n        if (message.clientName != null && message.hasOwnProperty(\"clientName\"))\n            object.clientName = message.clientName;\n        if (message.clientVersion != null && message.hasOwnProperty(\"clientVersion\"))\n            object.clientVersion = message.clientVersion;\n        return object;\n    };\n\n    /**\n     * Converts this StatsContext to JSON.\n     * @function toJSON\n     * @memberof StatsContext\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    StatsContext.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return StatsContext;\n})();\n\nexport const ContextualizedQueryLatencyStats = $root.ContextualizedQueryLatencyStats = (() => {\n\n    /**\n     * Properties of a ContextualizedQueryLatencyStats.\n     * @exports IContextualizedQueryLatencyStats\n     * @interface IContextualizedQueryLatencyStats\n     * @property {IQueryLatencyStats|null} [queryLatencyStats] ContextualizedQueryLatencyStats queryLatencyStats\n     * @property {IStatsContext|null} [context] ContextualizedQueryLatencyStats context\n     */\n\n    /**\n     * Constructs a new ContextualizedQueryLatencyStats.\n     * @exports ContextualizedQueryLatencyStats\n     * @classdesc Represents a ContextualizedQueryLatencyStats.\n     * @implements IContextualizedQueryLatencyStats\n     * @constructor\n     * @param {IContextualizedQueryLatencyStats=} [properties] Properties to set\n     */\n    function ContextualizedQueryLatencyStats(properties) {\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ContextualizedQueryLatencyStats queryLatencyStats.\n     * @member {IQueryLatencyStats|null|undefined} queryLatencyStats\n     * @memberof ContextualizedQueryLatencyStats\n     * @instance\n     */\n    ContextualizedQueryLatencyStats.prototype.queryLatencyStats = null;\n\n    /**\n     * ContextualizedQueryLatencyStats context.\n     * @member {IStatsContext|null|undefined} context\n     * @memberof ContextualizedQueryLatencyStats\n     * @instance\n     */\n    ContextualizedQueryLatencyStats.prototype.context = null;\n\n    /**\n     * Creates a new ContextualizedQueryLatencyStats instance using the specified properties.\n     * @function create\n     * @memberof ContextualizedQueryLatencyStats\n     * @static\n     * @param {IContextualizedQueryLatencyStats=} [properties] Properties to set\n     * @returns {ContextualizedQueryLatencyStats} ContextualizedQueryLatencyStats instance\n     */\n    ContextualizedQueryLatencyStats.create = function create(properties) {\n        return new ContextualizedQueryLatencyStats(properties);\n    };\n\n    /**\n     * Encodes the specified ContextualizedQueryLatencyStats message. Does not implicitly {@link ContextualizedQueryLatencyStats.verify|verify} messages.\n     * @function encode\n     * @memberof ContextualizedQueryLatencyStats\n     * @static\n     * @param {IContextualizedQueryLatencyStats} message ContextualizedQueryLatencyStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ContextualizedQueryLatencyStats.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.queryLatencyStats != null && Object.hasOwnProperty.call(message, \"queryLatencyStats\"))\n            $root.QueryLatencyStats.encode(message.queryLatencyStats, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.context != null && Object.hasOwnProperty.call(message, \"context\"))\n            $root.StatsContext.encode(message.context, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ContextualizedQueryLatencyStats message, length delimited. Does not implicitly {@link ContextualizedQueryLatencyStats.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ContextualizedQueryLatencyStats\n     * @static\n     * @param {IContextualizedQueryLatencyStats} message ContextualizedQueryLatencyStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ContextualizedQueryLatencyStats.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ContextualizedQueryLatencyStats message from the specified reader or buffer.\n     * @function decode\n     * @memberof ContextualizedQueryLatencyStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ContextualizedQueryLatencyStats} ContextualizedQueryLatencyStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ContextualizedQueryLatencyStats.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ContextualizedQueryLatencyStats();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.queryLatencyStats = $root.QueryLatencyStats.decode(reader, reader.uint32());\n                break;\n            case 2:\n                message.context = $root.StatsContext.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ContextualizedQueryLatencyStats message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ContextualizedQueryLatencyStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ContextualizedQueryLatencyStats} ContextualizedQueryLatencyStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ContextualizedQueryLatencyStats.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ContextualizedQueryLatencyStats message.\n     * @function verify\n     * @memberof ContextualizedQueryLatencyStats\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ContextualizedQueryLatencyStats.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.queryLatencyStats != null && message.hasOwnProperty(\"queryLatencyStats\")) {\n            let error = $root.QueryLatencyStats.verify(message.queryLatencyStats);\n            if (error)\n                return \"queryLatencyStats.\" + error;\n        }\n        if (message.context != null && message.hasOwnProperty(\"context\")) {\n            let error = $root.StatsContext.verify(message.context);\n            if (error)\n                return \"context.\" + error;\n        }\n        return null;\n    };\n\n    /**\n     * Creates a plain object from a ContextualizedQueryLatencyStats message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ContextualizedQueryLatencyStats\n     * @static\n     * @param {ContextualizedQueryLatencyStats} message ContextualizedQueryLatencyStats\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ContextualizedQueryLatencyStats.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        let object = {};\n        if (options.defaults) {\n            object.queryLatencyStats = null;\n            object.context = null;\n        }\n        if (message.queryLatencyStats != null && message.hasOwnProperty(\"queryLatencyStats\"))\n            object.queryLatencyStats = $root.QueryLatencyStats.toObject(message.queryLatencyStats, options);\n        if (message.context != null && message.hasOwnProperty(\"context\"))\n            object.context = $root.StatsContext.toObject(message.context, options);\n        return object;\n    };\n\n    /**\n     * Converts this ContextualizedQueryLatencyStats to JSON.\n     * @function toJSON\n     * @memberof ContextualizedQueryLatencyStats\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ContextualizedQueryLatencyStats.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ContextualizedQueryLatencyStats;\n})();\n\nexport const ContextualizedTypeStats = $root.ContextualizedTypeStats = (() => {\n\n    /**\n     * Properties of a ContextualizedTypeStats.\n     * @exports IContextualizedTypeStats\n     * @interface IContextualizedTypeStats\n     * @property {IStatsContext|null} [context] ContextualizedTypeStats context\n     * @property {Object.<string,ITypeStat>|null} [perTypeStat] ContextualizedTypeStats perTypeStat\n     */\n\n    /**\n     * Constructs a new ContextualizedTypeStats.\n     * @exports ContextualizedTypeStats\n     * @classdesc Represents a ContextualizedTypeStats.\n     * @implements IContextualizedTypeStats\n     * @constructor\n     * @param {IContextualizedTypeStats=} [properties] Properties to set\n     */\n    function ContextualizedTypeStats(properties) {\n        this.perTypeStat = {};\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ContextualizedTypeStats context.\n     * @member {IStatsContext|null|undefined} context\n     * @memberof ContextualizedTypeStats\n     * @instance\n     */\n    ContextualizedTypeStats.prototype.context = null;\n\n    /**\n     * ContextualizedTypeStats perTypeStat.\n     * @member {Object.<string,ITypeStat>} perTypeStat\n     * @memberof ContextualizedTypeStats\n     * @instance\n     */\n    ContextualizedTypeStats.prototype.perTypeStat = $util.emptyObject;\n\n    /**\n     * Creates a new ContextualizedTypeStats instance using the specified properties.\n     * @function create\n     * @memberof ContextualizedTypeStats\n     * @static\n     * @param {IContextualizedTypeStats=} [properties] Properties to set\n     * @returns {ContextualizedTypeStats} ContextualizedTypeStats instance\n     */\n    ContextualizedTypeStats.create = function create(properties) {\n        return new ContextualizedTypeStats(properties);\n    };\n\n    /**\n     * Encodes the specified ContextualizedTypeStats message. Does not implicitly {@link ContextualizedTypeStats.verify|verify} messages.\n     * @function encode\n     * @memberof ContextualizedTypeStats\n     * @static\n     * @param {IContextualizedTypeStats} message ContextualizedTypeStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ContextualizedTypeStats.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.context != null && Object.hasOwnProperty.call(message, \"context\"))\n            $root.StatsContext.encode(message.context, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.perTypeStat != null && Object.hasOwnProperty.call(message, \"perTypeStat\"))\n            for (let keys = Object.keys(message.perTypeStat), i = 0; i < keys.length; ++i) {\n                writer.uint32(/* id 2, wireType 2 =*/18).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);\n                $root.TypeStat.encode(message.perTypeStat[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n            }\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ContextualizedTypeStats message, length delimited. Does not implicitly {@link ContextualizedTypeStats.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ContextualizedTypeStats\n     * @static\n     * @param {IContextualizedTypeStats} message ContextualizedTypeStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ContextualizedTypeStats.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ContextualizedTypeStats message from the specified reader or buffer.\n     * @function decode\n     * @memberof ContextualizedTypeStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ContextualizedTypeStats} ContextualizedTypeStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ContextualizedTypeStats.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ContextualizedTypeStats(), key;\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.context = $root.StatsContext.decode(reader, reader.uint32());\n                break;\n            case 2:\n                reader.skip().pos++;\n                if (message.perTypeStat === $util.emptyObject)\n                    message.perTypeStat = {};\n                key = reader.string();\n                reader.pos++;\n                message.perTypeStat[key] = $root.TypeStat.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ContextualizedTypeStats message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ContextualizedTypeStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ContextualizedTypeStats} ContextualizedTypeStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ContextualizedTypeStats.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ContextualizedTypeStats message.\n     * @function verify\n     * @memberof ContextualizedTypeStats\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ContextualizedTypeStats.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.context != null && message.hasOwnProperty(\"context\")) {\n            let error = $root.StatsContext.verify(message.context);\n            if (error)\n                return \"context.\" + error;\n        }\n        if (message.perTypeStat != null && message.hasOwnProperty(\"perTypeStat\")) {\n            if (!$util.isObject(message.perTypeStat))\n                return \"perTypeStat: object expected\";\n            let key = Object.keys(message.perTypeStat);\n            for (let i = 0; i < key.length; ++i) {\n                let error = $root.TypeStat.verify(message.perTypeStat[key[i]]);\n                if (error)\n                    return \"perTypeStat.\" + error;\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Creates a plain object from a ContextualizedTypeStats message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ContextualizedTypeStats\n     * @static\n     * @param {ContextualizedTypeStats} message ContextualizedTypeStats\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ContextualizedTypeStats.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        let object = {};\n        if (options.objects || options.defaults)\n            object.perTypeStat = {};\n        if (options.defaults)\n            object.context = null;\n        if (message.context != null && message.hasOwnProperty(\"context\"))\n            object.context = $root.StatsContext.toObject(message.context, options);\n        let keys2;\n        if (message.perTypeStat && (keys2 = Object.keys(message.perTypeStat)).length) {\n            object.perTypeStat = {};\n            for (let j = 0; j < keys2.length; ++j)\n                object.perTypeStat[keys2[j]] = $root.TypeStat.toObject(message.perTypeStat[keys2[j]], options);\n        }\n        return object;\n    };\n\n    /**\n     * Converts this ContextualizedTypeStats to JSON.\n     * @function toJSON\n     * @memberof ContextualizedTypeStats\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ContextualizedTypeStats.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ContextualizedTypeStats;\n})();\n\nexport const FieldStat = $root.FieldStat = (() => {\n\n    /**\n     * Properties of a FieldStat.\n     * @exports IFieldStat\n     * @interface IFieldStat\n     * @property {string|null} [returnType] FieldStat returnType\n     * @property {number|null} [errorsCount] FieldStat errorsCount\n     * @property {number|null} [observedExecutionCount] FieldStat observedExecutionCount\n     * @property {number|null} [estimatedExecutionCount] FieldStat estimatedExecutionCount\n     * @property {number|null} [requestsWithErrorsCount] FieldStat requestsWithErrorsCount\n     * @property {$protobuf.ToArray.<number>|Array.<number>|null} [latencyCount] FieldStat latencyCount\n     */\n\n    /**\n     * Constructs a new FieldStat.\n     * @exports FieldStat\n     * @classdesc Represents a FieldStat.\n     * @implements IFieldStat\n     * @constructor\n     * @param {IFieldStat=} [properties] Properties to set\n     */\n    function FieldStat(properties) {\n        this.latencyCount = [];\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * FieldStat returnType.\n     * @member {string} returnType\n     * @memberof FieldStat\n     * @instance\n     */\n    FieldStat.prototype.returnType = \"\";\n\n    /**\n     * FieldStat errorsCount.\n     * @member {number} errorsCount\n     * @memberof FieldStat\n     * @instance\n     */\n    FieldStat.prototype.errorsCount = 0;\n\n    /**\n     * FieldStat observedExecutionCount.\n     * @member {number} observedExecutionCount\n     * @memberof FieldStat\n     * @instance\n     */\n    FieldStat.prototype.observedExecutionCount = 0;\n\n    /**\n     * FieldStat estimatedExecutionCount.\n     * @member {number} estimatedExecutionCount\n     * @memberof FieldStat\n     * @instance\n     */\n    FieldStat.prototype.estimatedExecutionCount = 0;\n\n    /**\n     * FieldStat requestsWithErrorsCount.\n     * @member {number} requestsWithErrorsCount\n     * @memberof FieldStat\n     * @instance\n     */\n    FieldStat.prototype.requestsWithErrorsCount = 0;\n\n    /**\n     * FieldStat latencyCount.\n     * @member {Array.<number>} latencyCount\n     * @memberof FieldStat\n     * @instance\n     */\n    FieldStat.prototype.latencyCount = $util.emptyArray;\n\n    /**\n     * Creates a new FieldStat instance using the specified properties.\n     * @function create\n     * @memberof FieldStat\n     * @static\n     * @param {IFieldStat=} [properties] Properties to set\n     * @returns {FieldStat} FieldStat instance\n     */\n    FieldStat.create = function create(properties) {\n        return new FieldStat(properties);\n    };\n\n    /**\n     * Encodes the specified FieldStat message. Does not implicitly {@link FieldStat.verify|verify} messages.\n     * @function encode\n     * @memberof FieldStat\n     * @static\n     * @param {IFieldStat} message FieldStat message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    FieldStat.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.returnType != null && Object.hasOwnProperty.call(message, \"returnType\"))\n            writer.uint32(/* id 3, wireType 2 =*/26).string(message.returnType);\n        if (message.errorsCount != null && Object.hasOwnProperty.call(message, \"errorsCount\"))\n            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.errorsCount);\n        if (message.observedExecutionCount != null && Object.hasOwnProperty.call(message, \"observedExecutionCount\"))\n            writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.observedExecutionCount);\n        if (message.requestsWithErrorsCount != null && Object.hasOwnProperty.call(message, \"requestsWithErrorsCount\"))\n            writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.requestsWithErrorsCount);\n        let array9;\n        if (message.latencyCount != null && message.latencyCount.toArray)\n            array9 = message.latencyCount.toArray();\n        else\n            array9 = message.latencyCount;\n        if (array9 != null && array9.length) {\n            writer.uint32(/* id 9, wireType 2 =*/74).fork();\n            for (let i = 0; i < array9.length; ++i)\n                writer.sint64(array9[i]);\n            writer.ldelim();\n        }\n        if (message.estimatedExecutionCount != null && Object.hasOwnProperty.call(message, \"estimatedExecutionCount\"))\n            writer.uint32(/* id 10, wireType 0 =*/80).uint64(message.estimatedExecutionCount);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified FieldStat message, length delimited. Does not implicitly {@link FieldStat.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof FieldStat\n     * @static\n     * @param {IFieldStat} message FieldStat message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    FieldStat.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a FieldStat message from the specified reader or buffer.\n     * @function decode\n     * @memberof FieldStat\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {FieldStat} FieldStat\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    FieldStat.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.FieldStat();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 3:\n                message.returnType = reader.string();\n                break;\n            case 4:\n                message.errorsCount = reader.uint64();\n                break;\n            case 5:\n                message.observedExecutionCount = reader.uint64();\n                break;\n            case 10:\n                message.estimatedExecutionCount = reader.uint64();\n                break;\n            case 6:\n                message.requestsWithErrorsCount = reader.uint64();\n                break;\n            case 9:\n                if (!(message.latencyCount && message.latencyCount.length))\n                    message.latencyCount = [];\n                if ((tag & 7) === 2) {\n                    let end2 = reader.uint32() + reader.pos;\n                    while (reader.pos < end2)\n                        message.latencyCount.push(reader.sint64());\n                } else\n                    message.latencyCount.push(reader.sint64());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a FieldStat message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof FieldStat\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {FieldStat} FieldStat\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    FieldStat.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a FieldStat message.\n     * @function verify\n     * @memberof FieldStat\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    FieldStat.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.returnType != null && message.hasOwnProperty(\"returnType\"))\n            if (!$util.isString(message.returnType))\n                return \"returnType: string expected\";\n        if (message.errorsCount != null && message.hasOwnProperty(\"errorsCount\"))\n            if (!$util.isInteger(message.errorsCount) && !(message.errorsCount && $util.isInteger(message.errorsCount.low) && $util.isInteger(message.errorsCount.high)))\n                return \"errorsCount: integer|Long expected\";\n        if (message.observedExecutionCount != null && message.hasOwnProperty(\"observedExecutionCount\"))\n            if (!$util.isInteger(message.observedExecutionCount) && !(message.observedExecutionCount && $util.isInteger(message.observedExecutionCount.low) && $util.isInteger(message.observedExecutionCount.high)))\n                return \"observedExecutionCount: integer|Long expected\";\n        if (message.estimatedExecutionCount != null && message.hasOwnProperty(\"estimatedExecutionCount\"))\n            if (!$util.isInteger(message.estimatedExecutionCount) && !(message.estimatedExecutionCount && $util.isInteger(message.estimatedExecutionCount.low) && $util.isInteger(message.estimatedExecutionCount.high)))\n                return \"estimatedExecutionCount: integer|Long expected\";\n        if (message.requestsWithErrorsCount != null && message.hasOwnProperty(\"requestsWithErrorsCount\"))\n            if (!$util.isInteger(message.requestsWithErrorsCount) && !(message.requestsWithErrorsCount && $util.isInteger(message.requestsWithErrorsCount.low) && $util.isInteger(message.requestsWithErrorsCount.high)))\n                return \"requestsWithErrorsCount: integer|Long expected\";\n        if (message.latencyCount != null && message.hasOwnProperty(\"latencyCount\")) {\n            let array9;\n            if (message.latencyCount != null && message.latencyCount.toArray)\n                array9 = message.latencyCount.toArray();\n            else\n                array9 = message.latencyCount;\n            if (!Array.isArray(array9))\n                return \"latencyCount: array expected\";\n            for (let i = 0; i < array9.length; ++i)\n                if (!$util.isInteger(array9[i]) && !(array9[i] && $util.isInteger(array9[i].low) && $util.isInteger(array9[i].high)))\n                    return \"latencyCount: integer|Long[] expected\";\n        }\n        return null;\n    };\n\n    /**\n     * Creates a plain object from a FieldStat message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof FieldStat\n     * @static\n     * @param {FieldStat} message FieldStat\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    FieldStat.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        let object = {};\n        if (options.arrays || options.defaults)\n            object.latencyCount = [];\n        if (options.defaults) {\n            object.returnType = \"\";\n            object.errorsCount = 0;\n            object.observedExecutionCount = 0;\n            object.requestsWithErrorsCount = 0;\n            object.estimatedExecutionCount = 0;\n        }\n        if (message.returnType != null && message.hasOwnProperty(\"returnType\"))\n            object.returnType = message.returnType;\n        if (message.errorsCount != null && message.hasOwnProperty(\"errorsCount\"))\n            if (typeof message.errorsCount === \"number\")\n                object.errorsCount = options.longs === String ? String(message.errorsCount) : message.errorsCount;\n            else\n                object.errorsCount = options.longs === String ? $util.Long.prototype.toString.call(message.errorsCount) : options.longs === Number ? new $util.LongBits(message.errorsCount.low >>> 0, message.errorsCount.high >>> 0).toNumber(true) : message.errorsCount;\n        if (message.observedExecutionCount != null && message.hasOwnProperty(\"observedExecutionCount\"))\n            if (typeof message.observedExecutionCount === \"number\")\n                object.observedExecutionCount = options.longs === String ? String(message.observedExecutionCount) : message.observedExecutionCount;\n            else\n                object.observedExecutionCount = options.longs === String ? $util.Long.prototype.toString.call(message.observedExecutionCount) : options.longs === Number ? new $util.LongBits(message.observedExecutionCount.low >>> 0, message.observedExecutionCount.high >>> 0).toNumber(true) : message.observedExecutionCount;\n        if (message.requestsWithErrorsCount != null && message.hasOwnProperty(\"requestsWithErrorsCount\"))\n            if (typeof message.requestsWithErrorsCount === \"number\")\n                object.requestsWithErrorsCount = options.longs === String ? String(message.requestsWithErrorsCount) : message.requestsWithErrorsCount;\n            else\n                object.requestsWithErrorsCount = options.longs === String ? $util.Long.prototype.toString.call(message.requestsWithErrorsCount) : options.longs === Number ? new $util.LongBits(message.requestsWithErrorsCount.low >>> 0, message.requestsWithErrorsCount.high >>> 0).toNumber(true) : message.requestsWithErrorsCount;\n        if (message.latencyCount && message.latencyCount.length) {\n            object.latencyCount = [];\n            for (let j = 0; j < message.latencyCount.length; ++j)\n                if (typeof message.latencyCount[j] === \"number\")\n                    object.latencyCount[j] = options.longs === String ? String(message.latencyCount[j]) : message.latencyCount[j];\n                else\n                    object.latencyCount[j] = options.longs === String ? $util.Long.prototype.toString.call(message.latencyCount[j]) : options.longs === Number ? new $util.LongBits(message.latencyCount[j].low >>> 0, message.latencyCount[j].high >>> 0).toNumber() : message.latencyCount[j];\n        }\n        if (message.estimatedExecutionCount != null && message.hasOwnProperty(\"estimatedExecutionCount\"))\n            if (typeof message.estimatedExecutionCount === \"number\")\n                object.estimatedExecutionCount = options.longs === String ? String(message.estimatedExecutionCount) : message.estimatedExecutionCount;\n            else\n                object.estimatedExecutionCount = options.longs === String ? $util.Long.prototype.toString.call(message.estimatedExecutionCount) : options.longs === Number ? new $util.LongBits(message.estimatedExecutionCount.low >>> 0, message.estimatedExecutionCount.high >>> 0).toNumber(true) : message.estimatedExecutionCount;\n        return object;\n    };\n\n    /**\n     * Converts this FieldStat to JSON.\n     * @function toJSON\n     * @memberof FieldStat\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    FieldStat.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return FieldStat;\n})();\n\nexport const TypeStat = $root.TypeStat = (() => {\n\n    /**\n     * Properties of a TypeStat.\n     * @exports ITypeStat\n     * @interface ITypeStat\n     * @property {Object.<string,IFieldStat>|null} [perFieldStat] TypeStat perFieldStat\n     */\n\n    /**\n     * Constructs a new TypeStat.\n     * @exports TypeStat\n     * @classdesc Represents a TypeStat.\n     * @implements ITypeStat\n     * @constructor\n     * @param {ITypeStat=} [properties] Properties to set\n     */\n    function TypeStat(properties) {\n        this.perFieldStat = {};\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * TypeStat perFieldStat.\n     * @member {Object.<string,IFieldStat>} perFieldStat\n     * @memberof TypeStat\n     * @instance\n     */\n    TypeStat.prototype.perFieldStat = $util.emptyObject;\n\n    /**\n     * Creates a new TypeStat instance using the specified properties.\n     * @function create\n     * @memberof TypeStat\n     * @static\n     * @param {ITypeStat=} [properties] Properties to set\n     * @returns {TypeStat} TypeStat instance\n     */\n    TypeStat.create = function create(properties) {\n        return new TypeStat(properties);\n    };\n\n    /**\n     * Encodes the specified TypeStat message. Does not implicitly {@link TypeStat.verify|verify} messages.\n     * @function encode\n     * @memberof TypeStat\n     * @static\n     * @param {ITypeStat} message TypeStat message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    TypeStat.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.perFieldStat != null && Object.hasOwnProperty.call(message, \"perFieldStat\"))\n            for (let keys = Object.keys(message.perFieldStat), i = 0; i < keys.length; ++i) {\n                writer.uint32(/* id 3, wireType 2 =*/26).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);\n                $root.FieldStat.encode(message.perFieldStat[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n            }\n        return writer;\n    };\n\n    /**\n     * Encodes the specified TypeStat message, length delimited. Does not implicitly {@link TypeStat.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof TypeStat\n     * @static\n     * @param {ITypeStat} message TypeStat message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    TypeStat.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a TypeStat message from the specified reader or buffer.\n     * @function decode\n     * @memberof TypeStat\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {TypeStat} TypeStat\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    TypeStat.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.TypeStat(), key;\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 3:\n                reader.skip().pos++;\n                if (message.perFieldStat === $util.emptyObject)\n                    message.perFieldStat = {};\n                key = reader.string();\n                reader.pos++;\n                message.perFieldStat[key] = $root.FieldStat.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a TypeStat message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof TypeStat\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {TypeStat} TypeStat\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    TypeStat.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a TypeStat message.\n     * @function verify\n     * @memberof TypeStat\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    TypeStat.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.perFieldStat != null && message.hasOwnProperty(\"perFieldStat\")) {\n            if (!$util.isObject(message.perFieldStat))\n                return \"perFieldStat: object expected\";\n            let key = Object.keys(message.perFieldStat);\n            for (let i = 0; i < key.length; ++i) {\n                let error = $root.FieldStat.verify(message.perFieldStat[key[i]]);\n                if (error)\n                    return \"perFieldStat.\" + error;\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Creates a plain object from a TypeStat message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof TypeStat\n     * @static\n     * @param {TypeStat} message TypeStat\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    TypeStat.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        let object = {};\n        if (options.objects || options.defaults)\n            object.perFieldStat = {};\n        let keys2;\n        if (message.perFieldStat && (keys2 = Object.keys(message.perFieldStat)).length) {\n            object.perFieldStat = {};\n            for (let j = 0; j < keys2.length; ++j)\n                object.perFieldStat[keys2[j]] = $root.FieldStat.toObject(message.perFieldStat[keys2[j]], options);\n        }\n        return object;\n    };\n\n    /**\n     * Converts this TypeStat to JSON.\n     * @function toJSON\n     * @memberof TypeStat\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    TypeStat.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return TypeStat;\n})();\n\nexport const ReferencedFieldsForType = $root.ReferencedFieldsForType = (() => {\n\n    /**\n     * Properties of a ReferencedFieldsForType.\n     * @exports IReferencedFieldsForType\n     * @interface IReferencedFieldsForType\n     * @property {Array.<string>|null} [fieldNames] ReferencedFieldsForType fieldNames\n     * @property {boolean|null} [isInterface] ReferencedFieldsForType isInterface\n     */\n\n    /**\n     * Constructs a new ReferencedFieldsForType.\n     * @exports ReferencedFieldsForType\n     * @classdesc Represents a ReferencedFieldsForType.\n     * @implements IReferencedFieldsForType\n     * @constructor\n     * @param {IReferencedFieldsForType=} [properties] Properties to set\n     */\n    function ReferencedFieldsForType(properties) {\n        this.fieldNames = [];\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ReferencedFieldsForType fieldNames.\n     * @member {Array.<string>} fieldNames\n     * @memberof ReferencedFieldsForType\n     * @instance\n     */\n    ReferencedFieldsForType.prototype.fieldNames = $util.emptyArray;\n\n    /**\n     * ReferencedFieldsForType isInterface.\n     * @member {boolean} isInterface\n     * @memberof ReferencedFieldsForType\n     * @instance\n     */\n    ReferencedFieldsForType.prototype.isInterface = false;\n\n    /**\n     * Creates a new ReferencedFieldsForType instance using the specified properties.\n     * @function create\n     * @memberof ReferencedFieldsForType\n     * @static\n     * @param {IReferencedFieldsForType=} [properties] Properties to set\n     * @returns {ReferencedFieldsForType} ReferencedFieldsForType instance\n     */\n    ReferencedFieldsForType.create = function create(properties) {\n        return new ReferencedFieldsForType(properties);\n    };\n\n    /**\n     * Encodes the specified ReferencedFieldsForType message. Does not implicitly {@link ReferencedFieldsForType.verify|verify} messages.\n     * @function encode\n     * @memberof ReferencedFieldsForType\n     * @static\n     * @param {IReferencedFieldsForType} message ReferencedFieldsForType message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ReferencedFieldsForType.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.fieldNames != null && message.fieldNames.length)\n            for (let i = 0; i < message.fieldNames.length; ++i)\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.fieldNames[i]);\n        if (message.isInterface != null && Object.hasOwnProperty.call(message, \"isInterface\"))\n            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isInterface);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ReferencedFieldsForType message, length delimited. Does not implicitly {@link ReferencedFieldsForType.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ReferencedFieldsForType\n     * @static\n     * @param {IReferencedFieldsForType} message ReferencedFieldsForType message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ReferencedFieldsForType.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ReferencedFieldsForType message from the specified reader or buffer.\n     * @function decode\n     * @memberof ReferencedFieldsForType\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ReferencedFieldsForType} ReferencedFieldsForType\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ReferencedFieldsForType.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ReferencedFieldsForType();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                if (!(message.fieldNames && message.fieldNames.length))\n                    message.fieldNames = [];\n                message.fieldNames.push(reader.string());\n                break;\n            case 2:\n                message.isInterface = reader.bool();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ReferencedFieldsForType message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ReferencedFieldsForType\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ReferencedFieldsForType} ReferencedFieldsForType\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ReferencedFieldsForType.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ReferencedFieldsForType message.\n     * @function verify\n     * @memberof ReferencedFieldsForType\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ReferencedFieldsForType.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.fieldNames != null && message.hasOwnProperty(\"fieldNames\")) {\n            if (!Array.isArray(message.fieldNames))\n                return \"fieldNames: array expected\";\n            for (let i = 0; i < message.fieldNames.length; ++i)\n                if (!$util.isString(message.fieldNames[i]))\n                    return \"fieldNames: string[] expected\";\n        }\n        if (message.isInterface != null && message.hasOwnProperty(\"isInterface\"))\n            if (typeof message.isInterface !== \"boolean\")\n                return \"isInterface: boolean expected\";\n        return null;\n    };\n\n    /**\n     * Creates a plain object from a ReferencedFieldsForType message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ReferencedFieldsForType\n     * @static\n     * @param {ReferencedFieldsForType} message ReferencedFieldsForType\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ReferencedFieldsForType.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        let object = {};\n        if (options.arrays || options.defaults)\n            object.fieldNames = [];\n        if (options.defaults)\n            object.isInterface = false;\n        if (message.fieldNames && message.fieldNames.length) {\n            object.fieldNames = [];\n            for (let j = 0; j < message.fieldNames.length; ++j)\n                object.fieldNames[j] = message.fieldNames[j];\n        }\n        if (message.isInterface != null && message.hasOwnProperty(\"isInterface\"))\n            object.isInterface = message.isInterface;\n        return object;\n    };\n\n    /**\n     * Converts this ReferencedFieldsForType to JSON.\n     * @function toJSON\n     * @memberof ReferencedFieldsForType\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ReferencedFieldsForType.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ReferencedFieldsForType;\n})();\n\nexport const Report = $root.Report = (() => {\n\n    /**\n     * Properties of a Report.\n     * @exports IReport\n     * @interface IReport\n     * @property {IReportHeader|null} [header] Report header\n     * @property {Object.<string,ITracesAndStats>|null} [tracesPerQuery] Report tracesPerQuery\n     * @property {google.protobuf.ITimestamp|null} [endTime] Report endTime\n     * @property {number|null} [operationCount] Report operationCount\n     * @property {boolean|null} [tracesPreAggregated] Report tracesPreAggregated\n     */\n\n    /**\n     * Constructs a new Report.\n     * @exports Report\n     * @classdesc Represents a Report.\n     * @implements IReport\n     * @constructor\n     * @param {IReport=} [properties] Properties to set\n     */\n    function Report(properties) {\n        this.tracesPerQuery = {};\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Report header.\n     * @member {IReportHeader|null|undefined} header\n     * @memberof Report\n     * @instance\n     */\n    Report.prototype.header = null;\n\n    /**\n     * Report tracesPerQuery.\n     * @member {Object.<string,ITracesAndStats>} tracesPerQuery\n     * @memberof Report\n     * @instance\n     */\n    Report.prototype.tracesPerQuery = $util.emptyObject;\n\n    /**\n     * Report endTime.\n     * @member {google.protobuf.ITimestamp|null|undefined} endTime\n     * @memberof Report\n     * @instance\n     */\n    Report.prototype.endTime = null;\n\n    /**\n     * Report operationCount.\n     * @member {number} operationCount\n     * @memberof Report\n     * @instance\n     */\n    Report.prototype.operationCount = 0;\n\n    /**\n     * Report tracesPreAggregated.\n     * @member {boolean} tracesPreAggregated\n     * @memberof Report\n     * @instance\n     */\n    Report.prototype.tracesPreAggregated = false;\n\n    /**\n     * Creates a new Report instance using the specified properties.\n     * @function create\n     * @memberof Report\n     * @static\n     * @param {IReport=} [properties] Properties to set\n     * @returns {Report} Report instance\n     */\n    Report.create = function create(properties) {\n        return new Report(properties);\n    };\n\n    /**\n     * Encodes the specified Report message. Does not implicitly {@link Report.verify|verify} messages.\n     * @function encode\n     * @memberof Report\n     * @static\n     * @param {IReport} message Report message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Report.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.header != null && Object.hasOwnProperty.call(message, \"header\"))\n            $root.ReportHeader.encode(message.header, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.endTime != null && Object.hasOwnProperty.call(message, \"endTime\"))\n            $root.google.protobuf.Timestamp.encode(message.endTime, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        if (message.tracesPerQuery != null && Object.hasOwnProperty.call(message, \"tracesPerQuery\"))\n            for (let keys = Object.keys(message.tracesPerQuery), i = 0; i < keys.length; ++i) {\n                writer.uint32(/* id 5, wireType 2 =*/42).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);\n                $root.TracesAndStats.encode(message.tracesPerQuery[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n            }\n        if (message.operationCount != null && Object.hasOwnProperty.call(message, \"operationCount\"))\n            writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.operationCount);\n        if (message.tracesPreAggregated != null && Object.hasOwnProperty.call(message, \"tracesPreAggregated\"))\n            writer.uint32(/* id 7, wireType 0 =*/56).bool(message.tracesPreAggregated);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified Report message, length delimited. Does not implicitly {@link Report.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Report\n     * @static\n     * @param {IReport} message Report message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Report.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a Report message from the specified reader or buffer.\n     * @function decode\n     * @memberof Report\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Report} Report\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Report.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.Report(), key;\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.header = $root.ReportHeader.decode(reader, reader.uint32());\n                break;\n            case 5:\n                reader.skip().pos++;\n                if (message.tracesPerQuery === $util.emptyObject)\n                    message.tracesPerQuery = {};\n                key = reader.string();\n                reader.pos++;\n                message.tracesPerQuery[key] = $root.TracesAndStats.decode(reader, reader.uint32());\n                break;\n            case 2:\n                message.endTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());\n                break;\n            case 6:\n                message.operationCount = reader.uint64();\n                break;\n            case 7:\n                message.tracesPreAggregated = reader.bool();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a Report message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Report\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Report} Report\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Report.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a Report message.\n     * @function verify\n     * @memberof Report\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    Report.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.header != null && message.hasOwnProperty(\"header\")) {\n            let error = $root.ReportHeader.verify(message.header);\n            if (error)\n                return \"header.\" + error;\n        }\n        if (message.tracesPerQuery != null && message.hasOwnProperty(\"tracesPerQuery\")) {\n            if (!$util.isObject(message.tracesPerQuery))\n                return \"tracesPerQuery: object expected\";\n            let key = Object.keys(message.tracesPerQuery);\n            for (let i = 0; i < key.length; ++i) {\n                let error = $root.TracesAndStats.verify(message.tracesPerQuery[key[i]]);\n                if (error)\n                    return \"tracesPerQuery.\" + error;\n            }\n        }\n        if (message.endTime != null && message.hasOwnProperty(\"endTime\")) {\n            let error = $root.google.protobuf.Timestamp.verify(message.endTime);\n            if (error)\n                return \"endTime.\" + error;\n        }\n        if (message.operationCount != null && message.hasOwnProperty(\"operationCount\"))\n            if (!$util.isInteger(message.operationCount) && !(message.operationCount && $util.isInteger(message.operationCount.low) && $util.isInteger(message.operationCount.high)))\n                return \"operationCount: integer|Long expected\";\n        if (message.tracesPreAggregated != null && message.hasOwnProperty(\"tracesPreAggregated\"))\n            if (typeof message.tracesPreAggregated !== \"boolean\")\n                return \"tracesPreAggregated: boolean expected\";\n        return null;\n    };\n\n    /**\n     * Creates a plain object from a Report message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Report\n     * @static\n     * @param {Report} message Report\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Report.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        let object = {};\n        if (options.objects || options.defaults)\n            object.tracesPerQuery = {};\n        if (options.defaults) {\n            object.header = null;\n            object.endTime = null;\n            object.operationCount = 0;\n            object.tracesPreAggregated = false;\n        }\n        if (message.header != null && message.hasOwnProperty(\"header\"))\n            object.header = $root.ReportHeader.toObject(message.header, options);\n        if (message.endTime != null && message.hasOwnProperty(\"endTime\"))\n            object.endTime = $root.google.protobuf.Timestamp.toObject(message.endTime, options);\n        let keys2;\n        if (message.tracesPerQuery && (keys2 = Object.keys(message.tracesPerQuery)).length) {\n            object.tracesPerQuery = {};\n            for (let j = 0; j < keys2.length; ++j)\n                object.tracesPerQuery[keys2[j]] = $root.TracesAndStats.toObject(message.tracesPerQuery[keys2[j]], options);\n        }\n        if (message.operationCount != null && message.hasOwnProperty(\"operationCount\"))\n            if (typeof message.operationCount === \"number\")\n                object.operationCount = options.longs === String ? String(message.operationCount) : message.operationCount;\n            else\n                object.operationCount = options.longs === String ? $util.Long.prototype.toString.call(message.operationCount) : options.longs === Number ? new $util.LongBits(message.operationCount.low >>> 0, message.operationCount.high >>> 0).toNumber(true) : message.operationCount;\n        if (message.tracesPreAggregated != null && message.hasOwnProperty(\"tracesPreAggregated\"))\n            object.tracesPreAggregated = message.tracesPreAggregated;\n        return object;\n    };\n\n    /**\n     * Converts this Report to JSON.\n     * @function toJSON\n     * @memberof Report\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Report.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Report;\n})();\n\nexport const ContextualizedStats = $root.ContextualizedStats = (() => {\n\n    /**\n     * Properties of a ContextualizedStats.\n     * @exports IContextualizedStats\n     * @interface IContextualizedStats\n     * @property {IStatsContext|null} [context] ContextualizedStats context\n     * @property {IQueryLatencyStats|null} [queryLatencyStats] ContextualizedStats queryLatencyStats\n     * @property {Object.<string,ITypeStat>|null} [perTypeStat] ContextualizedStats perTypeStat\n     */\n\n    /**\n     * Constructs a new ContextualizedStats.\n     * @exports ContextualizedStats\n     * @classdesc Represents a ContextualizedStats.\n     * @implements IContextualizedStats\n     * @constructor\n     * @param {IContextualizedStats=} [properties] Properties to set\n     */\n    function ContextualizedStats(properties) {\n        this.perTypeStat = {};\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ContextualizedStats context.\n     * @member {IStatsContext|null|undefined} context\n     * @memberof ContextualizedStats\n     * @instance\n     */\n    ContextualizedStats.prototype.context = null;\n\n    /**\n     * ContextualizedStats queryLatencyStats.\n     * @member {IQueryLatencyStats|null|undefined} queryLatencyStats\n     * @memberof ContextualizedStats\n     * @instance\n     */\n    ContextualizedStats.prototype.queryLatencyStats = null;\n\n    /**\n     * ContextualizedStats perTypeStat.\n     * @member {Object.<string,ITypeStat>} perTypeStat\n     * @memberof ContextualizedStats\n     * @instance\n     */\n    ContextualizedStats.prototype.perTypeStat = $util.emptyObject;\n\n    /**\n     * Creates a new ContextualizedStats instance using the specified properties.\n     * @function create\n     * @memberof ContextualizedStats\n     * @static\n     * @param {IContextualizedStats=} [properties] Properties to set\n     * @returns {ContextualizedStats} ContextualizedStats instance\n     */\n    ContextualizedStats.create = function create(properties) {\n        return new ContextualizedStats(properties);\n    };\n\n    /**\n     * Encodes the specified ContextualizedStats message. Does not implicitly {@link ContextualizedStats.verify|verify} messages.\n     * @function encode\n     * @memberof ContextualizedStats\n     * @static\n     * @param {IContextualizedStats} message ContextualizedStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ContextualizedStats.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.context != null && Object.hasOwnProperty.call(message, \"context\"))\n            $root.StatsContext.encode(message.context, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.queryLatencyStats != null && Object.hasOwnProperty.call(message, \"queryLatencyStats\"))\n            $root.QueryLatencyStats.encode(message.queryLatencyStats, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        if (message.perTypeStat != null && Object.hasOwnProperty.call(message, \"perTypeStat\"))\n            for (let keys = Object.keys(message.perTypeStat), i = 0; i < keys.length; ++i) {\n                writer.uint32(/* id 3, wireType 2 =*/26).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);\n                $root.TypeStat.encode(message.perTypeStat[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n            }\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ContextualizedStats message, length delimited. Does not implicitly {@link ContextualizedStats.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ContextualizedStats\n     * @static\n     * @param {IContextualizedStats} message ContextualizedStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ContextualizedStats.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ContextualizedStats message from the specified reader or buffer.\n     * @function decode\n     * @memberof ContextualizedStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ContextualizedStats} ContextualizedStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ContextualizedStats.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ContextualizedStats(), key;\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.context = $root.StatsContext.decode(reader, reader.uint32());\n                break;\n            case 2:\n                message.queryLatencyStats = $root.QueryLatencyStats.decode(reader, reader.uint32());\n                break;\n            case 3:\n                reader.skip().pos++;\n                if (message.perTypeStat === $util.emptyObject)\n                    message.perTypeStat = {};\n                key = reader.string();\n                reader.pos++;\n                message.perTypeStat[key] = $root.TypeStat.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ContextualizedStats message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ContextualizedStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ContextualizedStats} ContextualizedStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ContextualizedStats.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ContextualizedStats message.\n     * @function verify\n     * @memberof ContextualizedStats\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ContextualizedStats.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.context != null && message.hasOwnProperty(\"context\")) {\n            let error = $root.StatsContext.verify(message.context);\n            if (error)\n                return \"context.\" + error;\n        }\n        if (message.queryLatencyStats != null && message.hasOwnProperty(\"queryLatencyStats\")) {\n            let error = $root.QueryLatencyStats.verify(message.queryLatencyStats);\n            if (error)\n                return \"queryLatencyStats.\" + error;\n        }\n        if (message.perTypeStat != null && message.hasOwnProperty(\"perTypeStat\")) {\n            if (!$util.isObject(message.perTypeStat))\n                return \"perTypeStat: object expected\";\n            let key = Object.keys(message.perTypeStat);\n            for (let i = 0; i < key.length; ++i) {\n                let error = $root.TypeStat.verify(message.perTypeStat[key[i]]);\n                if (error)\n                    return \"perTypeStat.\" + error;\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Creates a plain object from a ContextualizedStats message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ContextualizedStats\n     * @static\n     * @param {ContextualizedStats} message ContextualizedStats\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ContextualizedStats.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        let object = {};\n        if (options.objects || options.defaults)\n            object.perTypeStat = {};\n        if (options.defaults) {\n            object.context = null;\n            object.queryLatencyStats = null;\n        }\n        if (message.context != null && message.hasOwnProperty(\"context\"))\n            object.context = $root.StatsContext.toObject(message.context, options);\n        if (message.queryLatencyStats != null && message.hasOwnProperty(\"queryLatencyStats\"))\n            object.queryLatencyStats = $root.QueryLatencyStats.toObject(message.queryLatencyStats, options);\n        let keys2;\n        if (message.perTypeStat && (keys2 = Object.keys(message.perTypeStat)).length) {\n            object.perTypeStat = {};\n            for (let j = 0; j < keys2.length; ++j)\n                object.perTypeStat[keys2[j]] = $root.TypeStat.toObject(message.perTypeStat[keys2[j]], options);\n        }\n        return object;\n    };\n\n    /**\n     * Converts this ContextualizedStats to JSON.\n     * @function toJSON\n     * @memberof ContextualizedStats\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ContextualizedStats.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ContextualizedStats;\n})();\n\nexport const TracesAndStats = $root.TracesAndStats = (() => {\n\n    /**\n     * Properties of a TracesAndStats.\n     * @exports ITracesAndStats\n     * @interface ITracesAndStats\n     * @property {Array.<ITrace|Uint8Array>|null} [trace] TracesAndStats trace\n     * @property {$protobuf.ToArray.<IContextualizedStats>|Array.<IContextualizedStats>|null} [statsWithContext] TracesAndStats statsWithContext\n     * @property {Object.<string,IReferencedFieldsForType>|null} [referencedFieldsByType] TracesAndStats referencedFieldsByType\n     * @property {Array.<ITrace|Uint8Array>|null} [internalTracesContributingToStats] TracesAndStats internalTracesContributingToStats\n     */\n\n    /**\n     * Constructs a new TracesAndStats.\n     * @exports TracesAndStats\n     * @classdesc Represents a TracesAndStats.\n     * @implements ITracesAndStats\n     * @constructor\n     * @param {ITracesAndStats=} [properties] Properties to set\n     */\n    function TracesAndStats(properties) {\n        this.trace = [];\n        this.statsWithContext = [];\n        this.referencedFieldsByType = {};\n        this.internalTracesContributingToStats = [];\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * TracesAndStats trace.\n     * @member {Array.<ITrace|Uint8Array>} trace\n     * @memberof TracesAndStats\n     * @instance\n     */\n    TracesAndStats.prototype.trace = $util.emptyArray;\n\n    /**\n     * TracesAndStats statsWithContext.\n     * @member {Array.<IContextualizedStats>} statsWithContext\n     * @memberof TracesAndStats\n     * @instance\n     */\n    TracesAndStats.prototype.statsWithContext = $util.emptyArray;\n\n    /**\n     * TracesAndStats referencedFieldsByType.\n     * @member {Object.<string,IReferencedFieldsForType>} referencedFieldsByType\n     * @memberof TracesAndStats\n     * @instance\n     */\n    TracesAndStats.prototype.referencedFieldsByType = $util.emptyObject;\n\n    /**\n     * TracesAndStats internalTracesContributingToStats.\n     * @member {Array.<ITrace|Uint8Array>} internalTracesContributingToStats\n     * @memberof TracesAndStats\n     * @instance\n     */\n    TracesAndStats.prototype.internalTracesContributingToStats = $util.emptyArray;\n\n    /**\n     * Creates a new TracesAndStats instance using the specified properties.\n     * @function create\n     * @memberof TracesAndStats\n     * @static\n     * @param {ITracesAndStats=} [properties] Properties to set\n     * @returns {TracesAndStats} TracesAndStats instance\n     */\n    TracesAndStats.create = function create(properties) {\n        return new TracesAndStats(properties);\n    };\n\n    /**\n     * Encodes the specified TracesAndStats message. Does not implicitly {@link TracesAndStats.verify|verify} messages.\n     * @function encode\n     * @memberof TracesAndStats\n     * @static\n     * @param {ITracesAndStats} message TracesAndStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    TracesAndStats.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.trace != null && message.trace.length)\n            for (let i = 0; i < message.trace.length; ++i)\n                if (message.trace[i] instanceof Uint8Array) {\n                    writer.uint32(/* id 1, wireType 2 =*/10);\n                    writer.bytes(message.trace[i]);\n                } else\n                    $root.Trace.encode(message.trace[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        let array2;\n        if (message.statsWithContext != null && message.statsWithContext.toArray)\n            array2 = message.statsWithContext.toArray();\n        else\n            array2 = message.statsWithContext;\n        if (array2 != null && array2.length)\n            for (let i = 0; i < array2.length; ++i)\n                $root.ContextualizedStats.encode(array2[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        if (message.internalTracesContributingToStats != null && message.internalTracesContributingToStats.length)\n            for (let i = 0; i < message.internalTracesContributingToStats.length; ++i)\n                if (message.internalTracesContributingToStats[i] instanceof Uint8Array) {\n                    writer.uint32(/* id 3, wireType 2 =*/26);\n                    writer.bytes(message.internalTracesContributingToStats[i]);\n                } else\n                    $root.Trace.encode(message.internalTracesContributingToStats[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n        if (message.referencedFieldsByType != null && Object.hasOwnProperty.call(message, \"referencedFieldsByType\"))\n            for (let keys = Object.keys(message.referencedFieldsByType), i = 0; i < keys.length; ++i) {\n                writer.uint32(/* id 4, wireType 2 =*/34).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);\n                $root.ReferencedFieldsForType.encode(message.referencedFieldsByType[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n            }\n        return writer;\n    };\n\n    /**\n     * Encodes the specified TracesAndStats message, length delimited. Does not implicitly {@link TracesAndStats.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof TracesAndStats\n     * @static\n     * @param {ITracesAndStats} message TracesAndStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    TracesAndStats.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a TracesAndStats message from the specified reader or buffer.\n     * @function decode\n     * @memberof TracesAndStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {TracesAndStats} TracesAndStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    TracesAndStats.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.TracesAndStats(), key;\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                if (!(message.trace && message.trace.length))\n                    message.trace = [];\n                message.trace.push($root.Trace.decode(reader, reader.uint32()));\n                break;\n            case 2:\n                if (!(message.statsWithContext && message.statsWithContext.length))\n                    message.statsWithContext = [];\n                message.statsWithContext.push($root.ContextualizedStats.decode(reader, reader.uint32()));\n                break;\n            case 4:\n                reader.skip().pos++;\n                if (message.referencedFieldsByType === $util.emptyObject)\n                    message.referencedFieldsByType = {};\n                key = reader.string();\n                reader.pos++;\n                message.referencedFieldsByType[key] = $root.ReferencedFieldsForType.decode(reader, reader.uint32());\n                break;\n            case 3:\n                if (!(message.internalTracesContributingToStats && message.internalTracesContributingToStats.length))\n                    message.internalTracesContributingToStats = [];\n                message.internalTracesContributingToStats.push($root.Trace.decode(reader, reader.uint32()));\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a TracesAndStats message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof TracesAndStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {TracesAndStats} TracesAndStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    TracesAndStats.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a TracesAndStats message.\n     * @function verify\n     * @memberof TracesAndStats\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    TracesAndStats.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.trace != null && message.hasOwnProperty(\"trace\")) {\n            if (!Array.isArray(message.trace))\n                return \"trace: array expected\";\n            for (let i = 0; i < message.trace.length; ++i)\n                if (!(message.trace[i] instanceof Uint8Array)) {\n                    let error = $root.Trace.verify(message.trace[i]);\n                    if (error)\n                        return \"trace.\" + error;\n                }\n        }\n        if (message.statsWithContext != null && message.hasOwnProperty(\"statsWithContext\")) {\n            let array2;\n            if (message.statsWithContext != null && message.statsWithContext.toArray)\n                array2 = message.statsWithContext.toArray();\n            else\n                array2 = message.statsWithContext;\n            if (!Array.isArray(array2))\n                return \"statsWithContext: array expected\";\n            for (let i = 0; i < array2.length; ++i) {\n                let error = $root.ContextualizedStats.verify(array2[i]);\n                if (error)\n                    return \"statsWithContext.\" + error;\n            }\n        }\n        if (message.referencedFieldsByType != null && message.hasOwnProperty(\"referencedFieldsByType\")) {\n            if (!$util.isObject(message.referencedFieldsByType))\n                return \"referencedFieldsByType: object expected\";\n            let key = Object.keys(message.referencedFieldsByType);\n            for (let i = 0; i < key.length; ++i) {\n                let error = $root.ReferencedFieldsForType.verify(message.referencedFieldsByType[key[i]]);\n                if (error)\n                    return \"referencedFieldsByType.\" + error;\n            }\n        }\n        if (message.internalTracesContributingToStats != null && message.hasOwnProperty(\"internalTracesContributingToStats\")) {\n            if (!Array.isArray(message.internalTracesContributingToStats))\n                return \"internalTracesContributingToStats: array expected\";\n            for (let i = 0; i < message.internalTracesContributingToStats.length; ++i)\n                if (!(message.internalTracesContributingToStats[i] instanceof Uint8Array)) {\n                    let error = $root.Trace.verify(message.internalTracesContributingToStats[i]);\n                    if (error)\n                        return \"internalTracesContributingToStats.\" + error;\n                }\n        }\n        return null;\n    };\n\n    /**\n     * Creates a plain object from a TracesAndStats message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof TracesAndStats\n     * @static\n     * @param {TracesAndStats} message TracesAndStats\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    TracesAndStats.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        let object = {};\n        if (options.arrays || options.defaults) {\n            object.trace = [];\n            object.statsWithContext = [];\n            object.internalTracesContributingToStats = [];\n        }\n        if (options.objects || options.defaults)\n            object.referencedFieldsByType = {};\n        if (message.trace && message.trace.length) {\n            object.trace = [];\n            for (let j = 0; j < message.trace.length; ++j)\n                object.trace[j] = $root.Trace.toObject(message.trace[j], options);\n        }\n        if (message.statsWithContext && message.statsWithContext.length) {\n            object.statsWithContext = [];\n            for (let j = 0; j < message.statsWithContext.length; ++j)\n                object.statsWithContext[j] = $root.ContextualizedStats.toObject(message.statsWithContext[j], options);\n        }\n        if (message.internalTracesContributingToStats && message.internalTracesContributingToStats.length) {\n            object.internalTracesContributingToStats = [];\n            for (let j = 0; j < message.internalTracesContributingToStats.length; ++j)\n                object.internalTracesContributingToStats[j] = $root.Trace.toObject(message.internalTracesContributingToStats[j], options);\n        }\n        let keys2;\n        if (message.referencedFieldsByType && (keys2 = Object.keys(message.referencedFieldsByType)).length) {\n            object.referencedFieldsByType = {};\n            for (let j = 0; j < keys2.length; ++j)\n                object.referencedFieldsByType[keys2[j]] = $root.ReferencedFieldsForType.toObject(message.referencedFieldsByType[keys2[j]], options);\n        }\n        return object;\n    };\n\n    /**\n     * Converts this TracesAndStats to JSON.\n     * @function toJSON\n     * @memberof TracesAndStats\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    TracesAndStats.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return TracesAndStats;\n})();\n\nexport const google = $root.google = (() => {\n\n    /**\n     * Namespace google.\n     * @exports google\n     * @namespace\n     */\n    const google = {};\n\n    google.protobuf = (function() {\n\n        /**\n         * Namespace protobuf.\n         * @memberof google\n         * @namespace\n         */\n        const protobuf = {};\n\n        protobuf.Timestamp = (function() {\n\n            /**\n             * Properties of a Timestamp.\n             * @memberof google.protobuf\n             * @interface ITimestamp\n             * @property {number|null} [seconds] Timestamp seconds\n             * @property {number|null} [nanos] Timestamp nanos\n             */\n\n            /**\n             * Constructs a new Timestamp.\n             * @memberof google.protobuf\n             * @classdesc Represents a Timestamp.\n             * @implements ITimestamp\n             * @constructor\n             * @param {google.protobuf.ITimestamp=} [properties] Properties to set\n             */\n            function Timestamp(properties) {\n                if (properties)\n                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Timestamp seconds.\n             * @member {number} seconds\n             * @memberof google.protobuf.Timestamp\n             * @instance\n             */\n            Timestamp.prototype.seconds = 0;\n\n            /**\n             * Timestamp nanos.\n             * @member {number} nanos\n             * @memberof google.protobuf.Timestamp\n             * @instance\n             */\n            Timestamp.prototype.nanos = 0;\n\n            /**\n             * Creates a new Timestamp instance using the specified properties.\n             * @function create\n             * @memberof google.protobuf.Timestamp\n             * @static\n             * @param {google.protobuf.ITimestamp=} [properties] Properties to set\n             * @returns {google.protobuf.Timestamp} Timestamp instance\n             */\n            Timestamp.create = function create(properties) {\n                return new Timestamp(properties);\n            };\n\n            /**\n             * Encodes the specified Timestamp message. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.\n             * @function encode\n             * @memberof google.protobuf.Timestamp\n             * @static\n             * @param {google.protobuf.ITimestamp} message Timestamp message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Timestamp.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.seconds != null && Object.hasOwnProperty.call(message, \"seconds\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.seconds);\n                if (message.nanos != null && Object.hasOwnProperty.call(message, \"nanos\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nanos);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Timestamp message, length delimited. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof google.protobuf.Timestamp\n             * @static\n             * @param {google.protobuf.ITimestamp} message Timestamp message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Timestamp.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Timestamp message from the specified reader or buffer.\n             * @function decode\n             * @memberof google.protobuf.Timestamp\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {google.protobuf.Timestamp} Timestamp\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Timestamp.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Timestamp();\n                while (reader.pos < end) {\n                    let tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.seconds = reader.int64();\n                        break;\n                    case 2:\n                        message.nanos = reader.int32();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Timestamp message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof google.protobuf.Timestamp\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {google.protobuf.Timestamp} Timestamp\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Timestamp.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Timestamp message.\n             * @function verify\n             * @memberof google.protobuf.Timestamp\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Timestamp.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.seconds != null && message.hasOwnProperty(\"seconds\"))\n                    if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high)))\n                        return \"seconds: integer|Long expected\";\n                if (message.nanos != null && message.hasOwnProperty(\"nanos\"))\n                    if (!$util.isInteger(message.nanos))\n                        return \"nanos: integer expected\";\n                return null;\n            };\n\n            /**\n             * Creates a plain object from a Timestamp message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof google.protobuf.Timestamp\n             * @static\n             * @param {google.protobuf.Timestamp} message Timestamp\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Timestamp.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                let object = {};\n                if (options.defaults) {\n                    object.seconds = 0;\n                    object.nanos = 0;\n                }\n                if (message.seconds != null && message.hasOwnProperty(\"seconds\"))\n                    if (typeof message.seconds === \"number\")\n                        object.seconds = options.longs === String ? String(message.seconds) : message.seconds;\n                    else\n                        object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;\n                if (message.nanos != null && message.hasOwnProperty(\"nanos\"))\n                    object.nanos = message.nanos;\n                return object;\n            };\n\n            /**\n             * Converts this Timestamp to JSON.\n             * @function toJSON\n             * @memberof google.protobuf.Timestamp\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Timestamp.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Timestamp;\n        })();\n\n        return protobuf;\n    })();\n\n    return google;\n})();\n\nexport { $root as default };\n"],"names":["module","exports","protobuf","configure","Reader","_configure","BufferReader","util","build","Writer","BufferWriter","rpc","roots","LongBits","utf8","indexOutOfRange","reader","writeLength","RangeError","pos","len","buffer","buf","length","create_array","Uint8Array","Array","isArray","Error","readLongVarint","bits","i","lo","hi","readFixed32_end","end","readFixed64","create","Buffer","isBuffer","prototype","_slice","subarray","slice","uint32","value","int32","sint32","bool","fixed32","sfixed32","float","readFloatLE","double","readDoubleLE","bytes","start","constructor","call","string","read","skip","skipType","wireType","BufferReader_","fn","Long","merge","int64","uint64","sint64","zzDecode","fixed64","sfixed64","Object","utf8Slice","Math","min","Service","rpcImpl","requestDelimited","responseDelimited","TypeError","EventEmitter","Boolean","rpcCall","method","requestCtor","responseCtor","request","callback","self","asPromise","setTimeout","finish","err","response","emit","endedByRPC","off","zero","toNumber","zzEncode","zeroHash","fromNumber","sign","from","isString","parseInt","fromString","low","high","unsigned","toLong","charCodeAt","String","fromHash","hash","toHash","fromCharCode","mask","part0","part1","part2","dst","src","ifNotSet","keys","undefined","newError","name","CustomError","message","properties","defineProperty","get","captureStackTrace","stack","toString","base64","inquire","pool","global","window","emptyArray","freeze","emptyObject","isNode","process","versions","node","isInteger","Number","isFinite","floor","isObject","isset","isSet","obj","prop","hasOwnProperty","utf8Write","e","_Buffer_from","_Buffer_allocUnsafe","newBuffer","sizeOrArray","env","ENABLE_LONG","dcodeIO","key2Re","key32Re","key64Re","longToHash","longFromHash","fromBits","lcFirst","str","charAt","toLowerCase","substring","ProtocolError","oneOfGetter","fieldNames","fieldMap","oneOfSetter","toJSONOptions","longs","enums","json","encoding","allocUnsafe","size","Op","val","next","noop","State","writer","head","tail","states","writeByte","writeVarint32","VarintOp","writeVarint64","writeFixed32","alloc","_push","writeFloatLE","writeDoubleLE","writeBytes","set","decode","write","fork","reset","ldelim","BufferWriter_","writeBytesBuffer","copy","writeStringBuffer","byteLength","ctx","params","arguments","offset","index","pending","Promise","resolve","reject","apply","p","n","ceil","b64","s64","encode","parts","chunk","t","j","b","push","join","invalidEncoding","c","test","_listeners","on","evt","listeners","splice","args","factory","Float32Array","f32","f8b","le","writeFloat_f32_cpy","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","writeFloatBE","readFloatBE","writeFloat_ieee754","writeUint","isNaN","round","exponent","log","LN2","mantissa","pow","readFloat_ieee754","readUint","uint","NaN","bind","writeUintLE","writeUintBE","readUintLE","readUintBE","Float64Array","f64","writeDouble_f64_cpy","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","writeDoubleBE","readDoubleBE","writeDouble_ieee754","off0","off1","readDouble_ieee754","moduleName","mod","eval","replace","SIZE","MAX","slab","c1","c2","schemaIsSubgraph","schema","serviceType","getType","sdlField","getFields","sdl","sdlFieldType","type","ofType","internalError","TraceTreeBuilder","options","rootNode","trace","root","fieldExecutionWeight","stopped","nodes","Map","responsePathAsString","sendErrors","maskedBy","transformError","extensions","transform","startTiming","startHrTime","startTime","dateToProtoTimestamp","Date","hrtime","stopTiming","durationNs","durationHrTimeToNanos","endTime","willResolveField","info","path","newNode","returnType","parentType","key","fieldName","originalFieldName","didEncounterErrors","errors","forEach","serviceName","errorForReporting","transformAndNormalizeError","addProtobufError","errorToProtobufError","error","specificNode","responsePath","responsePathFromArray","id","responseName","parentNode","ensureParentNode","child","parentPath","prev","clonedError","assign","getPrototypeOf","rewrittenError","source","positions","originalError","res","nodePtr","find","typename","location","locations","map","line","column","JSON","stringify","date","totalMillis","millis","seconds","nanos","$Reader","$Writer","$util","$root","Trace","isIncomplete","signature","unexecutedOperationBody","unexecutedOperationName","details","clientName","clientVersion","http","cachePolicy","queryPlan","fullQueryCacheHit","persistedQueryHit","persistedQueryRegister","registeredOperation","forbiddenOperation","google","Timestamp","Details","HTTP","Node","CachePolicy","QueryPlanNode","encodeDelimited","tag","decodeDelimited","verify","toObject","object","defaults","toJSON","scope","maxAgeNs","Scope","valuesById","values","variablesJson","operationName","keys2","objects","timeNs","Location","arrays","requestHeaders","responseHeaders","statusCode","Values","Method","$oneOfFields","oneofs","sequence","parallel","fetch","flatten","defer","condition","SequenceNode","ParallelNode","FetchNode","FlattenNode","DeferNode","ConditionNode","traceParsingFailed","sentTimeOffset","sentTime","receivedTime","ResponsePathElement","deferred","primary","DeferNodePrimary","DeferredNode","ifClause","elseClause","depends","label","DeferredNodeDepends","deferLabel","ReportHeader","graphRef","hostname","agentVersion","serviceVersion","runtimeVersion","uname","executableSchemaId","PathErrorStats","children","errorsCount","requestsWithErrorsCount","QueryLatencyStats","latencyCount","cacheLatencyCount","publicCacheTtlCount","privateCacheTtlCount","requestCount","cacheHits","persistedQueryHits","persistedQueryMisses","rootErrorStats","registeredOperationCount","forbiddenOperationCount","requestsWithoutFieldInstrumentation","array13","array14","array15","array16","toArray","end2","StatsContext","ContextualizedQueryLatencyStats","queryLatencyStats","context","ContextualizedTypeStats","perTypeStat","TypeStat","FieldStat","observedExecutionCount","estimatedExecutionCount","array9","perFieldStat","ReferencedFieldsForType","isInterface","Report","tracesPerQuery","header","operationCount","tracesPreAggregated","TracesAndStats","ContextualizedStats","statsWithContext","referencedFieldsByType","internalTracesContributingToStats","array2"],"mappings":"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"}