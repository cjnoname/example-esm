{"version":3,"file":"788.mjs","sources":["webpack://example-esm/./node_modules/@apollo/server/dist/esm/plugin/cacheControl/index.js"],"sourcesContent":["import { getNamedType, isCompositeType, isInterfaceType, isObjectType, responsePathAsArray, } from 'graphql';\nimport { newCachePolicy } from '../../cachePolicy.js';\nimport { internalPlugin } from '../../internalPlugin.js';\nimport LRUCache from 'lru-cache';\nexport function ApolloServerPluginCacheControl(options = Object.create(null)) {\n    let typeAnnotationCache;\n    let fieldAnnotationCache;\n    return internalPlugin({\n        __internal_plugin_id__: 'CacheControl',\n        __is_disabled_plugin__: false,\n        async serverWillStart({ schema }) {\n            typeAnnotationCache = new LRUCache({\n                max: Object.values(schema.getTypeMap()).filter(isCompositeType)\n                    .length,\n            });\n            fieldAnnotationCache = new LRUCache({\n                max: Object.values(schema.getTypeMap())\n                    .filter(isObjectType)\n                    .flatMap((t) => Object.values(t.getFields())).length +\n                    Object.values(schema.getTypeMap())\n                        .filter(isInterfaceType)\n                        .flatMap((t) => Object.values(t.getFields())).length,\n            });\n            return undefined;\n        },\n        async requestDidStart(requestContext) {\n            function memoizedCacheAnnotationFromType(t) {\n                const existing = typeAnnotationCache.get(t);\n                if (existing) {\n                    return existing;\n                }\n                const annotation = cacheAnnotationFromType(t);\n                typeAnnotationCache.set(t, annotation);\n                return annotation;\n            }\n            function memoizedCacheAnnotationFromField(field) {\n                const existing = fieldAnnotationCache.get(field);\n                if (existing) {\n                    return existing;\n                }\n                const annotation = cacheAnnotationFromField(field);\n                fieldAnnotationCache.set(field, annotation);\n                return annotation;\n            }\n            const defaultMaxAge = options.defaultMaxAge ?? 0;\n            const calculateHttpHeaders = options.calculateHttpHeaders ?? true;\n            const { __testing__cacheHints } = options;\n            return {\n                async executionDidStart() {\n                    if (isRestricted(requestContext.overallCachePolicy)) {\n                        const fakeFieldPolicy = newCachePolicy();\n                        return {\n                            willResolveField({ info }) {\n                                info.cacheControl = {\n                                    setCacheHint: (dynamicHint) => {\n                                        fakeFieldPolicy.replace(dynamicHint);\n                                    },\n                                    cacheHint: fakeFieldPolicy,\n                                    cacheHintFromType: memoizedCacheAnnotationFromType,\n                                };\n                            },\n                        };\n                    }\n                    return {\n                        willResolveField({ info }) {\n                            const fieldPolicy = newCachePolicy();\n                            let inheritMaxAge = false;\n                            const targetType = getNamedType(info.returnType);\n                            if (isCompositeType(targetType)) {\n                                const typeAnnotation = memoizedCacheAnnotationFromType(targetType);\n                                fieldPolicy.replace(typeAnnotation);\n                                inheritMaxAge = !!typeAnnotation.inheritMaxAge;\n                            }\n                            const fieldAnnotation = memoizedCacheAnnotationFromField(info.parentType.getFields()[info.fieldName]);\n                            if (fieldAnnotation.inheritMaxAge &&\n                                fieldPolicy.maxAge === undefined) {\n                                inheritMaxAge = true;\n                                if (fieldAnnotation.scope) {\n                                    fieldPolicy.replace({ scope: fieldAnnotation.scope });\n                                }\n                            }\n                            else {\n                                fieldPolicy.replace(fieldAnnotation);\n                            }\n                            info.cacheControl = {\n                                setCacheHint: (dynamicHint) => {\n                                    fieldPolicy.replace(dynamicHint);\n                                },\n                                cacheHint: fieldPolicy,\n                                cacheHintFromType: memoizedCacheAnnotationFromType,\n                            };\n                            return () => {\n                                if (fieldPolicy.maxAge === undefined &&\n                                    ((isCompositeType(targetType) && !inheritMaxAge) ||\n                                        !info.path.prev)) {\n                                    fieldPolicy.restrict({ maxAge: defaultMaxAge });\n                                }\n                                if (__testing__cacheHints && isRestricted(fieldPolicy)) {\n                                    const path = responsePathAsArray(info.path).join('.');\n                                    if (__testing__cacheHints.has(path)) {\n                                        throw Error(\"shouldn't happen: addHint should only be called once per path\");\n                                    }\n                                    __testing__cacheHints.set(path, {\n                                        maxAge: fieldPolicy.maxAge,\n                                        scope: fieldPolicy.scope,\n                                    });\n                                }\n                                requestContext.overallCachePolicy.restrict(fieldPolicy);\n                            };\n                        },\n                    };\n                },\n                async willSendResponse(requestContext) {\n                    if (!calculateHttpHeaders) {\n                        return;\n                    }\n                    const { response, overallCachePolicy } = requestContext;\n                    const existingCacheControlHeader = parseExistingCacheControlHeader(response.http.headers.get('cache-control'));\n                    if (existingCacheControlHeader.kind === 'unparsable') {\n                        return;\n                    }\n                    const cachePolicy = newCachePolicy();\n                    cachePolicy.replace(overallCachePolicy);\n                    if (existingCacheControlHeader.kind === 'parsable-and-cacheable') {\n                        cachePolicy.restrict(existingCacheControlHeader.hint);\n                    }\n                    const policyIfCacheable = cachePolicy.policyIfCacheable();\n                    if (policyIfCacheable &&\n                        existingCacheControlHeader.kind !== 'uncacheable' &&\n                        response.body.kind === 'single' &&\n                        !response.body.singleResult.errors) {\n                        response.http.headers.set('cache-control', `max-age=${policyIfCacheable.maxAge}, ${policyIfCacheable.scope.toLowerCase()}`);\n                    }\n                    else if (calculateHttpHeaders !== 'if-cacheable') {\n                        response.http.headers.set('cache-control', CACHE_CONTROL_HEADER_UNCACHEABLE);\n                    }\n                },\n            };\n        },\n    });\n}\nconst CACHE_CONTROL_HEADER_CACHEABLE_REGEXP = /^max-age=(\\d+), (public|private)$/;\nconst CACHE_CONTROL_HEADER_UNCACHEABLE = 'no-store';\nfunction parseExistingCacheControlHeader(header) {\n    if (!header) {\n        return { kind: 'no-header' };\n    }\n    if (header === CACHE_CONTROL_HEADER_UNCACHEABLE) {\n        return { kind: 'uncacheable' };\n    }\n    const match = CACHE_CONTROL_HEADER_CACHEABLE_REGEXP.exec(header);\n    if (!match) {\n        return { kind: 'unparsable' };\n    }\n    return {\n        kind: 'parsable-and-cacheable',\n        hint: {\n            maxAge: +match[1],\n            scope: match[2] === 'public' ? 'PUBLIC' : 'PRIVATE',\n        },\n    };\n}\nfunction cacheAnnotationFromDirectives(directives) {\n    if (!directives)\n        return undefined;\n    const cacheControlDirective = directives.find((directive) => directive.name.value === 'cacheControl');\n    if (!cacheControlDirective)\n        return undefined;\n    if (!cacheControlDirective.arguments)\n        return undefined;\n    const maxAgeArgument = cacheControlDirective.arguments.find((argument) => argument.name.value === 'maxAge');\n    const scopeArgument = cacheControlDirective.arguments.find((argument) => argument.name.value === 'scope');\n    const inheritMaxAgeArgument = cacheControlDirective.arguments.find((argument) => argument.name.value === 'inheritMaxAge');\n    const scopeString = scopeArgument?.value?.kind === 'EnumValue'\n        ? scopeArgument.value.value\n        : undefined;\n    const scope = scopeString === 'PUBLIC' || scopeString === 'PRIVATE'\n        ? scopeString\n        : undefined;\n    if (inheritMaxAgeArgument?.value?.kind === 'BooleanValue' &&\n        inheritMaxAgeArgument.value.value) {\n        return { inheritMaxAge: true, scope };\n    }\n    return {\n        maxAge: maxAgeArgument?.value?.kind === 'IntValue'\n            ? parseInt(maxAgeArgument.value.value)\n            : undefined,\n        scope,\n    };\n}\nfunction cacheAnnotationFromType(t) {\n    if (t.astNode) {\n        const hint = cacheAnnotationFromDirectives(t.astNode.directives);\n        if (hint) {\n            return hint;\n        }\n    }\n    if (t.extensionASTNodes) {\n        for (const node of t.extensionASTNodes) {\n            const hint = cacheAnnotationFromDirectives(node.directives);\n            if (hint) {\n                return hint;\n            }\n        }\n    }\n    return {};\n}\nfunction cacheAnnotationFromField(field) {\n    if (field.astNode) {\n        const hint = cacheAnnotationFromDirectives(field.astNode.directives);\n        if (hint) {\n            return hint;\n        }\n    }\n    return {};\n}\nfunction isRestricted(hint) {\n    return hint.maxAge !== undefined || hint.scope !== undefined;\n}\n//# sourceMappingURL=index.js.map"],"names":["ApolloServerPluginCacheControl","options","Object","create","typeAnnotationCache","fieldAnnotationCache","__internal_plugin_id__","__is_disabled_plugin__","serverWillStart","schema","max","values","getTypeMap","filter","length","flatMap","t","getFields","requestDidStart","requestContext","memoizedCacheAnnotationFromType","existing","get","annotation","cacheAnnotationFromType","astNode","hint","cacheAnnotationFromDirectives","directives","extensionASTNodes","node","set","defaultMaxAge","calculateHttpHeaders","__testing__cacheHints","executionDidStart","isRestricted","overallCachePolicy","fakeFieldPolicy","willResolveField","info","cacheControl","setCacheHint","dynamicHint","replace","cacheHint","cacheHintFromType","fieldPolicy","inheritMaxAge","targetType","returnType","typeAnnotation","fieldAnnotation","memoizedCacheAnnotationFromField","field","cacheAnnotationFromField","parentType","fieldName","undefined","maxAge","scope","path","prev","restrict","join","has","Error","willSendResponse","response","existingCacheControlHeader","parseExistingCacheControlHeader","header","kind","CACHE_CONTROL_HEADER_UNCACHEABLE","match","CACHE_CONTROL_HEADER_CACHEABLE_REGEXP","exec","http","headers","cachePolicy","policyIfCacheable","body","singleResult","errors","toLowerCase","cacheControlDirective","find","directive","name","value","arguments","maxAgeArgument","argument","scopeArgument","inheritMaxAgeArgument","scopeString","parseInt"],"mappings":"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"}