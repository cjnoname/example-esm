{"version":3,"file":"921.mjs","sources":["webpack://example-esm/./node_modules/@apollo/server/dist/esm/plugin/schemaIsSubgraph.js","webpack://example-esm/./node_modules/@apollo/server/dist/esm/plugin/schemaReporting/schemaReporter.js","webpack://example-esm/./node_modules/@apollo/server/dist/esm/plugin/schemaReporting/index.js"],"sourcesContent":["import { isObjectType, isScalarType, isNonNullType, } from 'graphql';\nexport function schemaIsSubgraph(schema) {\n    const serviceType = schema.getType('_Service');\n    if (!isObjectType(serviceType)) {\n        return false;\n    }\n    const sdlField = serviceType.getFields().sdl;\n    if (!sdlField) {\n        return false;\n    }\n    let sdlFieldType = sdlField.type;\n    if (isNonNullType(sdlFieldType)) {\n        sdlFieldType = sdlFieldType.ofType;\n    }\n    if (!isScalarType(sdlFieldType)) {\n        return false;\n    }\n    return sdlFieldType.name == 'String';\n}\n//# sourceMappingURL=schemaIsSubgraph.js.map","import fetch from 'node-fetch';\nimport { packageVersion } from '../../generated/packageVersion.js';\nexport const schemaReportGql = `#graphql\n  mutation SchemaReport($report: SchemaReport!, $coreSchema: String) {\n    reportSchema(report: $report, coreSchema: $coreSchema) {\n      __typename\n      ... on ReportSchemaError {\n        message\n        code\n      }\n      ... on ReportSchemaResponse {\n        inSeconds\n        withCoreSchema\n      }\n    }\n  }\n`;\nexport class SchemaReporter {\n    constructor(options) {\n        this.headers = {\n            'Content-Type': 'application/json',\n            'x-api-key': options.apiKey,\n            'apollographql-client-name': 'ApolloServerPluginSchemaReporting',\n            'apollographql-client-version': packageVersion,\n        };\n        this.endpointUrl =\n            options.endpointUrl ||\n                'https://schema-reporting.api.apollographql.com/api/graphql';\n        this.schemaReport = options.schemaReport;\n        this.coreSchema = options.coreSchema;\n        this.isStopped = false;\n        this.logger = options.logger;\n        this.initialReportingDelayInMs = options.initialReportingDelayInMs;\n        this.fallbackReportingDelayInMs = options.fallbackReportingDelayInMs;\n        this.fetcher = options.fetcher ?? fetch;\n    }\n    stopped() {\n        return this.isStopped;\n    }\n    start() {\n        this.pollTimer = setTimeout(() => this.sendOneReportAndScheduleNext(false), this.initialReportingDelayInMs);\n    }\n    stop() {\n        this.isStopped = true;\n        if (this.pollTimer) {\n            clearTimeout(this.pollTimer);\n            this.pollTimer = undefined;\n        }\n    }\n    async sendOneReportAndScheduleNext(sendNextWithCoreSchema) {\n        this.pollTimer = undefined;\n        if (this.stopped())\n            return;\n        try {\n            const result = await this.reportSchema(sendNextWithCoreSchema);\n            if (!result) {\n                return;\n            }\n            if (!this.stopped()) {\n                this.pollTimer = setTimeout(() => this.sendOneReportAndScheduleNext(result.withCoreSchema), result.inSeconds * 1000);\n            }\n            return;\n        }\n        catch (error) {\n            this.logger.error(`Error reporting server info to Apollo during schema reporting: ${error}`);\n            if (!this.stopped()) {\n                this.pollTimer = setTimeout(() => this.sendOneReportAndScheduleNext(false), this.fallbackReportingDelayInMs);\n            }\n        }\n    }\n    async reportSchema(withCoreSchema) {\n        const { data, errors } = await this.apolloQuery({\n            report: this.schemaReport,\n            coreSchema: withCoreSchema ? this.coreSchema : null,\n        });\n        if (errors) {\n            throw new Error(errors.map((x) => x.message).join('\\n'));\n        }\n        function msgForUnexpectedResponse(data) {\n            return [\n                'Unexpected response shape from Apollo when',\n                'reporting schema. If this continues, please reach',\n                'out to support@apollographql.com.',\n                'Received response:',\n                JSON.stringify(data),\n            ].join(' ');\n        }\n        if (!data || !data.reportSchema) {\n            throw new Error(msgForUnexpectedResponse(data));\n        }\n        if (data.reportSchema.__typename === 'ReportSchemaResponse') {\n            return data.reportSchema;\n        }\n        else if (data.reportSchema.__typename === 'ReportSchemaError') {\n            this.logger.error([\n                'Received input validation error from Apollo:',\n                data.reportSchema.message,\n                'Stopping reporting. Please fix the input errors.',\n            ].join(' '));\n            this.stop();\n            return null;\n        }\n        throw new Error(msgForUnexpectedResponse(data));\n    }\n    async apolloQuery(variables) {\n        const request = {\n            query: schemaReportGql,\n            variables,\n        };\n        const httpResponse = await this.fetcher(this.endpointUrl, {\n            method: 'POST',\n            headers: this.headers,\n            body: JSON.stringify(request),\n        });\n        if (!httpResponse.ok) {\n            throw new Error([\n                `An unexpected HTTP status code (${httpResponse.status}) was`,\n                'encountered during schema reporting.',\n            ].join(' '));\n        }\n        try {\n            return await httpResponse.json();\n        }\n        catch (error) {\n            throw new Error([\n                \"Couldn't report schema to Apollo.\",\n                'Parsing response as JSON failed.',\n                'If this continues please reach out to support@apollographql.com',\n                error,\n            ].join(' '));\n        }\n    }\n}\n//# sourceMappingURL=schemaReporter.js.map","import os from 'os';\nimport { internalPlugin } from '../../internalPlugin.js';\nimport { v4 as uuidv4 } from 'uuid';\nimport { printSchema, validateSchema, buildSchema } from 'graphql';\nimport { SchemaReporter } from './schemaReporter.js';\nimport { schemaIsSubgraph } from '../schemaIsSubgraph.js';\nimport { packageVersion } from '../../generated/packageVersion.js';\nimport { computeCoreSchemaHash } from '../../utils/computeCoreSchemaHash.js';\nexport function ApolloServerPluginSchemaReporting({ initialDelayMaxMs, overrideReportedSchema, endpointUrl, fetcher, } = Object.create(null)) {\n    const bootId = uuidv4();\n    return internalPlugin({\n        __internal_plugin_id__: 'SchemaReporting',\n        __is_disabled_plugin__: false,\n        async serverWillStart({ apollo, schema, logger }) {\n            const { key, graphRef } = apollo;\n            if (!key) {\n                throw Error('To use ApolloServerPluginSchemaReporting, you must provide an Apollo API ' +\n                    'key, via the APOLLO_KEY environment variable or via `new ApolloServer({apollo: {key})`');\n            }\n            if (!graphRef) {\n                throw Error('To use ApolloServerPluginSchemaReporting, you must provide your graph ref (eg, ' +\n                    \"'my-graph-id@my-graph-variant'). Try setting the APOLLO_GRAPH_REF environment \" +\n                    'variable or passing `new ApolloServer({apollo: {graphRef}})`.');\n            }\n            if (overrideReportedSchema) {\n                try {\n                    const validationErrors = validateSchema(buildSchema(overrideReportedSchema, { noLocation: true }));\n                    if (validationErrors.length) {\n                        throw new Error(validationErrors.map((error) => error.message).join('\\n'));\n                    }\n                }\n                catch (err) {\n                    throw new Error('The schema provided to overrideReportedSchema failed to parse or ' +\n                        `validate: ${err.message}`);\n                }\n            }\n            if (schemaIsSubgraph(schema)) {\n                throw Error([\n                    'Schema reporting is not yet compatible with Apollo Federation subgraphs.',\n                    \"If you're interested in using schema reporting with subgraphs,\",\n                    'please contact Apollo support. To set up managed federation, see',\n                    'https://go.apollo.dev/s/managed-federation',\n                ].join(' '));\n            }\n            if (endpointUrl !== undefined) {\n                logger.info(`Apollo schema reporting: schema reporting URL override: ${endpointUrl}`);\n            }\n            const baseSchemaReport = {\n                bootId,\n                graphRef,\n                platform: process.env.APOLLO_SERVER_PLATFORM || 'local',\n                runtimeVersion: `node ${process.version}`,\n                userVersion: process.env.APOLLO_SERVER_USER_VERSION,\n                serverId: process.env.APOLLO_SERVER_ID || process.env.HOSTNAME || os.hostname(),\n                libraryVersion: `@apollo/server@${packageVersion}`,\n            };\n            let currentSchemaReporter;\n            return {\n                schemaDidLoadOrUpdate({ apiSchema, coreSupergraphSdl }) {\n                    if (overrideReportedSchema !== undefined) {\n                        if (currentSchemaReporter) {\n                            return;\n                        }\n                        else {\n                            logger.info('Apollo schema reporting: schema to report has been overridden');\n                        }\n                    }\n                    const coreSchema = overrideReportedSchema ??\n                        coreSupergraphSdl ??\n                        printSchema(apiSchema);\n                    const coreSchemaHash = computeCoreSchemaHash(coreSchema);\n                    const schemaReport = {\n                        ...baseSchemaReport,\n                        coreSchemaHash,\n                    };\n                    currentSchemaReporter?.stop();\n                    currentSchemaReporter = new SchemaReporter({\n                        schemaReport,\n                        coreSchema,\n                        apiKey: key,\n                        endpointUrl,\n                        logger,\n                        initialReportingDelayInMs: Math.floor(Math.random() * (initialDelayMaxMs ?? 10000)),\n                        fallbackReportingDelayInMs: 20000,\n                        fetcher,\n                    });\n                    currentSchemaReporter.start();\n                    logger.info('Apollo schema reporting: reporting a new schema to Studio! See your graph at ' +\n                        `https://studio.apollographql.com/graph/${encodeURI(graphRef)}/ with server info ${JSON.stringify(schemaReport)}`);\n                },\n                async serverWillStop() {\n                    currentSchemaReporter?.stop();\n                },\n            };\n        },\n    });\n}\n//# sourceMappingURL=index.js.map"],"names":["schemaIsSubgraph","schema","serviceType","getType","sdlField","getFields","sdl","sdlFieldType","type","ofType","name","schemaReportGql","SchemaReporter","constructor","options","headers","apiKey","endpointUrl","schemaReport","coreSchema","isStopped","logger","initialReportingDelayInMs","fallbackReportingDelayInMs","fetcher","stopped","start","pollTimer","setTimeout","sendOneReportAndScheduleNext","stop","clearTimeout","undefined","sendNextWithCoreSchema","result","reportSchema","withCoreSchema","inSeconds","error","data","errors","apolloQuery","report","Error","map","x","message","join","msgForUnexpectedResponse","JSON","stringify","__typename","variables","httpResponse","method","body","query","ok","status","json","ApolloServerPluginSchemaReporting","initialDelayMaxMs","overrideReportedSchema","Object","create","bootId","__internal_plugin_id__","__is_disabled_plugin__","serverWillStart","apollo","currentSchemaReporter","key","graphRef","validationErrors","noLocation","length","err","info","baseSchemaReport","platform","process","env","APOLLO_SERVER_PLATFORM","runtimeVersion","version","userVersion","APOLLO_SERVER_USER_VERSION","serverId","APOLLO_SERVER_ID","HOSTNAME","libraryVersion","schemaDidLoadOrUpdate","apiSchema","coreSupergraphSdl","coreSchemaHash","Math","floor","random","encodeURI","serverWillStop"],"mappings":"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"}