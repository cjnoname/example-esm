export const ids=["512"];export const modules={85212:function(e,n,r){r.r(n),r.d(n,{ApolloServerPluginInlineTrace:function(){return a}});var t=r(23107),l=r(38040),i=r(69544),s=r(94361);function a(e=Object.create(null)){let n=!e.__onlyIfSchemaIsSubgraph||null;return(0,i.U)({__internal_plugin_id__:"InlineTrace",__is_disabled_plugin__:!1,async serverWillStart({schema:e,logger:r}){null===n&&(n=(0,s.X)(e))&&r.info("Enabling inline tracing for this subgraph. To disable, use ApolloServerPluginInlineTraceDisabled.")},async requestDidStart({request:{http:r},metrics:i}){if(!n)return;let s=new l.X({maskedBy:"ApolloServerPluginInlineTrace",sendErrors:e.includeErrors});if(r?.headers.get("apollo-federation-include-trace")==="ftv1"&&!1!==i.captureTraces)return i.captureTraces=!0,s.startTiming(),{executionDidStart:async()=>({willResolveField:({info:e})=>s.willResolveField(e)}),async didEncounterErrors({errors:e}){s.didEncounterErrors(e)},async willSendResponse({response:e}){if(s.stopTiming(),"incremental"===e.body.kind)return;i.queryPlanTrace&&(s.trace.queryPlan=i.queryPlanTrace);let n=t.fM.encode(s.trace).finish(),r=Buffer.from(n,n.byteOffset,n.byteLength),l=e.body.singleResult.extensions||(e.body.singleResult.extensions=Object.create(null));if(void 0!==l.ftv1)throw Error("The `ftv1` extension was already present.");l.ftv1=r.toString("base64")}}}})}}};
//# sourceMappingURL=512.mjs.map