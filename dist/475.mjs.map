{"version":3,"file":"475.mjs","sources":["webpack://example-esm/./node_modules/@apollo/utils.dropunuseddefinitions/dist/index.js","webpack://example-esm/./node_modules/@apollo/utils.printwithreducedwhitespace/dist/index.js","webpack://example-esm/./node_modules/@apollo/utils.removealiases/dist/index.js","webpack://example-esm/./node_modules/@apollo/utils.sortast/dist/index.js","webpack://example-esm/./node_modules/@apollo/utils.stripsensitiveliterals/dist/index.js","webpack://example-esm/./node_modules/@apollo/utils.usagereporting/dist/calculateReferencedFieldsByType.js","webpack://example-esm/./node_modules/@apollo/utils.usagereporting/dist/index.js","webpack://example-esm/./node_modules/@apollo/utils.usagereporting/dist/signature.js","webpack://example-esm/./node_modules/async-retry/lib/index.js","webpack://example-esm/./node_modules/lodash.sortby/index.js","webpack://example-esm/./node_modules/retry/index.js","webpack://example-esm/./node_modules/retry/lib/retry.js","webpack://example-esm/./node_modules/retry/lib/retry_operation.js","webpack://example-esm/./node_modules/@apollo/usage-reporting-protobuf/generated/cjs/protobuf.js","webpack://example-esm/./node_modules/@apollo/server/dist/esm/plugin/usageReporting/iterateOverTrace.js","webpack://example-esm/./node_modules/@apollo/server/dist/esm/plugin/usageReporting/durationHistogram.js","webpack://example-esm/./node_modules/@apollo/server/dist/esm/plugin/usageReporting/stats.js","webpack://example-esm/./node_modules/@apollo/server/dist/esm/plugin/usageReporting/plugin.js","webpack://example-esm/./node_modules/@apollo/server/dist/esm/plugin/usageReporting/defaultSendOperationsAsTrace.js","webpack://example-esm/./node_modules/@apollo/server/dist/esm/plugin/usageReporting/traceDetails.js","webpack://example-esm/./node_modules/@apollo/server/dist/esm/plugin/usageReporting/operationDerivedDataCache.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.dropUnusedDefinitions = void 0;\nconst graphql_1 = require(\"graphql\");\nfunction dropUnusedDefinitions(ast, operationName) {\n    const separated = (0, graphql_1.separateOperations)(ast)[operationName];\n    if (!separated) {\n        return ast;\n    }\n    return separated;\n}\nexports.dropUnusedDefinitions = dropUnusedDefinitions;\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.printWithReducedWhitespace = void 0;\nconst graphql_1 = require(\"graphql\");\nfunction printWithReducedWhitespace(ast) {\n    const sanitizedAST = (0, graphql_1.visit)(ast, {\n        StringValue(node) {\n            return {\n                ...node,\n                value: Buffer.from(node.value, \"utf8\").toString(\"hex\"),\n                block: false,\n            };\n        },\n    });\n    const withWhitespace = (0, graphql_1.print)(sanitizedAST);\n    const minimizedButStillHex = withWhitespace\n        .replace(/\\s+/g, \" \")\n        .replace(/([^_a-zA-Z0-9]) /g, (_, c) => c)\n        .replace(/ ([^_a-zA-Z0-9])/g, (_, c) => c);\n    return minimizedButStillHex.replace(/\"([a-f0-9]+)\"/g, (_, hex) => JSON.stringify(Buffer.from(hex, \"hex\").toString(\"utf8\")));\n}\nexports.printWithReducedWhitespace = printWithReducedWhitespace;\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.removeAliases = void 0;\nconst graphql_1 = require(\"graphql\");\nfunction removeAliases(ast) {\n    return (0, graphql_1.visit)(ast, {\n        Field(node) {\n            const { alias, ...rest } = node;\n            return rest;\n        },\n    });\n}\nexports.removeAliases = removeAliases;\n//# sourceMappingURL=index.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sortAST = void 0;\nconst graphql_1 = require(\"graphql\");\nconst lodash_sortby_1 = __importDefault(require(\"lodash.sortby\"));\nfunction sortAST(ast) {\n    return (0, graphql_1.visit)(ast, {\n        Document(node) {\n            return {\n                ...node,\n                definitions: (0, lodash_sortby_1.default)(node.definitions, \"kind\", \"name.value\"),\n            };\n        },\n        OperationDefinition(node) {\n            return sortVariableDefinitions(node);\n        },\n        SelectionSet(node) {\n            return {\n                ...node,\n                selections: (0, lodash_sortby_1.default)(node.selections, \"kind\", \"name.value\"),\n            };\n        },\n        Field(node) {\n            return sortArguments(node);\n        },\n        FragmentSpread(node) {\n            return sortDirectives(node);\n        },\n        InlineFragment(node) {\n            return sortDirectives(node);\n        },\n        FragmentDefinition(node) {\n            return sortDirectives(sortVariableDefinitions(node));\n        },\n        Directive(node) {\n            return sortArguments(node);\n        },\n    });\n}\nexports.sortAST = sortAST;\nfunction sortDirectives(node) {\n    return \"directives\" in node\n        ? { ...node, directives: (0, lodash_sortby_1.default)(node.directives, \"name.value\") }\n        : node;\n}\nfunction sortArguments(node) {\n    return \"arguments\" in node\n        ? { ...node, arguments: (0, lodash_sortby_1.default)(node.arguments, \"name.value\") }\n        : node;\n}\nfunction sortVariableDefinitions(node) {\n    return \"variableDefinitions\" in node\n        ? {\n            ...node,\n            variableDefinitions: (0, lodash_sortby_1.default)(node.variableDefinitions, \"variable.name.value\"),\n        }\n        : node;\n}\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.stripSensitiveLiterals = void 0;\nconst graphql_1 = require(\"graphql\");\nfunction stripSensitiveLiterals(ast, options = {\n    hideListAndObjectLiterals: false,\n}) {\n    const listAndObjectVisitorIfEnabled = options.hideListAndObjectLiterals\n        ? {\n            ListValue(node) {\n                return { ...node, values: [] };\n            },\n            ObjectValue(node) {\n                return { ...node, fields: [] };\n            },\n        }\n        : {};\n    return (0, graphql_1.visit)(ast, {\n        IntValue(node) {\n            return { ...node, value: \"0\" };\n        },\n        FloatValue(node) {\n            return { ...node, value: \"0\" };\n        },\n        StringValue(node) {\n            return { ...node, value: \"\", block: false };\n        },\n        ...listAndObjectVisitorIfEnabled,\n    });\n}\nexports.stripSensitiveLiterals = stripSensitiveLiterals;\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.calculateReferencedFieldsByType = void 0;\nconst graphql_1 = require(\"graphql\");\nconst usage_reporting_protobuf_1 = require(\"@apollo/usage-reporting-protobuf\");\nfunction calculateReferencedFieldsByType({ document, schema, resolvedOperationName, }) {\n    const documentSeparatedByOperation = (0, graphql_1.separateOperations)(document);\n    const filteredDocument = documentSeparatedByOperation[resolvedOperationName !== null && resolvedOperationName !== void 0 ? resolvedOperationName : \"\"];\n    if (!filteredDocument) {\n        throw Error(`shouldn't happen: operation '${resolvedOperationName !== null && resolvedOperationName !== void 0 ? resolvedOperationName : \"\"}' not found`);\n    }\n    const typeInfo = new graphql_1.TypeInfo(schema);\n    const interfaces = new Set();\n    const referencedFieldSetByType = Object.create(null);\n    (0, graphql_1.visit)(filteredDocument, (0, graphql_1.visitWithTypeInfo)(typeInfo, {\n        Field(field) {\n            const fieldName = field.name.value;\n            const parentType = typeInfo.getParentType();\n            if (!parentType) {\n                throw Error(`shouldn't happen: missing parent type for field ${fieldName}`);\n            }\n            const parentTypeName = parentType.name;\n            if (!referencedFieldSetByType[parentTypeName]) {\n                referencedFieldSetByType[parentTypeName] = new Set();\n                if ((0, graphql_1.isInterfaceType)(parentType)) {\n                    interfaces.add(parentTypeName);\n                }\n            }\n            referencedFieldSetByType[parentTypeName].add(fieldName);\n        },\n    }));\n    const referencedFieldsByType = Object.create(null);\n    for (const [typeName, fieldNames] of Object.entries(referencedFieldSetByType)) {\n        referencedFieldsByType[typeName] = new usage_reporting_protobuf_1.ReferencedFieldsForType({\n            fieldNames: [...fieldNames],\n            isInterface: interfaces.has(typeName),\n        });\n    }\n    return referencedFieldsByType;\n}\nexports.calculateReferencedFieldsByType = calculateReferencedFieldsByType;\n//# sourceMappingURL=calculateReferencedFieldsByType.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.usageReportingSignature = exports.calculateReferencedFieldsByType = void 0;\nvar calculateReferencedFieldsByType_1 = require(\"./calculateReferencedFieldsByType\");\nObject.defineProperty(exports, \"calculateReferencedFieldsByType\", { enumerable: true, get: function () { return calculateReferencedFieldsByType_1.calculateReferencedFieldsByType; } });\nvar signature_1 = require(\"./signature\");\nObject.defineProperty(exports, \"usageReportingSignature\", { enumerable: true, get: function () { return signature_1.usageReportingSignature; } });\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.usageReportingSignature = void 0;\nconst utils_dropunuseddefinitions_1 = require(\"@apollo/utils.dropunuseddefinitions\");\nconst utils_stripsensitiveliterals_1 = require(\"@apollo/utils.stripsensitiveliterals\");\nconst utils_printwithreducedwhitespace_1 = require(\"@apollo/utils.printwithreducedwhitespace\");\nconst utils_removealiases_1 = require(\"@apollo/utils.removealiases\");\nconst utils_sortast_1 = require(\"@apollo/utils.sortast\");\nfunction usageReportingSignature(ast, operationName) {\n    return (0, utils_printwithreducedwhitespace_1.printWithReducedWhitespace)((0, utils_sortast_1.sortAST)((0, utils_removealiases_1.removeAliases)((0, utils_stripsensitiveliterals_1.stripSensitiveLiterals)((0, utils_dropunuseddefinitions_1.dropUnusedDefinitions)(ast, operationName), {\n        hideListAndObjectLiterals: true,\n    }))));\n}\nexports.usageReportingSignature = usageReportingSignature;\n//# sourceMappingURL=signature.js.map","// Packages\nvar retrier = require('retry');\n\nfunction retry(fn, opts) {\n  function run(resolve, reject) {\n    var options = opts || {};\n    var op;\n\n    // Default `randomize` to true\n    if (!('randomize' in options)) {\n      options.randomize = true;\n    }\n\n    op = retrier.operation(options);\n\n    // We allow the user to abort retrying\n    // this makes sense in the cases where\n    // knowledge is obtained that retrying\n    // would be futile (e.g.: auth errors)\n\n    function bail(err) {\n      reject(err || new Error('Aborted'));\n    }\n\n    function onError(err, num) {\n      if (err.bail) {\n        bail(err);\n        return;\n      }\n\n      if (!op.retry(err)) {\n        reject(op.mainError());\n      } else if (options.onRetry) {\n        options.onRetry(err, num);\n      }\n    }\n\n    function runAttempt(num) {\n      var val;\n\n      try {\n        val = fn(bail, num);\n      } catch (err) {\n        onError(err, num);\n        return;\n      }\n\n      Promise.resolve(val)\n        .then(resolve)\n        .catch(function catchIt(err) {\n          onError(err, num);\n        });\n    }\n\n    op.attempt(runAttempt);\n  }\n\n  return new Promise(run);\n}\n\nmodule.exports = retry;\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used to compose bitmasks for comparison styles. */\nvar UNORDERED_COMPARE_FLAG = 1,\n    PARTIAL_COMPARE_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0,\n    MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/,\n    reLeadingDot = /^\\./,\n    rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A faster alternative to `Function#apply`, this function invokes `func`\n * with the `this` binding of `thisArg` and the arguments of `args`.\n *\n * @private\n * @param {Function} func The function to invoke.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} args The arguments to invoke `func` with.\n * @returns {*} Returns the result of `func`.\n */\nfunction apply(func, thisArg, args) {\n  switch (args.length) {\n    case 0: return func.call(thisArg);\n    case 1: return func.call(thisArg, args[0]);\n    case 2: return func.call(thisArg, args[0], args[1]);\n    case 3: return func.call(thisArg, args[0], args[1], args[2]);\n  }\n  return func.apply(thisArg, args);\n}\n\n/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array ? array.length : 0,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.property` without support for deep paths.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction baseProperty(key) {\n  return function(object) {\n    return object == null ? undefined : object[key];\n  };\n}\n\n/**\n * The base implementation of `_.sortBy` which uses `comparer` to define the\n * sort order of `array` and replaces criteria objects with their corresponding\n * values.\n *\n * @private\n * @param {Array} array The array to sort.\n * @param {Function} comparer The function to define sort order.\n * @returns {Array} Returns `array`.\n */\nfunction baseSortBy(array, comparer) {\n  var length = array.length;\n\n  array.sort(comparer);\n  while (length--) {\n    array[length] = array[length].value;\n  }\n  return array;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = overArg(Object.keys, Object),\n    nativeMax = Math.max;\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values ? values.length : 0;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  this.__data__ = new ListCache(entries);\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  return this.__data__['delete'](key);\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var cache = this.__data__;\n  if (cache instanceof ListCache) {\n    var pairs = cache.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      return this;\n    }\n    cache = this.__data__ = new MapCache(pairs);\n  }\n  cache.set(key, value);\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.forEach` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array|Object} Returns `collection`.\n */\nvar baseEach = createBaseEach(baseForOwn);\n\n/**\n * The base implementation of `_.flatten` with support for restricting flattening.\n *\n * @private\n * @param {Array} array The array to flatten.\n * @param {number} depth The maximum recursion depth.\n * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n * @param {Array} [result=[]] The initial result value.\n * @returns {Array} Returns the new flattened array.\n */\nfunction baseFlatten(array, depth, predicate, isStrict, result) {\n  var index = -1,\n      length = array.length;\n\n  predicate || (predicate = isFlattenable);\n  result || (result = []);\n\n  while (++index < length) {\n    var value = array[index];\n    if (depth > 0 && predicate(value)) {\n      if (depth > 1) {\n        // Recursively flatten arrays (susceptible to call stack limits).\n        baseFlatten(value, depth - 1, predicate, isStrict, result);\n      } else {\n        arrayPush(result, value);\n      }\n    } else if (!isStrict) {\n      result[result.length] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * The base implementation of `baseForOwn` which iterates over `object`\n * properties returned by `keysFunc` and invokes `iteratee` for each property.\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @returns {Object} Returns `object`.\n */\nvar baseFor = createBaseFor();\n\n/**\n * The base implementation of `_.forOwn` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Object} Returns `object`.\n */\nfunction baseForOwn(object, iteratee) {\n  return object && baseFor(object, iteratee, keys);\n}\n\n/**\n * The base implementation of `_.get` without support for default values.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @returns {*} Returns the resolved value.\n */\nfunction baseGet(object, path) {\n  path = isKey(path, object) ? [path] : castPath(path);\n\n  var index = 0,\n      length = path.length;\n\n  while (object != null && index < length) {\n    object = object[toKey(path[index++])];\n  }\n  return (index && index == length) ? object : undefined;\n}\n\n/**\n * The base implementation of `getTag`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  return objectToString.call(value);\n}\n\n/**\n * The base implementation of `_.hasIn` without support for deep paths.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {Array|string} key The key to check.\n * @returns {boolean} Returns `true` if `key` exists, else `false`.\n */\nfunction baseHasIn(object, key) {\n  return object != null && key in Object(object);\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {boolean} [bitmask] The bitmask of comparison flags.\n *  The bitmask may be composed of the following flags:\n *     1 - Unordered comparison\n *     2 - Partial comparison\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, customizer, bitmask, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual`\n *  for more details.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = arrayTag,\n      othTag = arrayTag;\n\n  if (!objIsArr) {\n    objTag = getTag(object);\n    objTag = objTag == argsTag ? objectTag : objTag;\n  }\n  if (!othIsArr) {\n    othTag = getTag(other);\n    othTag = othTag == argsTag ? objectTag : othTag;\n  }\n  var objIsObj = objTag == objectTag && !isHostObject(object),\n      othIsObj = othTag == objectTag && !isHostObject(other),\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, equalFunc, customizer, bitmask, stack)\n      : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);\n  }\n  if (!(bitmask & PARTIAL_COMPARE_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, equalFunc, customizer, bitmask, stack);\n}\n\n/**\n * The base implementation of `_.isMatch` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to inspect.\n * @param {Object} source The object of property values to match.\n * @param {Array} matchData The property names, values, and compare flags to match.\n * @param {Function} [customizer] The function to customize comparisons.\n * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n */\nfunction baseIsMatch(object, source, matchData, customizer) {\n  var index = matchData.length,\n      length = index,\n      noCustomizer = !customizer;\n\n  if (object == null) {\n    return !length;\n  }\n  object = Object(object);\n  while (index--) {\n    var data = matchData[index];\n    if ((noCustomizer && data[2])\n          ? data[1] !== object[data[0]]\n          : !(data[0] in object)\n        ) {\n      return false;\n    }\n  }\n  while (++index < length) {\n    data = matchData[index];\n    var key = data[0],\n        objValue = object[key],\n        srcValue = data[1];\n\n    if (noCustomizer && data[2]) {\n      if (objValue === undefined && !(key in object)) {\n        return false;\n      }\n    } else {\n      var stack = new Stack;\n      if (customizer) {\n        var result = customizer(objValue, srcValue, key, object, source, stack);\n      }\n      if (!(result === undefined\n            ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack)\n            : result\n          )) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[objectToString.call(value)];\n}\n\n/**\n * The base implementation of `_.iteratee`.\n *\n * @private\n * @param {*} [value=_.identity] The value to convert to an iteratee.\n * @returns {Function} Returns the iteratee.\n */\nfunction baseIteratee(value) {\n  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\n  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\n  if (typeof value == 'function') {\n    return value;\n  }\n  if (value == null) {\n    return identity;\n  }\n  if (typeof value == 'object') {\n    return isArray(value)\n      ? baseMatchesProperty(value[0], value[1])\n      : baseMatches(value);\n  }\n  return property(value);\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.map` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction baseMap(collection, iteratee) {\n  var index = -1,\n      result = isArrayLike(collection) ? Array(collection.length) : [];\n\n  baseEach(collection, function(value, key, collection) {\n    result[++index] = iteratee(value, key, collection);\n  });\n  return result;\n}\n\n/**\n * The base implementation of `_.matches` which doesn't clone `source`.\n *\n * @private\n * @param {Object} source The object of property values to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatches(source) {\n  var matchData = getMatchData(source);\n  if (matchData.length == 1 && matchData[0][2]) {\n    return matchesStrictComparable(matchData[0][0], matchData[0][1]);\n  }\n  return function(object) {\n    return object === source || baseIsMatch(object, source, matchData);\n  };\n}\n\n/**\n * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n *\n * @private\n * @param {string} path The path of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatchesProperty(path, srcValue) {\n  if (isKey(path) && isStrictComparable(srcValue)) {\n    return matchesStrictComparable(toKey(path), srcValue);\n  }\n  return function(object) {\n    var objValue = get(object, path);\n    return (objValue === undefined && objValue === srcValue)\n      ? hasIn(object, path)\n      : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);\n  };\n}\n\n/**\n * The base implementation of `_.orderBy` without param guards.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n * @param {string[]} orders The sort orders of `iteratees`.\n * @returns {Array} Returns the new sorted array.\n */\nfunction baseOrderBy(collection, iteratees, orders) {\n  var index = -1;\n  iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(baseIteratee));\n\n  var result = baseMap(collection, function(value, key, collection) {\n    var criteria = arrayMap(iteratees, function(iteratee) {\n      return iteratee(value);\n    });\n    return { 'criteria': criteria, 'index': ++index, 'value': value };\n  });\n\n  return baseSortBy(result, function(object, other) {\n    return compareMultiple(object, other, orders);\n  });\n}\n\n/**\n * A specialized version of `baseProperty` which supports deep paths.\n *\n * @private\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction basePropertyDeep(path) {\n  return function(object) {\n    return baseGet(object, path);\n  };\n}\n\n/**\n * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @returns {Function} Returns the new function.\n */\nfunction baseRest(func, start) {\n  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n  return function() {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        array = Array(length);\n\n    while (++index < length) {\n      array[index] = args[start + index];\n    }\n    index = -1;\n    var otherArgs = Array(start + 1);\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n    otherArgs[start] = array;\n    return apply(func, this, otherArgs);\n  };\n}\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(value) {\n  return isArray(value) ? value : stringToPath(value);\n}\n\n/**\n * Compares values to sort them in ascending order.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {number} Returns the sort order indicator for `value`.\n */\nfunction compareAscending(value, other) {\n  if (value !== other) {\n    var valIsDefined = value !== undefined,\n        valIsNull = value === null,\n        valIsReflexive = value === value,\n        valIsSymbol = isSymbol(value);\n\n    var othIsDefined = other !== undefined,\n        othIsNull = other === null,\n        othIsReflexive = other === other,\n        othIsSymbol = isSymbol(other);\n\n    if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||\n        (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||\n        (valIsNull && othIsDefined && othIsReflexive) ||\n        (!valIsDefined && othIsReflexive) ||\n        !valIsReflexive) {\n      return 1;\n    }\n    if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||\n        (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||\n        (othIsNull && valIsDefined && valIsReflexive) ||\n        (!othIsDefined && valIsReflexive) ||\n        !othIsReflexive) {\n      return -1;\n    }\n  }\n  return 0;\n}\n\n/**\n * Used by `_.orderBy` to compare multiple properties of a value to another\n * and stable sort them.\n *\n * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n * of corresponding values.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {boolean[]|string[]} orders The order to sort by for each property.\n * @returns {number} Returns the sort order indicator for `object`.\n */\nfunction compareMultiple(object, other, orders) {\n  var index = -1,\n      objCriteria = object.criteria,\n      othCriteria = other.criteria,\n      length = objCriteria.length,\n      ordersLength = orders.length;\n\n  while (++index < length) {\n    var result = compareAscending(objCriteria[index], othCriteria[index]);\n    if (result) {\n      if (index >= ordersLength) {\n        return result;\n      }\n      var order = orders[index];\n      return result * (order == 'desc' ? -1 : 1);\n    }\n  }\n  // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n  // that causes it, under certain circumstances, to provide the same value for\n  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n  // for more details.\n  //\n  // This also ensures a stable sort in V8 and other engines.\n  // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n  return object.index - other.index;\n}\n\n/**\n * Creates a `baseEach` or `baseEachRight` function.\n *\n * @private\n * @param {Function} eachFunc The function to iterate over a collection.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseEach(eachFunc, fromRight) {\n  return function(collection, iteratee) {\n    if (collection == null) {\n      return collection;\n    }\n    if (!isArrayLike(collection)) {\n      return eachFunc(collection, iteratee);\n    }\n    var length = collection.length,\n        index = fromRight ? length : -1,\n        iterable = Object(collection);\n\n    while ((fromRight ? index-- : ++index < length)) {\n      if (iteratee(iterable[index], index, iterable) === false) {\n        break;\n      }\n    }\n    return collection;\n  };\n}\n\n/**\n * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseFor(fromRight) {\n  return function(object, iteratee, keysFunc) {\n    var index = -1,\n        iterable = Object(object),\n        props = keysFunc(object),\n        length = props.length;\n\n    while (length--) {\n      var key = props[fromRight ? length : ++index];\n      if (iteratee(iterable[key], key, iterable) === false) {\n        break;\n      }\n    }\n    return object;\n  };\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Function} customizer The function to customize comparisons.\n * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`\n *  for more details.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, equalFunc, customizer, bitmask, stack) {\n  var isPartial = bitmask & PARTIAL_COMPARE_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & UNORDERED_COMPARE_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!seen.has(othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {\n              return seen.add(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, customizer, bitmask, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Function} customizer The function to customize comparisons.\n * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`\n *  for more details.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & PARTIAL_COMPARE_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= UNORDERED_COMPARE_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Function} customizer The function to customize comparisons.\n * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`\n *  for more details.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, equalFunc, customizer, bitmask, stack) {\n  var isPartial = bitmask & PARTIAL_COMPARE_FLAG,\n      objProps = keys(object),\n      objLength = objProps.length,\n      othProps = keys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the property names, values, and compare flags of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the match data of `object`.\n */\nfunction getMatchData(object) {\n  var result = keys(object),\n      length = result.length;\n\n  while (length--) {\n    var key = result[length],\n        value = object[key];\n\n    result[length] = [key, value, isStrictComparable(value)];\n  }\n  return result;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11,\n// for data views in Edge < 14, and promises in Node.js.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = objectToString.call(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : undefined;\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `path` exists on `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @param {Function} hasFunc The function to check properties.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n */\nfunction hasPath(object, path, hasFunc) {\n  path = isKey(path, object) ? [path] : castPath(path);\n\n  var result,\n      index = -1,\n      length = path.length;\n\n  while (++index < length) {\n    var key = toKey(path[index]);\n    if (!(result = object != null && hasFunc(object, key))) {\n      break;\n    }\n    object = object[key];\n  }\n  if (result) {\n    return result;\n  }\n  var length = object ? object.length : 0;\n  return !!length && isLength(length) && isIndex(key, length) &&\n    (isArray(object) || isArguments(object));\n}\n\n/**\n * Checks if `value` is a flattenable `arguments` object or array.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n */\nfunction isFlattenable(value) {\n  return isArray(value) || isArguments(value) ||\n    !!(spreadableSymbol && value && value[spreadableSymbol]);\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if the given arguments are from an iteratee call.\n *\n * @private\n * @param {*} value The potential iteratee value argument.\n * @param {*} index The potential iteratee index or key argument.\n * @param {*} object The potential iteratee object argument.\n * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n *  else `false`.\n */\nfunction isIterateeCall(value, index, object) {\n  if (!isObject(object)) {\n    return false;\n  }\n  var type = typeof index;\n  if (type == 'number'\n        ? (isArrayLike(object) && isIndex(index, object.length))\n        : (type == 'string' && index in object)\n      ) {\n    return eq(object[index], value);\n  }\n  return false;\n}\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey(value, object) {\n  if (isArray(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` if suitable for strict\n *  equality comparisons, else `false`.\n */\nfunction isStrictComparable(value) {\n  return value === value && !isObject(value);\n}\n\n/**\n * A specialized version of `matchesProperty` for source values suitable\n * for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction matchesStrictComparable(key, srcValue) {\n  return function(object) {\n    if (object == null) {\n      return false;\n    }\n    return object[key] === srcValue &&\n      (srcValue !== undefined || (key in Object(object)));\n  };\n}\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoize(function(string) {\n  string = toString(string);\n\n  var result = [];\n  if (reLeadingDot.test(string)) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, string) {\n    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Creates an array of elements, sorted in ascending order by the results of\n * running each element in a collection thru each iteratee. This method\n * performs a stable sort, that is, it preserves the original sort order of\n * equal elements. The iteratees are invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {...(Function|Function[])} [iteratees=[_.identity]]\n *  The iteratees to sort by.\n * @returns {Array} Returns the new sorted array.\n * @example\n *\n * var users = [\n *   { 'user': 'fred',   'age': 48 },\n *   { 'user': 'barney', 'age': 36 },\n *   { 'user': 'fred',   'age': 40 },\n *   { 'user': 'barney', 'age': 34 }\n * ];\n *\n * _.sortBy(users, function(o) { return o.user; });\n * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n *\n * _.sortBy(users, ['user', 'age']);\n * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]\n *\n * _.sortBy(users, 'user', function(o) {\n *   return Math.floor(o.age / 10);\n * });\n * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n */\nvar sortBy = baseRest(function(collection, iteratees) {\n  if (collection == null) {\n    return [];\n  }\n  var length = iteratees.length;\n  if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {\n    iteratees = [];\n  } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {\n    iteratees = [iteratees[0]];\n  }\n  return baseOrderBy(collection, baseFlatten(iteratees, 1), []);\n});\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result);\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Assign cache to `_.memoize`.\nmemoize.Cache = MapCache;\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/**\n * Gets the value at `path` of `object`. If the resolved value is\n * `undefined`, the `defaultValue` is returned in its place.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n * @returns {*} Returns the resolved value.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.get(object, 'a[0].b.c');\n * // => 3\n *\n * _.get(object, ['a', '0', 'b', 'c']);\n * // => 3\n *\n * _.get(object, 'a.b.c', 'default');\n * // => 'default'\n */\nfunction get(object, path, defaultValue) {\n  var result = object == null ? undefined : baseGet(object, path);\n  return result === undefined ? defaultValue : result;\n}\n\n/**\n * Checks if `path` is a direct or inherited property of `object`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n * @example\n *\n * var object = _.create({ 'a': _.create({ 'b': 2 }) });\n *\n * _.hasIn(object, 'a');\n * // => true\n *\n * _.hasIn(object, 'a.b');\n * // => true\n *\n * _.hasIn(object, ['a', 'b']);\n * // => true\n *\n * _.hasIn(object, 'b');\n * // => false\n */\nfunction hasIn(object, path) {\n  return object != null && hasPath(object, path, baseHasIn);\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\n/**\n * Creates a function that returns the value at `path` of a given object.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n * @example\n *\n * var objects = [\n *   { 'a': { 'b': 2 } },\n *   { 'a': { 'b': 1 } }\n * ];\n *\n * _.map(objects, _.property('a.b'));\n * // => [2, 1]\n *\n * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n * // => [1, 2]\n */\nfunction property(path) {\n  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\n}\n\nmodule.exports = sortBy;\n","module.exports = require('./lib/retry');","var RetryOperation = require('./retry_operation');\n\nexports.operation = function(options) {\n  var timeouts = exports.timeouts(options);\n  return new RetryOperation(timeouts, {\n      forever: options && (options.forever || options.retries === Infinity),\n      unref: options && options.unref,\n      maxRetryTime: options && options.maxRetryTime\n  });\n};\n\nexports.timeouts = function(options) {\n  if (options instanceof Array) {\n    return [].concat(options);\n  }\n\n  var opts = {\n    retries: 10,\n    factor: 2,\n    minTimeout: 1 * 1000,\n    maxTimeout: Infinity,\n    randomize: false\n  };\n  for (var key in options) {\n    opts[key] = options[key];\n  }\n\n  if (opts.minTimeout > opts.maxTimeout) {\n    throw new Error('minTimeout is greater than maxTimeout');\n  }\n\n  var timeouts = [];\n  for (var i = 0; i < opts.retries; i++) {\n    timeouts.push(this.createTimeout(i, opts));\n  }\n\n  if (options && options.forever && !timeouts.length) {\n    timeouts.push(this.createTimeout(i, opts));\n  }\n\n  // sort the array numerically ascending\n  timeouts.sort(function(a,b) {\n    return a - b;\n  });\n\n  return timeouts;\n};\n\nexports.createTimeout = function(attempt, opts) {\n  var random = (opts.randomize)\n    ? (Math.random() + 1)\n    : 1;\n\n  var timeout = Math.round(random * Math.max(opts.minTimeout, 1) * Math.pow(opts.factor, attempt));\n  timeout = Math.min(timeout, opts.maxTimeout);\n\n  return timeout;\n};\n\nexports.wrap = function(obj, options, methods) {\n  if (options instanceof Array) {\n    methods = options;\n    options = null;\n  }\n\n  if (!methods) {\n    methods = [];\n    for (var key in obj) {\n      if (typeof obj[key] === 'function') {\n        methods.push(key);\n      }\n    }\n  }\n\n  for (var i = 0; i < methods.length; i++) {\n    var method   = methods[i];\n    var original = obj[method];\n\n    obj[method] = function retryWrapper(original) {\n      var op       = exports.operation(options);\n      var args     = Array.prototype.slice.call(arguments, 1);\n      var callback = args.pop();\n\n      args.push(function(err) {\n        if (op.retry(err)) {\n          return;\n        }\n        if (err) {\n          arguments[0] = op.mainError();\n        }\n        callback.apply(this, arguments);\n      });\n\n      op.attempt(function() {\n        original.apply(obj, args);\n      });\n    }.bind(obj, original);\n    obj[method].options = options;\n  }\n};\n","function RetryOperation(timeouts, options) {\n  // Compatibility for the old (timeouts, retryForever) signature\n  if (typeof options === 'boolean') {\n    options = { forever: options };\n  }\n\n  this._originalTimeouts = JSON.parse(JSON.stringify(timeouts));\n  this._timeouts = timeouts;\n  this._options = options || {};\n  this._maxRetryTime = options && options.maxRetryTime || Infinity;\n  this._fn = null;\n  this._errors = [];\n  this._attempts = 1;\n  this._operationTimeout = null;\n  this._operationTimeoutCb = null;\n  this._timeout = null;\n  this._operationStart = null;\n  this._timer = null;\n\n  if (this._options.forever) {\n    this._cachedTimeouts = this._timeouts.slice(0);\n  }\n}\nmodule.exports = RetryOperation;\n\nRetryOperation.prototype.reset = function() {\n  this._attempts = 1;\n  this._timeouts = this._originalTimeouts.slice(0);\n}\n\nRetryOperation.prototype.stop = function() {\n  if (this._timeout) {\n    clearTimeout(this._timeout);\n  }\n  if (this._timer) {\n    clearTimeout(this._timer);\n  }\n\n  this._timeouts       = [];\n  this._cachedTimeouts = null;\n};\n\nRetryOperation.prototype.retry = function(err) {\n  if (this._timeout) {\n    clearTimeout(this._timeout);\n  }\n\n  if (!err) {\n    return false;\n  }\n  var currentTime = new Date().getTime();\n  if (err && currentTime - this._operationStart >= this._maxRetryTime) {\n    this._errors.push(err);\n    this._errors.unshift(new Error('RetryOperation timeout occurred'));\n    return false;\n  }\n\n  this._errors.push(err);\n\n  var timeout = this._timeouts.shift();\n  if (timeout === undefined) {\n    if (this._cachedTimeouts) {\n      // retry forever, only keep last error\n      this._errors.splice(0, this._errors.length - 1);\n      timeout = this._cachedTimeouts.slice(-1);\n    } else {\n      return false;\n    }\n  }\n\n  var self = this;\n  this._timer = setTimeout(function() {\n    self._attempts++;\n\n    if (self._operationTimeoutCb) {\n      self._timeout = setTimeout(function() {\n        self._operationTimeoutCb(self._attempts);\n      }, self._operationTimeout);\n\n      if (self._options.unref) {\n          self._timeout.unref();\n      }\n    }\n\n    self._fn(self._attempts);\n  }, timeout);\n\n  if (this._options.unref) {\n      this._timer.unref();\n  }\n\n  return true;\n};\n\nRetryOperation.prototype.attempt = function(fn, timeoutOps) {\n  this._fn = fn;\n\n  if (timeoutOps) {\n    if (timeoutOps.timeout) {\n      this._operationTimeout = timeoutOps.timeout;\n    }\n    if (timeoutOps.cb) {\n      this._operationTimeoutCb = timeoutOps.cb;\n    }\n  }\n\n  var self = this;\n  if (this._operationTimeoutCb) {\n    this._timeout = setTimeout(function() {\n      self._operationTimeoutCb();\n    }, self._operationTimeout);\n  }\n\n  this._operationStart = new Date().getTime();\n\n  this._fn(this._attempts);\n};\n\nRetryOperation.prototype.try = function(fn) {\n  console.log('Using RetryOperation.try() is deprecated');\n  this.attempt(fn);\n};\n\nRetryOperation.prototype.start = function(fn) {\n  console.log('Using RetryOperation.start() is deprecated');\n  this.attempt(fn);\n};\n\nRetryOperation.prototype.start = RetryOperation.prototype.try;\n\nRetryOperation.prototype.errors = function() {\n  return this._errors;\n};\n\nRetryOperation.prototype.attempts = function() {\n  return this._attempts;\n};\n\nRetryOperation.prototype.mainError = function() {\n  if (this._errors.length === 0) {\n    return null;\n  }\n\n  var counts = {};\n  var mainError = null;\n  var mainErrorCount = 0;\n\n  for (var i = 0; i < this._errors.length; i++) {\n    var error = this._errors[i];\n    var message = error.message;\n    var count = (counts[message] || 0) + 1;\n\n    counts[message] = count;\n\n    if (count >= mainErrorCount) {\n      mainError = error;\n      mainErrorCount = count;\n    }\n  }\n\n  return mainError;\n};\n","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"@apollo/protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.Trace = (function() {\n\n    /**\n     * Properties of a Trace.\n     * @exports ITrace\n     * @interface ITrace\n     * @property {google.protobuf.ITimestamp|null} [startTime] Trace startTime\n     * @property {google.protobuf.ITimestamp|null} [endTime] Trace endTime\n     * @property {number|null} [durationNs] Trace durationNs\n     * @property {Trace.INode|null} [root] Trace root\n     * @property {boolean|null} [isIncomplete] Trace isIncomplete\n     * @property {string|null} [signature] Trace signature\n     * @property {string|null} [unexecutedOperationBody] Trace unexecutedOperationBody\n     * @property {string|null} [unexecutedOperationName] Trace unexecutedOperationName\n     * @property {Trace.IDetails|null} [details] Trace details\n     * @property {string|null} [clientName] Trace clientName\n     * @property {string|null} [clientVersion] Trace clientVersion\n     * @property {Trace.IHTTP|null} [http] Trace http\n     * @property {Trace.ICachePolicy|null} [cachePolicy] Trace cachePolicy\n     * @property {Trace.IQueryPlanNode|null} [queryPlan] Trace queryPlan\n     * @property {boolean|null} [fullQueryCacheHit] Trace fullQueryCacheHit\n     * @property {boolean|null} [persistedQueryHit] Trace persistedQueryHit\n     * @property {boolean|null} [persistedQueryRegister] Trace persistedQueryRegister\n     * @property {boolean|null} [registeredOperation] Trace registeredOperation\n     * @property {boolean|null} [forbiddenOperation] Trace forbiddenOperation\n     * @property {number|null} [fieldExecutionWeight] Trace fieldExecutionWeight\n     */\n\n    /**\n     * Constructs a new Trace.\n     * @exports Trace\n     * @classdesc Represents a Trace.\n     * @implements ITrace\n     * @constructor\n     * @param {ITrace=} [properties] Properties to set\n     */\n    function Trace(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Trace startTime.\n     * @member {google.protobuf.ITimestamp|null|undefined} startTime\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.startTime = null;\n\n    /**\n     * Trace endTime.\n     * @member {google.protobuf.ITimestamp|null|undefined} endTime\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.endTime = null;\n\n    /**\n     * Trace durationNs.\n     * @member {number} durationNs\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.durationNs = 0;\n\n    /**\n     * Trace root.\n     * @member {Trace.INode|null|undefined} root\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.root = null;\n\n    /**\n     * Trace isIncomplete.\n     * @member {boolean} isIncomplete\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.isIncomplete = false;\n\n    /**\n     * Trace signature.\n     * @member {string} signature\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.signature = \"\";\n\n    /**\n     * Trace unexecutedOperationBody.\n     * @member {string} unexecutedOperationBody\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.unexecutedOperationBody = \"\";\n\n    /**\n     * Trace unexecutedOperationName.\n     * @member {string} unexecutedOperationName\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.unexecutedOperationName = \"\";\n\n    /**\n     * Trace details.\n     * @member {Trace.IDetails|null|undefined} details\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.details = null;\n\n    /**\n     * Trace clientName.\n     * @member {string} clientName\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.clientName = \"\";\n\n    /**\n     * Trace clientVersion.\n     * @member {string} clientVersion\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.clientVersion = \"\";\n\n    /**\n     * Trace http.\n     * @member {Trace.IHTTP|null|undefined} http\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.http = null;\n\n    /**\n     * Trace cachePolicy.\n     * @member {Trace.ICachePolicy|null|undefined} cachePolicy\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.cachePolicy = null;\n\n    /**\n     * Trace queryPlan.\n     * @member {Trace.IQueryPlanNode|null|undefined} queryPlan\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.queryPlan = null;\n\n    /**\n     * Trace fullQueryCacheHit.\n     * @member {boolean} fullQueryCacheHit\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.fullQueryCacheHit = false;\n\n    /**\n     * Trace persistedQueryHit.\n     * @member {boolean} persistedQueryHit\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.persistedQueryHit = false;\n\n    /**\n     * Trace persistedQueryRegister.\n     * @member {boolean} persistedQueryRegister\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.persistedQueryRegister = false;\n\n    /**\n     * Trace registeredOperation.\n     * @member {boolean} registeredOperation\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.registeredOperation = false;\n\n    /**\n     * Trace forbiddenOperation.\n     * @member {boolean} forbiddenOperation\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.forbiddenOperation = false;\n\n    /**\n     * Trace fieldExecutionWeight.\n     * @member {number} fieldExecutionWeight\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.fieldExecutionWeight = 0;\n\n    /**\n     * Creates a new Trace instance using the specified properties.\n     * @function create\n     * @memberof Trace\n     * @static\n     * @param {ITrace=} [properties] Properties to set\n     * @returns {Trace} Trace instance\n     */\n    Trace.create = function create(properties) {\n        return new Trace(properties);\n    };\n\n    /**\n     * Encodes the specified Trace message. Does not implicitly {@link Trace.verify|verify} messages.\n     * @function encode\n     * @memberof Trace\n     * @static\n     * @param {ITrace} message Trace message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Trace.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.endTime != null && Object.hasOwnProperty.call(message, \"endTime\"))\n            $root.google.protobuf.Timestamp.encode(message.endTime, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n        if (message.startTime != null && Object.hasOwnProperty.call(message, \"startTime\"))\n            $root.google.protobuf.Timestamp.encode(message.startTime, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n        if (message.details != null && Object.hasOwnProperty.call(message, \"details\"))\n            $root.Trace.Details.encode(message.details, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n        if (message.clientName != null && Object.hasOwnProperty.call(message, \"clientName\"))\n            writer.uint32(/* id 7, wireType 2 =*/58).string(message.clientName);\n        if (message.clientVersion != null && Object.hasOwnProperty.call(message, \"clientVersion\"))\n            writer.uint32(/* id 8, wireType 2 =*/66).string(message.clientVersion);\n        if (message.http != null && Object.hasOwnProperty.call(message, \"http\"))\n            $root.Trace.HTTP.encode(message.http, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n        if (message.durationNs != null && Object.hasOwnProperty.call(message, \"durationNs\"))\n            writer.uint32(/* id 11, wireType 0 =*/88).uint64(message.durationNs);\n        if (message.root != null && Object.hasOwnProperty.call(message, \"root\"))\n            $root.Trace.Node.encode(message.root, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n        if (message.cachePolicy != null && Object.hasOwnProperty.call(message, \"cachePolicy\"))\n            $root.Trace.CachePolicy.encode(message.cachePolicy, writer.uint32(/* id 18, wireType 2 =*/146).fork()).ldelim();\n        if (message.signature != null && Object.hasOwnProperty.call(message, \"signature\"))\n            writer.uint32(/* id 19, wireType 2 =*/154).string(message.signature);\n        if (message.fullQueryCacheHit != null && Object.hasOwnProperty.call(message, \"fullQueryCacheHit\"))\n            writer.uint32(/* id 20, wireType 0 =*/160).bool(message.fullQueryCacheHit);\n        if (message.persistedQueryHit != null && Object.hasOwnProperty.call(message, \"persistedQueryHit\"))\n            writer.uint32(/* id 21, wireType 0 =*/168).bool(message.persistedQueryHit);\n        if (message.persistedQueryRegister != null && Object.hasOwnProperty.call(message, \"persistedQueryRegister\"))\n            writer.uint32(/* id 22, wireType 0 =*/176).bool(message.persistedQueryRegister);\n        if (message.registeredOperation != null && Object.hasOwnProperty.call(message, \"registeredOperation\"))\n            writer.uint32(/* id 24, wireType 0 =*/192).bool(message.registeredOperation);\n        if (message.forbiddenOperation != null && Object.hasOwnProperty.call(message, \"forbiddenOperation\"))\n            writer.uint32(/* id 25, wireType 0 =*/200).bool(message.forbiddenOperation);\n        if (message.queryPlan != null && Object.hasOwnProperty.call(message, \"queryPlan\"))\n            $root.Trace.QueryPlanNode.encode(message.queryPlan, writer.uint32(/* id 26, wireType 2 =*/210).fork()).ldelim();\n        if (message.unexecutedOperationBody != null && Object.hasOwnProperty.call(message, \"unexecutedOperationBody\"))\n            writer.uint32(/* id 27, wireType 2 =*/218).string(message.unexecutedOperationBody);\n        if (message.unexecutedOperationName != null && Object.hasOwnProperty.call(message, \"unexecutedOperationName\"))\n            writer.uint32(/* id 28, wireType 2 =*/226).string(message.unexecutedOperationName);\n        if (message.fieldExecutionWeight != null && Object.hasOwnProperty.call(message, \"fieldExecutionWeight\"))\n            writer.uint32(/* id 31, wireType 1 =*/249).double(message.fieldExecutionWeight);\n        if (message.isIncomplete != null && Object.hasOwnProperty.call(message, \"isIncomplete\"))\n            writer.uint32(/* id 33, wireType 0 =*/264).bool(message.isIncomplete);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified Trace message, length delimited. Does not implicitly {@link Trace.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Trace\n     * @static\n     * @param {ITrace} message Trace message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Trace.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a Trace message from the specified reader or buffer.\n     * @function decode\n     * @memberof Trace\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Trace} Trace\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Trace.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 4:\n                message.startTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());\n                break;\n            case 3:\n                message.endTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());\n                break;\n            case 11:\n                message.durationNs = reader.uint64();\n                break;\n            case 14:\n                message.root = $root.Trace.Node.decode(reader, reader.uint32());\n                break;\n            case 33:\n                message.isIncomplete = reader.bool();\n                break;\n            case 19:\n                message.signature = reader.string();\n                break;\n            case 27:\n                message.unexecutedOperationBody = reader.string();\n                break;\n            case 28:\n                message.unexecutedOperationName = reader.string();\n                break;\n            case 6:\n                message.details = $root.Trace.Details.decode(reader, reader.uint32());\n                break;\n            case 7:\n                message.clientName = reader.string();\n                break;\n            case 8:\n                message.clientVersion = reader.string();\n                break;\n            case 10:\n                message.http = $root.Trace.HTTP.decode(reader, reader.uint32());\n                break;\n            case 18:\n                message.cachePolicy = $root.Trace.CachePolicy.decode(reader, reader.uint32());\n                break;\n            case 26:\n                message.queryPlan = $root.Trace.QueryPlanNode.decode(reader, reader.uint32());\n                break;\n            case 20:\n                message.fullQueryCacheHit = reader.bool();\n                break;\n            case 21:\n                message.persistedQueryHit = reader.bool();\n                break;\n            case 22:\n                message.persistedQueryRegister = reader.bool();\n                break;\n            case 24:\n                message.registeredOperation = reader.bool();\n                break;\n            case 25:\n                message.forbiddenOperation = reader.bool();\n                break;\n            case 31:\n                message.fieldExecutionWeight = reader.double();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a Trace message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Trace\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Trace} Trace\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Trace.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a Trace message.\n     * @function verify\n     * @memberof Trace\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    Trace.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.startTime != null && message.hasOwnProperty(\"startTime\")) {\n            var error = $root.google.protobuf.Timestamp.verify(message.startTime);\n            if (error)\n                return \"startTime.\" + error;\n        }\n        if (message.endTime != null && message.hasOwnProperty(\"endTime\")) {\n            var error = $root.google.protobuf.Timestamp.verify(message.endTime);\n            if (error)\n                return \"endTime.\" + error;\n        }\n        if (message.durationNs != null && message.hasOwnProperty(\"durationNs\"))\n            if (!$util.isInteger(message.durationNs) && !(message.durationNs && $util.isInteger(message.durationNs.low) && $util.isInteger(message.durationNs.high)))\n                return \"durationNs: integer|Long expected\";\n        if (message.root != null && message.hasOwnProperty(\"root\")) {\n            var error = $root.Trace.Node.verify(message.root);\n            if (error)\n                return \"root.\" + error;\n        }\n        if (message.isIncomplete != null && message.hasOwnProperty(\"isIncomplete\"))\n            if (typeof message.isIncomplete !== \"boolean\")\n                return \"isIncomplete: boolean expected\";\n        if (message.signature != null && message.hasOwnProperty(\"signature\"))\n            if (!$util.isString(message.signature))\n                return \"signature: string expected\";\n        if (message.unexecutedOperationBody != null && message.hasOwnProperty(\"unexecutedOperationBody\"))\n            if (!$util.isString(message.unexecutedOperationBody))\n                return \"unexecutedOperationBody: string expected\";\n        if (message.unexecutedOperationName != null && message.hasOwnProperty(\"unexecutedOperationName\"))\n            if (!$util.isString(message.unexecutedOperationName))\n                return \"unexecutedOperationName: string expected\";\n        if (message.details != null && message.hasOwnProperty(\"details\")) {\n            var error = $root.Trace.Details.verify(message.details);\n            if (error)\n                return \"details.\" + error;\n        }\n        if (message.clientName != null && message.hasOwnProperty(\"clientName\"))\n            if (!$util.isString(message.clientName))\n                return \"clientName: string expected\";\n        if (message.clientVersion != null && message.hasOwnProperty(\"clientVersion\"))\n            if (!$util.isString(message.clientVersion))\n                return \"clientVersion: string expected\";\n        if (message.http != null && message.hasOwnProperty(\"http\")) {\n            var error = $root.Trace.HTTP.verify(message.http);\n            if (error)\n                return \"http.\" + error;\n        }\n        if (message.cachePolicy != null && message.hasOwnProperty(\"cachePolicy\")) {\n            var error = $root.Trace.CachePolicy.verify(message.cachePolicy);\n            if (error)\n                return \"cachePolicy.\" + error;\n        }\n        if (message.queryPlan != null && message.hasOwnProperty(\"queryPlan\")) {\n            var error = $root.Trace.QueryPlanNode.verify(message.queryPlan);\n            if (error)\n                return \"queryPlan.\" + error;\n        }\n        if (message.fullQueryCacheHit != null && message.hasOwnProperty(\"fullQueryCacheHit\"))\n            if (typeof message.fullQueryCacheHit !== \"boolean\")\n                return \"fullQueryCacheHit: boolean expected\";\n        if (message.persistedQueryHit != null && message.hasOwnProperty(\"persistedQueryHit\"))\n            if (typeof message.persistedQueryHit !== \"boolean\")\n                return \"persistedQueryHit: boolean expected\";\n        if (message.persistedQueryRegister != null && message.hasOwnProperty(\"persistedQueryRegister\"))\n            if (typeof message.persistedQueryRegister !== \"boolean\")\n                return \"persistedQueryRegister: boolean expected\";\n        if (message.registeredOperation != null && message.hasOwnProperty(\"registeredOperation\"))\n            if (typeof message.registeredOperation !== \"boolean\")\n                return \"registeredOperation: boolean expected\";\n        if (message.forbiddenOperation != null && message.hasOwnProperty(\"forbiddenOperation\"))\n            if (typeof message.forbiddenOperation !== \"boolean\")\n                return \"forbiddenOperation: boolean expected\";\n        if (message.fieldExecutionWeight != null && message.hasOwnProperty(\"fieldExecutionWeight\"))\n            if (typeof message.fieldExecutionWeight !== \"number\")\n                return \"fieldExecutionWeight: number expected\";\n        return null;\n    };\n\n    /**\n     * Creates a plain object from a Trace message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Trace\n     * @static\n     * @param {Trace} message Trace\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Trace.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.endTime = null;\n            object.startTime = null;\n            object.details = null;\n            object.clientName = \"\";\n            object.clientVersion = \"\";\n            object.http = null;\n            object.durationNs = 0;\n            object.root = null;\n            object.cachePolicy = null;\n            object.signature = \"\";\n            object.fullQueryCacheHit = false;\n            object.persistedQueryHit = false;\n            object.persistedQueryRegister = false;\n            object.registeredOperation = false;\n            object.forbiddenOperation = false;\n            object.queryPlan = null;\n            object.unexecutedOperationBody = \"\";\n            object.unexecutedOperationName = \"\";\n            object.fieldExecutionWeight = 0;\n            object.isIncomplete = false;\n        }\n        if (message.endTime != null && message.hasOwnProperty(\"endTime\"))\n            object.endTime = $root.google.protobuf.Timestamp.toObject(message.endTime, options);\n        if (message.startTime != null && message.hasOwnProperty(\"startTime\"))\n            object.startTime = $root.google.protobuf.Timestamp.toObject(message.startTime, options);\n        if (message.details != null && message.hasOwnProperty(\"details\"))\n            object.details = $root.Trace.Details.toObject(message.details, options);\n        if (message.clientName != null && message.hasOwnProperty(\"clientName\"))\n            object.clientName = message.clientName;\n        if (message.clientVersion != null && message.hasOwnProperty(\"clientVersion\"))\n            object.clientVersion = message.clientVersion;\n        if (message.http != null && message.hasOwnProperty(\"http\"))\n            object.http = $root.Trace.HTTP.toObject(message.http, options);\n        if (message.durationNs != null && message.hasOwnProperty(\"durationNs\"))\n            if (typeof message.durationNs === \"number\")\n                object.durationNs = options.longs === String ? String(message.durationNs) : message.durationNs;\n            else\n                object.durationNs = options.longs === String ? $util.Long.prototype.toString.call(message.durationNs) : options.longs === Number ? new $util.LongBits(message.durationNs.low >>> 0, message.durationNs.high >>> 0).toNumber(true) : message.durationNs;\n        if (message.root != null && message.hasOwnProperty(\"root\"))\n            object.root = $root.Trace.Node.toObject(message.root, options);\n        if (message.cachePolicy != null && message.hasOwnProperty(\"cachePolicy\"))\n            object.cachePolicy = $root.Trace.CachePolicy.toObject(message.cachePolicy, options);\n        if (message.signature != null && message.hasOwnProperty(\"signature\"))\n            object.signature = message.signature;\n        if (message.fullQueryCacheHit != null && message.hasOwnProperty(\"fullQueryCacheHit\"))\n            object.fullQueryCacheHit = message.fullQueryCacheHit;\n        if (message.persistedQueryHit != null && message.hasOwnProperty(\"persistedQueryHit\"))\n            object.persistedQueryHit = message.persistedQueryHit;\n        if (message.persistedQueryRegister != null && message.hasOwnProperty(\"persistedQueryRegister\"))\n            object.persistedQueryRegister = message.persistedQueryRegister;\n        if (message.registeredOperation != null && message.hasOwnProperty(\"registeredOperation\"))\n            object.registeredOperation = message.registeredOperation;\n        if (message.forbiddenOperation != null && message.hasOwnProperty(\"forbiddenOperation\"))\n            object.forbiddenOperation = message.forbiddenOperation;\n        if (message.queryPlan != null && message.hasOwnProperty(\"queryPlan\"))\n            object.queryPlan = $root.Trace.QueryPlanNode.toObject(message.queryPlan, options);\n        if (message.unexecutedOperationBody != null && message.hasOwnProperty(\"unexecutedOperationBody\"))\n            object.unexecutedOperationBody = message.unexecutedOperationBody;\n        if (message.unexecutedOperationName != null && message.hasOwnProperty(\"unexecutedOperationName\"))\n            object.unexecutedOperationName = message.unexecutedOperationName;\n        if (message.fieldExecutionWeight != null && message.hasOwnProperty(\"fieldExecutionWeight\"))\n            object.fieldExecutionWeight = options.json && !isFinite(message.fieldExecutionWeight) ? String(message.fieldExecutionWeight) : message.fieldExecutionWeight;\n        if (message.isIncomplete != null && message.hasOwnProperty(\"isIncomplete\"))\n            object.isIncomplete = message.isIncomplete;\n        return object;\n    };\n\n    /**\n     * Converts this Trace to JSON.\n     * @function toJSON\n     * @memberof Trace\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Trace.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    Trace.CachePolicy = (function() {\n\n        /**\n         * Properties of a CachePolicy.\n         * @memberof Trace\n         * @interface ICachePolicy\n         * @property {Trace.CachePolicy.Scope|null} [scope] CachePolicy scope\n         * @property {number|null} [maxAgeNs] CachePolicy maxAgeNs\n         */\n\n        /**\n         * Constructs a new CachePolicy.\n         * @memberof Trace\n         * @classdesc Represents a CachePolicy.\n         * @implements ICachePolicy\n         * @constructor\n         * @param {Trace.ICachePolicy=} [properties] Properties to set\n         */\n        function CachePolicy(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * CachePolicy scope.\n         * @member {Trace.CachePolicy.Scope} scope\n         * @memberof Trace.CachePolicy\n         * @instance\n         */\n        CachePolicy.prototype.scope = 0;\n\n        /**\n         * CachePolicy maxAgeNs.\n         * @member {number} maxAgeNs\n         * @memberof Trace.CachePolicy\n         * @instance\n         */\n        CachePolicy.prototype.maxAgeNs = 0;\n\n        /**\n         * Creates a new CachePolicy instance using the specified properties.\n         * @function create\n         * @memberof Trace.CachePolicy\n         * @static\n         * @param {Trace.ICachePolicy=} [properties] Properties to set\n         * @returns {Trace.CachePolicy} CachePolicy instance\n         */\n        CachePolicy.create = function create(properties) {\n            return new CachePolicy(properties);\n        };\n\n        /**\n         * Encodes the specified CachePolicy message. Does not implicitly {@link Trace.CachePolicy.verify|verify} messages.\n         * @function encode\n         * @memberof Trace.CachePolicy\n         * @static\n         * @param {Trace.ICachePolicy} message CachePolicy message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CachePolicy.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.scope != null && Object.hasOwnProperty.call(message, \"scope\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.scope);\n            if (message.maxAgeNs != null && Object.hasOwnProperty.call(message, \"maxAgeNs\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.maxAgeNs);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified CachePolicy message, length delimited. Does not implicitly {@link Trace.CachePolicy.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Trace.CachePolicy\n         * @static\n         * @param {Trace.ICachePolicy} message CachePolicy message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CachePolicy.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a CachePolicy message from the specified reader or buffer.\n         * @function decode\n         * @memberof Trace.CachePolicy\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Trace.CachePolicy} CachePolicy\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CachePolicy.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.CachePolicy();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.scope = reader.int32();\n                    break;\n                case 2:\n                    message.maxAgeNs = reader.int64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a CachePolicy message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Trace.CachePolicy\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Trace.CachePolicy} CachePolicy\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CachePolicy.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a CachePolicy message.\n         * @function verify\n         * @memberof Trace.CachePolicy\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        CachePolicy.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.scope != null && message.hasOwnProperty(\"scope\"))\n                switch (message.scope) {\n                default:\n                    return \"scope: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                    break;\n                }\n            if (message.maxAgeNs != null && message.hasOwnProperty(\"maxAgeNs\"))\n                if (!$util.isInteger(message.maxAgeNs) && !(message.maxAgeNs && $util.isInteger(message.maxAgeNs.low) && $util.isInteger(message.maxAgeNs.high)))\n                    return \"maxAgeNs: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates a plain object from a CachePolicy message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Trace.CachePolicy\n         * @static\n         * @param {Trace.CachePolicy} message CachePolicy\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        CachePolicy.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.scope = options.enums === String ? \"UNKNOWN\" : 0;\n                object.maxAgeNs = 0;\n            }\n            if (message.scope != null && message.hasOwnProperty(\"scope\"))\n                object.scope = options.enums === String ? $root.Trace.CachePolicy.Scope[message.scope] : message.scope;\n            if (message.maxAgeNs != null && message.hasOwnProperty(\"maxAgeNs\"))\n                if (typeof message.maxAgeNs === \"number\")\n                    object.maxAgeNs = options.longs === String ? String(message.maxAgeNs) : message.maxAgeNs;\n                else\n                    object.maxAgeNs = options.longs === String ? $util.Long.prototype.toString.call(message.maxAgeNs) : options.longs === Number ? new $util.LongBits(message.maxAgeNs.low >>> 0, message.maxAgeNs.high >>> 0).toNumber() : message.maxAgeNs;\n            return object;\n        };\n\n        /**\n         * Converts this CachePolicy to JSON.\n         * @function toJSON\n         * @memberof Trace.CachePolicy\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        CachePolicy.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Scope enum.\n         * @name Trace.CachePolicy.Scope\n         * @enum {string}\n         * @property {number} UNKNOWN=0 UNKNOWN value\n         * @property {number} PUBLIC=1 PUBLIC value\n         * @property {number} PRIVATE=2 PRIVATE value\n         */\n        CachePolicy.Scope = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNKNOWN\"] = 0;\n            values[valuesById[1] = \"PUBLIC\"] = 1;\n            values[valuesById[2] = \"PRIVATE\"] = 2;\n            return values;\n        })();\n\n        return CachePolicy;\n    })();\n\n    Trace.Details = (function() {\n\n        /**\n         * Properties of a Details.\n         * @memberof Trace\n         * @interface IDetails\n         * @property {Object.<string,string>|null} [variablesJson] Details variablesJson\n         * @property {string|null} [operationName] Details operationName\n         */\n\n        /**\n         * Constructs a new Details.\n         * @memberof Trace\n         * @classdesc Represents a Details.\n         * @implements IDetails\n         * @constructor\n         * @param {Trace.IDetails=} [properties] Properties to set\n         */\n        function Details(properties) {\n            this.variablesJson = {};\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Details variablesJson.\n         * @member {Object.<string,string>} variablesJson\n         * @memberof Trace.Details\n         * @instance\n         */\n        Details.prototype.variablesJson = $util.emptyObject;\n\n        /**\n         * Details operationName.\n         * @member {string} operationName\n         * @memberof Trace.Details\n         * @instance\n         */\n        Details.prototype.operationName = \"\";\n\n        /**\n         * Creates a new Details instance using the specified properties.\n         * @function create\n         * @memberof Trace.Details\n         * @static\n         * @param {Trace.IDetails=} [properties] Properties to set\n         * @returns {Trace.Details} Details instance\n         */\n        Details.create = function create(properties) {\n            return new Details(properties);\n        };\n\n        /**\n         * Encodes the specified Details message. Does not implicitly {@link Trace.Details.verify|verify} messages.\n         * @function encode\n         * @memberof Trace.Details\n         * @static\n         * @param {Trace.IDetails} message Details message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Details.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.operationName != null && Object.hasOwnProperty.call(message, \"operationName\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.operationName);\n            if (message.variablesJson != null && Object.hasOwnProperty.call(message, \"variablesJson\"))\n                for (var keys = Object.keys(message.variablesJson), i = 0; i < keys.length; ++i)\n                    writer.uint32(/* id 4, wireType 2 =*/34).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.variablesJson[keys[i]]).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Details message, length delimited. Does not implicitly {@link Trace.Details.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Trace.Details\n         * @static\n         * @param {Trace.IDetails} message Details message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Details.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a Details message from the specified reader or buffer.\n         * @function decode\n         * @memberof Trace.Details\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Trace.Details} Details\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Details.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.Details(), key;\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 4:\n                    reader.skip().pos++;\n                    if (message.variablesJson === $util.emptyObject)\n                        message.variablesJson = {};\n                    key = reader.string();\n                    reader.pos++;\n                    message.variablesJson[key] = reader.string();\n                    break;\n                case 3:\n                    message.operationName = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a Details message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Trace.Details\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Trace.Details} Details\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Details.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a Details message.\n         * @function verify\n         * @memberof Trace.Details\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Details.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.variablesJson != null && message.hasOwnProperty(\"variablesJson\")) {\n                if (!$util.isObject(message.variablesJson))\n                    return \"variablesJson: object expected\";\n                var key = Object.keys(message.variablesJson);\n                for (var i = 0; i < key.length; ++i)\n                    if (!$util.isString(message.variablesJson[key[i]]))\n                        return \"variablesJson: string{k:string} expected\";\n            }\n            if (message.operationName != null && message.hasOwnProperty(\"operationName\"))\n                if (!$util.isString(message.operationName))\n                    return \"operationName: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a plain object from a Details message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Trace.Details\n         * @static\n         * @param {Trace.Details} message Details\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Details.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.objects || options.defaults)\n                object.variablesJson = {};\n            if (options.defaults)\n                object.operationName = \"\";\n            if (message.operationName != null && message.hasOwnProperty(\"operationName\"))\n                object.operationName = message.operationName;\n            var keys2;\n            if (message.variablesJson && (keys2 = Object.keys(message.variablesJson)).length) {\n                object.variablesJson = {};\n                for (var j = 0; j < keys2.length; ++j)\n                    object.variablesJson[keys2[j]] = message.variablesJson[keys2[j]];\n            }\n            return object;\n        };\n\n        /**\n         * Converts this Details to JSON.\n         * @function toJSON\n         * @memberof Trace.Details\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Details.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return Details;\n    })();\n\n    Trace.Error = (function() {\n\n        /**\n         * Properties of an Error.\n         * @memberof Trace\n         * @interface IError\n         * @property {string|null} [message] Error message\n         * @property {Array.<Trace.ILocation>|null} [location] Error location\n         * @property {number|null} [timeNs] Error timeNs\n         * @property {string|null} [json] Error json\n         */\n\n        /**\n         * Constructs a new Error.\n         * @memberof Trace\n         * @classdesc Represents an Error.\n         * @implements IError\n         * @constructor\n         * @param {Trace.IError=} [properties] Properties to set\n         */\n        function Error(properties) {\n            this.location = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Error message.\n         * @member {string} message\n         * @memberof Trace.Error\n         * @instance\n         */\n        Error.prototype.message = \"\";\n\n        /**\n         * Error location.\n         * @member {Array.<Trace.ILocation>} location\n         * @memberof Trace.Error\n         * @instance\n         */\n        Error.prototype.location = $util.emptyArray;\n\n        /**\n         * Error timeNs.\n         * @member {number} timeNs\n         * @memberof Trace.Error\n         * @instance\n         */\n        Error.prototype.timeNs = 0;\n\n        /**\n         * Error json.\n         * @member {string} json\n         * @memberof Trace.Error\n         * @instance\n         */\n        Error.prototype.json = \"\";\n\n        /**\n         * Creates a new Error instance using the specified properties.\n         * @function create\n         * @memberof Trace.Error\n         * @static\n         * @param {Trace.IError=} [properties] Properties to set\n         * @returns {Trace.Error} Error instance\n         */\n        Error.create = function create(properties) {\n            return new Error(properties);\n        };\n\n        /**\n         * Encodes the specified Error message. Does not implicitly {@link Trace.Error.verify|verify} messages.\n         * @function encode\n         * @memberof Trace.Error\n         * @static\n         * @param {Trace.IError} message Error message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Error.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.message != null && Object.hasOwnProperty.call(message, \"message\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.message);\n            if (message.location != null && message.location.length)\n                for (var i = 0; i < message.location.length; ++i)\n                    $root.Trace.Location.encode(message.location[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.timeNs != null && Object.hasOwnProperty.call(message, \"timeNs\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.timeNs);\n            if (message.json != null && Object.hasOwnProperty.call(message, \"json\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.json);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Error message, length delimited. Does not implicitly {@link Trace.Error.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Trace.Error\n         * @static\n         * @param {Trace.IError} message Error message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Error.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an Error message from the specified reader or buffer.\n         * @function decode\n         * @memberof Trace.Error\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Trace.Error} Error\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Error.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.Error();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.message = reader.string();\n                    break;\n                case 2:\n                    if (!(message.location && message.location.length))\n                        message.location = [];\n                    message.location.push($root.Trace.Location.decode(reader, reader.uint32()));\n                    break;\n                case 3:\n                    message.timeNs = reader.uint64();\n                    break;\n                case 4:\n                    message.json = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an Error message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Trace.Error\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Trace.Error} Error\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Error.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an Error message.\n         * @function verify\n         * @memberof Trace.Error\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Error.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.message != null && message.hasOwnProperty(\"message\"))\n                if (!$util.isString(message.message))\n                    return \"message: string expected\";\n            if (message.location != null && message.hasOwnProperty(\"location\")) {\n                if (!Array.isArray(message.location))\n                    return \"location: array expected\";\n                for (var i = 0; i < message.location.length; ++i) {\n                    var error = $root.Trace.Location.verify(message.location[i]);\n                    if (error)\n                        return \"location.\" + error;\n                }\n            }\n            if (message.timeNs != null && message.hasOwnProperty(\"timeNs\"))\n                if (!$util.isInteger(message.timeNs) && !(message.timeNs && $util.isInteger(message.timeNs.low) && $util.isInteger(message.timeNs.high)))\n                    return \"timeNs: integer|Long expected\";\n            if (message.json != null && message.hasOwnProperty(\"json\"))\n                if (!$util.isString(message.json))\n                    return \"json: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a plain object from an Error message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Trace.Error\n         * @static\n         * @param {Trace.Error} message Error\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Error.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.location = [];\n            if (options.defaults) {\n                object.message = \"\";\n                object.timeNs = 0;\n                object.json = \"\";\n            }\n            if (message.message != null && message.hasOwnProperty(\"message\"))\n                object.message = message.message;\n            if (message.location && message.location.length) {\n                object.location = [];\n                for (var j = 0; j < message.location.length; ++j)\n                    object.location[j] = $root.Trace.Location.toObject(message.location[j], options);\n            }\n            if (message.timeNs != null && message.hasOwnProperty(\"timeNs\"))\n                if (typeof message.timeNs === \"number\")\n                    object.timeNs = options.longs === String ? String(message.timeNs) : message.timeNs;\n                else\n                    object.timeNs = options.longs === String ? $util.Long.prototype.toString.call(message.timeNs) : options.longs === Number ? new $util.LongBits(message.timeNs.low >>> 0, message.timeNs.high >>> 0).toNumber(true) : message.timeNs;\n            if (message.json != null && message.hasOwnProperty(\"json\"))\n                object.json = message.json;\n            return object;\n        };\n\n        /**\n         * Converts this Error to JSON.\n         * @function toJSON\n         * @memberof Trace.Error\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Error.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return Error;\n    })();\n\n    Trace.HTTP = (function() {\n\n        /**\n         * Properties of a HTTP.\n         * @memberof Trace\n         * @interface IHTTP\n         * @property {Trace.HTTP.Method|null} [method] HTTP method\n         * @property {Object.<string,Trace.HTTP.IValues>|null} [requestHeaders] HTTP requestHeaders\n         * @property {Object.<string,Trace.HTTP.IValues>|null} [responseHeaders] HTTP responseHeaders\n         * @property {number|null} [statusCode] HTTP statusCode\n         */\n\n        /**\n         * Constructs a new HTTP.\n         * @memberof Trace\n         * @classdesc Represents a HTTP.\n         * @implements IHTTP\n         * @constructor\n         * @param {Trace.IHTTP=} [properties] Properties to set\n         */\n        function HTTP(properties) {\n            this.requestHeaders = {};\n            this.responseHeaders = {};\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * HTTP method.\n         * @member {Trace.HTTP.Method} method\n         * @memberof Trace.HTTP\n         * @instance\n         */\n        HTTP.prototype.method = 0;\n\n        /**\n         * HTTP requestHeaders.\n         * @member {Object.<string,Trace.HTTP.IValues>} requestHeaders\n         * @memberof Trace.HTTP\n         * @instance\n         */\n        HTTP.prototype.requestHeaders = $util.emptyObject;\n\n        /**\n         * HTTP responseHeaders.\n         * @member {Object.<string,Trace.HTTP.IValues>} responseHeaders\n         * @memberof Trace.HTTP\n         * @instance\n         */\n        HTTP.prototype.responseHeaders = $util.emptyObject;\n\n        /**\n         * HTTP statusCode.\n         * @member {number} statusCode\n         * @memberof Trace.HTTP\n         * @instance\n         */\n        HTTP.prototype.statusCode = 0;\n\n        /**\n         * Creates a new HTTP instance using the specified properties.\n         * @function create\n         * @memberof Trace.HTTP\n         * @static\n         * @param {Trace.IHTTP=} [properties] Properties to set\n         * @returns {Trace.HTTP} HTTP instance\n         */\n        HTTP.create = function create(properties) {\n            return new HTTP(properties);\n        };\n\n        /**\n         * Encodes the specified HTTP message. Does not implicitly {@link Trace.HTTP.verify|verify} messages.\n         * @function encode\n         * @memberof Trace.HTTP\n         * @static\n         * @param {Trace.IHTTP} message HTTP message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        HTTP.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.method != null && Object.hasOwnProperty.call(message, \"method\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.method);\n            if (message.requestHeaders != null && Object.hasOwnProperty.call(message, \"requestHeaders\"))\n                for (var keys = Object.keys(message.requestHeaders), i = 0; i < keys.length; ++i) {\n                    writer.uint32(/* id 4, wireType 2 =*/34).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);\n                    $root.Trace.HTTP.Values.encode(message.requestHeaders[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n                }\n            if (message.responseHeaders != null && Object.hasOwnProperty.call(message, \"responseHeaders\"))\n                for (var keys = Object.keys(message.responseHeaders), i = 0; i < keys.length; ++i) {\n                    writer.uint32(/* id 5, wireType 2 =*/42).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);\n                    $root.Trace.HTTP.Values.encode(message.responseHeaders[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n                }\n            if (message.statusCode != null && Object.hasOwnProperty.call(message, \"statusCode\"))\n                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.statusCode);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified HTTP message, length delimited. Does not implicitly {@link Trace.HTTP.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Trace.HTTP\n         * @static\n         * @param {Trace.IHTTP} message HTTP message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        HTTP.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a HTTP message from the specified reader or buffer.\n         * @function decode\n         * @memberof Trace.HTTP\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Trace.HTTP} HTTP\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        HTTP.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.HTTP(), key;\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.method = reader.int32();\n                    break;\n                case 4:\n                    reader.skip().pos++;\n                    if (message.requestHeaders === $util.emptyObject)\n                        message.requestHeaders = {};\n                    key = reader.string();\n                    reader.pos++;\n                    message.requestHeaders[key] = $root.Trace.HTTP.Values.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    reader.skip().pos++;\n                    if (message.responseHeaders === $util.emptyObject)\n                        message.responseHeaders = {};\n                    key = reader.string();\n                    reader.pos++;\n                    message.responseHeaders[key] = $root.Trace.HTTP.Values.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.statusCode = reader.uint32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a HTTP message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Trace.HTTP\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Trace.HTTP} HTTP\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        HTTP.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a HTTP message.\n         * @function verify\n         * @memberof Trace.HTTP\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        HTTP.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.method != null && message.hasOwnProperty(\"method\"))\n                switch (message.method) {\n                default:\n                    return \"method: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                case 8:\n                case 9:\n                    break;\n                }\n            if (message.requestHeaders != null && message.hasOwnProperty(\"requestHeaders\")) {\n                if (!$util.isObject(message.requestHeaders))\n                    return \"requestHeaders: object expected\";\n                var key = Object.keys(message.requestHeaders);\n                for (var i = 0; i < key.length; ++i) {\n                    var error = $root.Trace.HTTP.Values.verify(message.requestHeaders[key[i]]);\n                    if (error)\n                        return \"requestHeaders.\" + error;\n                }\n            }\n            if (message.responseHeaders != null && message.hasOwnProperty(\"responseHeaders\")) {\n                if (!$util.isObject(message.responseHeaders))\n                    return \"responseHeaders: object expected\";\n                var key = Object.keys(message.responseHeaders);\n                for (var i = 0; i < key.length; ++i) {\n                    var error = $root.Trace.HTTP.Values.verify(message.responseHeaders[key[i]]);\n                    if (error)\n                        return \"responseHeaders.\" + error;\n                }\n            }\n            if (message.statusCode != null && message.hasOwnProperty(\"statusCode\"))\n                if (!$util.isInteger(message.statusCode))\n                    return \"statusCode: integer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a plain object from a HTTP message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Trace.HTTP\n         * @static\n         * @param {Trace.HTTP} message HTTP\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        HTTP.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.objects || options.defaults) {\n                object.requestHeaders = {};\n                object.responseHeaders = {};\n            }\n            if (options.defaults) {\n                object.method = options.enums === String ? \"UNKNOWN\" : 0;\n                object.statusCode = 0;\n            }\n            if (message.method != null && message.hasOwnProperty(\"method\"))\n                object.method = options.enums === String ? $root.Trace.HTTP.Method[message.method] : message.method;\n            var keys2;\n            if (message.requestHeaders && (keys2 = Object.keys(message.requestHeaders)).length) {\n                object.requestHeaders = {};\n                for (var j = 0; j < keys2.length; ++j)\n                    object.requestHeaders[keys2[j]] = $root.Trace.HTTP.Values.toObject(message.requestHeaders[keys2[j]], options);\n            }\n            if (message.responseHeaders && (keys2 = Object.keys(message.responseHeaders)).length) {\n                object.responseHeaders = {};\n                for (var j = 0; j < keys2.length; ++j)\n                    object.responseHeaders[keys2[j]] = $root.Trace.HTTP.Values.toObject(message.responseHeaders[keys2[j]], options);\n            }\n            if (message.statusCode != null && message.hasOwnProperty(\"statusCode\"))\n                object.statusCode = message.statusCode;\n            return object;\n        };\n\n        /**\n         * Converts this HTTP to JSON.\n         * @function toJSON\n         * @memberof Trace.HTTP\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        HTTP.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        HTTP.Values = (function() {\n\n            /**\n             * Properties of a Values.\n             * @memberof Trace.HTTP\n             * @interface IValues\n             * @property {Array.<string>|null} [value] Values value\n             */\n\n            /**\n             * Constructs a new Values.\n             * @memberof Trace.HTTP\n             * @classdesc Represents a Values.\n             * @implements IValues\n             * @constructor\n             * @param {Trace.HTTP.IValues=} [properties] Properties to set\n             */\n            function Values(properties) {\n                this.value = [];\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Values value.\n             * @member {Array.<string>} value\n             * @memberof Trace.HTTP.Values\n             * @instance\n             */\n            Values.prototype.value = $util.emptyArray;\n\n            /**\n             * Creates a new Values instance using the specified properties.\n             * @function create\n             * @memberof Trace.HTTP.Values\n             * @static\n             * @param {Trace.HTTP.IValues=} [properties] Properties to set\n             * @returns {Trace.HTTP.Values} Values instance\n             */\n            Values.create = function create(properties) {\n                return new Values(properties);\n            };\n\n            /**\n             * Encodes the specified Values message. Does not implicitly {@link Trace.HTTP.Values.verify|verify} messages.\n             * @function encode\n             * @memberof Trace.HTTP.Values\n             * @static\n             * @param {Trace.HTTP.IValues} message Values message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Values.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.value != null && message.value.length)\n                    for (var i = 0; i < message.value.length; ++i)\n                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.value[i]);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Values message, length delimited. Does not implicitly {@link Trace.HTTP.Values.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof Trace.HTTP.Values\n             * @static\n             * @param {Trace.HTTP.IValues} message Values message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Values.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Values message from the specified reader or buffer.\n             * @function decode\n             * @memberof Trace.HTTP.Values\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {Trace.HTTP.Values} Values\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Values.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.HTTP.Values();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        if (!(message.value && message.value.length))\n                            message.value = [];\n                        message.value.push(reader.string());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Values message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof Trace.HTTP.Values\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {Trace.HTTP.Values} Values\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Values.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Values message.\n             * @function verify\n             * @memberof Trace.HTTP.Values\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Values.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.value != null && message.hasOwnProperty(\"value\")) {\n                    if (!Array.isArray(message.value))\n                        return \"value: array expected\";\n                    for (var i = 0; i < message.value.length; ++i)\n                        if (!$util.isString(message.value[i]))\n                            return \"value: string[] expected\";\n                }\n                return null;\n            };\n\n            /**\n             * Creates a plain object from a Values message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Trace.HTTP.Values\n             * @static\n             * @param {Trace.HTTP.Values} message Values\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Values.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.arrays || options.defaults)\n                    object.value = [];\n                if (message.value && message.value.length) {\n                    object.value = [];\n                    for (var j = 0; j < message.value.length; ++j)\n                        object.value[j] = message.value[j];\n                }\n                return object;\n            };\n\n            /**\n             * Converts this Values to JSON.\n             * @function toJSON\n             * @memberof Trace.HTTP.Values\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Values.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Values;\n        })();\n\n        /**\n         * Method enum.\n         * @name Trace.HTTP.Method\n         * @enum {string}\n         * @property {number} UNKNOWN=0 UNKNOWN value\n         * @property {number} OPTIONS=1 OPTIONS value\n         * @property {number} GET=2 GET value\n         * @property {number} HEAD=3 HEAD value\n         * @property {number} POST=4 POST value\n         * @property {number} PUT=5 PUT value\n         * @property {number} DELETE=6 DELETE value\n         * @property {number} TRACE=7 TRACE value\n         * @property {number} CONNECT=8 CONNECT value\n         * @property {number} PATCH=9 PATCH value\n         */\n        HTTP.Method = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNKNOWN\"] = 0;\n            values[valuesById[1] = \"OPTIONS\"] = 1;\n            values[valuesById[2] = \"GET\"] = 2;\n            values[valuesById[3] = \"HEAD\"] = 3;\n            values[valuesById[4] = \"POST\"] = 4;\n            values[valuesById[5] = \"PUT\"] = 5;\n            values[valuesById[6] = \"DELETE\"] = 6;\n            values[valuesById[7] = \"TRACE\"] = 7;\n            values[valuesById[8] = \"CONNECT\"] = 8;\n            values[valuesById[9] = \"PATCH\"] = 9;\n            return values;\n        })();\n\n        return HTTP;\n    })();\n\n    Trace.Location = (function() {\n\n        /**\n         * Properties of a Location.\n         * @memberof Trace\n         * @interface ILocation\n         * @property {number|null} [line] Location line\n         * @property {number|null} [column] Location column\n         */\n\n        /**\n         * Constructs a new Location.\n         * @memberof Trace\n         * @classdesc Represents a Location.\n         * @implements ILocation\n         * @constructor\n         * @param {Trace.ILocation=} [properties] Properties to set\n         */\n        function Location(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Location line.\n         * @member {number} line\n         * @memberof Trace.Location\n         * @instance\n         */\n        Location.prototype.line = 0;\n\n        /**\n         * Location column.\n         * @member {number} column\n         * @memberof Trace.Location\n         * @instance\n         */\n        Location.prototype.column = 0;\n\n        /**\n         * Creates a new Location instance using the specified properties.\n         * @function create\n         * @memberof Trace.Location\n         * @static\n         * @param {Trace.ILocation=} [properties] Properties to set\n         * @returns {Trace.Location} Location instance\n         */\n        Location.create = function create(properties) {\n            return new Location(properties);\n        };\n\n        /**\n         * Encodes the specified Location message. Does not implicitly {@link Trace.Location.verify|verify} messages.\n         * @function encode\n         * @memberof Trace.Location\n         * @static\n         * @param {Trace.ILocation} message Location message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Location.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.line != null && Object.hasOwnProperty.call(message, \"line\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.line);\n            if (message.column != null && Object.hasOwnProperty.call(message, \"column\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.column);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Location message, length delimited. Does not implicitly {@link Trace.Location.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Trace.Location\n         * @static\n         * @param {Trace.ILocation} message Location message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Location.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a Location message from the specified reader or buffer.\n         * @function decode\n         * @memberof Trace.Location\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Trace.Location} Location\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Location.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.Location();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.line = reader.uint32();\n                    break;\n                case 2:\n                    message.column = reader.uint32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a Location message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Trace.Location\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Trace.Location} Location\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Location.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a Location message.\n         * @function verify\n         * @memberof Trace.Location\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Location.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.line != null && message.hasOwnProperty(\"line\"))\n                if (!$util.isInteger(message.line))\n                    return \"line: integer expected\";\n            if (message.column != null && message.hasOwnProperty(\"column\"))\n                if (!$util.isInteger(message.column))\n                    return \"column: integer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a plain object from a Location message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Trace.Location\n         * @static\n         * @param {Trace.Location} message Location\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Location.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.line = 0;\n                object.column = 0;\n            }\n            if (message.line != null && message.hasOwnProperty(\"line\"))\n                object.line = message.line;\n            if (message.column != null && message.hasOwnProperty(\"column\"))\n                object.column = message.column;\n            return object;\n        };\n\n        /**\n         * Converts this Location to JSON.\n         * @function toJSON\n         * @memberof Trace.Location\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Location.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return Location;\n    })();\n\n    Trace.Node = (function() {\n\n        /**\n         * Properties of a Node.\n         * @memberof Trace\n         * @interface INode\n         * @property {string|null} [responseName] Node responseName\n         * @property {number|null} [index] Node index\n         * @property {string|null} [originalFieldName] Node originalFieldName\n         * @property {string|null} [type] Node type\n         * @property {string|null} [parentType] Node parentType\n         * @property {Trace.ICachePolicy|null} [cachePolicy] Node cachePolicy\n         * @property {number|null} [startTime] Node startTime\n         * @property {number|null} [endTime] Node endTime\n         * @property {Array.<Trace.IError>|null} [error] Node error\n         * @property {Array.<Trace.INode>|null} [child] Node child\n         */\n\n        /**\n         * Constructs a new Node.\n         * @memberof Trace\n         * @classdesc Represents a Node.\n         * @implements INode\n         * @constructor\n         * @param {Trace.INode=} [properties] Properties to set\n         */\n        function Node(properties) {\n            this.error = [];\n            this.child = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Node responseName.\n         * @member {string} responseName\n         * @memberof Trace.Node\n         * @instance\n         */\n        Node.prototype.responseName = \"\";\n\n        /**\n         * Node index.\n         * @member {number} index\n         * @memberof Trace.Node\n         * @instance\n         */\n        Node.prototype.index = 0;\n\n        /**\n         * Node originalFieldName.\n         * @member {string} originalFieldName\n         * @memberof Trace.Node\n         * @instance\n         */\n        Node.prototype.originalFieldName = \"\";\n\n        /**\n         * Node type.\n         * @member {string} type\n         * @memberof Trace.Node\n         * @instance\n         */\n        Node.prototype.type = \"\";\n\n        /**\n         * Node parentType.\n         * @member {string} parentType\n         * @memberof Trace.Node\n         * @instance\n         */\n        Node.prototype.parentType = \"\";\n\n        /**\n         * Node cachePolicy.\n         * @member {Trace.ICachePolicy|null|undefined} cachePolicy\n         * @memberof Trace.Node\n         * @instance\n         */\n        Node.prototype.cachePolicy = null;\n\n        /**\n         * Node startTime.\n         * @member {number} startTime\n         * @memberof Trace.Node\n         * @instance\n         */\n        Node.prototype.startTime = 0;\n\n        /**\n         * Node endTime.\n         * @member {number} endTime\n         * @memberof Trace.Node\n         * @instance\n         */\n        Node.prototype.endTime = 0;\n\n        /**\n         * Node error.\n         * @member {Array.<Trace.IError>} error\n         * @memberof Trace.Node\n         * @instance\n         */\n        Node.prototype.error = $util.emptyArray;\n\n        /**\n         * Node child.\n         * @member {Array.<Trace.INode>} child\n         * @memberof Trace.Node\n         * @instance\n         */\n        Node.prototype.child = $util.emptyArray;\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * Node id.\n         * @member {\"responseName\"|\"index\"|undefined} id\n         * @memberof Trace.Node\n         * @instance\n         */\n        Object.defineProperty(Node.prototype, \"id\", {\n            get: $util.oneOfGetter($oneOfFields = [\"responseName\", \"index\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new Node instance using the specified properties.\n         * @function create\n         * @memberof Trace.Node\n         * @static\n         * @param {Trace.INode=} [properties] Properties to set\n         * @returns {Trace.Node} Node instance\n         */\n        Node.create = function create(properties) {\n            return new Node(properties);\n        };\n\n        /**\n         * Encodes the specified Node message. Does not implicitly {@link Trace.Node.verify|verify} messages.\n         * @function encode\n         * @memberof Trace.Node\n         * @static\n         * @param {Trace.INode} message Node message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Node.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.responseName != null && Object.hasOwnProperty.call(message, \"responseName\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.responseName);\n            if (message.index != null && Object.hasOwnProperty.call(message, \"index\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.index);\n            if (message.type != null && Object.hasOwnProperty.call(message, \"type\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.type);\n            if (message.cachePolicy != null && Object.hasOwnProperty.call(message, \"cachePolicy\"))\n                $root.Trace.CachePolicy.encode(message.cachePolicy, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.startTime != null && Object.hasOwnProperty.call(message, \"startTime\"))\n                writer.uint32(/* id 8, wireType 0 =*/64).uint64(message.startTime);\n            if (message.endTime != null && Object.hasOwnProperty.call(message, \"endTime\"))\n                writer.uint32(/* id 9, wireType 0 =*/72).uint64(message.endTime);\n            if (message.error != null && message.error.length)\n                for (var i = 0; i < message.error.length; ++i)\n                    $root.Trace.Error.encode(message.error[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.child != null && message.child.length)\n                for (var i = 0; i < message.child.length; ++i)\n                    $root.Trace.Node.encode(message.child[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();\n            if (message.parentType != null && Object.hasOwnProperty.call(message, \"parentType\"))\n                writer.uint32(/* id 13, wireType 2 =*/106).string(message.parentType);\n            if (message.originalFieldName != null && Object.hasOwnProperty.call(message, \"originalFieldName\"))\n                writer.uint32(/* id 14, wireType 2 =*/114).string(message.originalFieldName);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Node message, length delimited. Does not implicitly {@link Trace.Node.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Trace.Node\n         * @static\n         * @param {Trace.INode} message Node message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Node.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a Node message from the specified reader or buffer.\n         * @function decode\n         * @memberof Trace.Node\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Trace.Node} Node\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Node.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.Node();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.responseName = reader.string();\n                    break;\n                case 2:\n                    message.index = reader.uint32();\n                    break;\n                case 14:\n                    message.originalFieldName = reader.string();\n                    break;\n                case 3:\n                    message.type = reader.string();\n                    break;\n                case 13:\n                    message.parentType = reader.string();\n                    break;\n                case 5:\n                    message.cachePolicy = $root.Trace.CachePolicy.decode(reader, reader.uint32());\n                    break;\n                case 8:\n                    message.startTime = reader.uint64();\n                    break;\n                case 9:\n                    message.endTime = reader.uint64();\n                    break;\n                case 11:\n                    if (!(message.error && message.error.length))\n                        message.error = [];\n                    message.error.push($root.Trace.Error.decode(reader, reader.uint32()));\n                    break;\n                case 12:\n                    if (!(message.child && message.child.length))\n                        message.child = [];\n                    message.child.push($root.Trace.Node.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a Node message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Trace.Node\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Trace.Node} Node\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Node.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a Node message.\n         * @function verify\n         * @memberof Trace.Node\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Node.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.responseName != null && message.hasOwnProperty(\"responseName\")) {\n                properties.id = 1;\n                if (!$util.isString(message.responseName))\n                    return \"responseName: string expected\";\n            }\n            if (message.index != null && message.hasOwnProperty(\"index\")) {\n                if (properties.id === 1)\n                    return \"id: multiple values\";\n                properties.id = 1;\n                if (!$util.isInteger(message.index))\n                    return \"index: integer expected\";\n            }\n            if (message.originalFieldName != null && message.hasOwnProperty(\"originalFieldName\"))\n                if (!$util.isString(message.originalFieldName))\n                    return \"originalFieldName: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                if (!$util.isString(message.type))\n                    return \"type: string expected\";\n            if (message.parentType != null && message.hasOwnProperty(\"parentType\"))\n                if (!$util.isString(message.parentType))\n                    return \"parentType: string expected\";\n            if (message.cachePolicy != null && message.hasOwnProperty(\"cachePolicy\")) {\n                var error = $root.Trace.CachePolicy.verify(message.cachePolicy);\n                if (error)\n                    return \"cachePolicy.\" + error;\n            }\n            if (message.startTime != null && message.hasOwnProperty(\"startTime\"))\n                if (!$util.isInteger(message.startTime) && !(message.startTime && $util.isInteger(message.startTime.low) && $util.isInteger(message.startTime.high)))\n                    return \"startTime: integer|Long expected\";\n            if (message.endTime != null && message.hasOwnProperty(\"endTime\"))\n                if (!$util.isInteger(message.endTime) && !(message.endTime && $util.isInteger(message.endTime.low) && $util.isInteger(message.endTime.high)))\n                    return \"endTime: integer|Long expected\";\n            if (message.error != null && message.hasOwnProperty(\"error\")) {\n                if (!Array.isArray(message.error))\n                    return \"error: array expected\";\n                for (var i = 0; i < message.error.length; ++i) {\n                    var error = $root.Trace.Error.verify(message.error[i]);\n                    if (error)\n                        return \"error.\" + error;\n                }\n            }\n            if (message.child != null && message.hasOwnProperty(\"child\")) {\n                if (!Array.isArray(message.child))\n                    return \"child: array expected\";\n                for (var i = 0; i < message.child.length; ++i) {\n                    var error = $root.Trace.Node.verify(message.child[i]);\n                    if (error)\n                        return \"child.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a plain object from a Node message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Trace.Node\n         * @static\n         * @param {Trace.Node} message Node\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Node.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.error = [];\n                object.child = [];\n            }\n            if (options.defaults) {\n                object.type = \"\";\n                object.cachePolicy = null;\n                object.startTime = 0;\n                object.endTime = 0;\n                object.parentType = \"\";\n                object.originalFieldName = \"\";\n            }\n            if (message.responseName != null && message.hasOwnProperty(\"responseName\")) {\n                object.responseName = message.responseName;\n                if (options.oneofs)\n                    object.id = \"responseName\";\n            }\n            if (message.index != null && message.hasOwnProperty(\"index\")) {\n                object.index = message.index;\n                if (options.oneofs)\n                    object.id = \"index\";\n            }\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = message.type;\n            if (message.cachePolicy != null && message.hasOwnProperty(\"cachePolicy\"))\n                object.cachePolicy = $root.Trace.CachePolicy.toObject(message.cachePolicy, options);\n            if (message.startTime != null && message.hasOwnProperty(\"startTime\"))\n                if (typeof message.startTime === \"number\")\n                    object.startTime = options.longs === String ? String(message.startTime) : message.startTime;\n                else\n                    object.startTime = options.longs === String ? $util.Long.prototype.toString.call(message.startTime) : options.longs === Number ? new $util.LongBits(message.startTime.low >>> 0, message.startTime.high >>> 0).toNumber(true) : message.startTime;\n            if (message.endTime != null && message.hasOwnProperty(\"endTime\"))\n                if (typeof message.endTime === \"number\")\n                    object.endTime = options.longs === String ? String(message.endTime) : message.endTime;\n                else\n                    object.endTime = options.longs === String ? $util.Long.prototype.toString.call(message.endTime) : options.longs === Number ? new $util.LongBits(message.endTime.low >>> 0, message.endTime.high >>> 0).toNumber(true) : message.endTime;\n            if (message.error && message.error.length) {\n                object.error = [];\n                for (var j = 0; j < message.error.length; ++j)\n                    object.error[j] = $root.Trace.Error.toObject(message.error[j], options);\n            }\n            if (message.child && message.child.length) {\n                object.child = [];\n                for (var j = 0; j < message.child.length; ++j)\n                    object.child[j] = $root.Trace.Node.toObject(message.child[j], options);\n            }\n            if (message.parentType != null && message.hasOwnProperty(\"parentType\"))\n                object.parentType = message.parentType;\n            if (message.originalFieldName != null && message.hasOwnProperty(\"originalFieldName\"))\n                object.originalFieldName = message.originalFieldName;\n            return object;\n        };\n\n        /**\n         * Converts this Node to JSON.\n         * @function toJSON\n         * @memberof Trace.Node\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Node.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return Node;\n    })();\n\n    Trace.QueryPlanNode = (function() {\n\n        /**\n         * Properties of a QueryPlanNode.\n         * @memberof Trace\n         * @interface IQueryPlanNode\n         * @property {Trace.QueryPlanNode.ISequenceNode|null} [sequence] QueryPlanNode sequence\n         * @property {Trace.QueryPlanNode.IParallelNode|null} [parallel] QueryPlanNode parallel\n         * @property {Trace.QueryPlanNode.IFetchNode|null} [fetch] QueryPlanNode fetch\n         * @property {Trace.QueryPlanNode.IFlattenNode|null} [flatten] QueryPlanNode flatten\n         * @property {Trace.QueryPlanNode.IDeferNode|null} [defer] QueryPlanNode defer\n         * @property {Trace.QueryPlanNode.IConditionNode|null} [condition] QueryPlanNode condition\n         */\n\n        /**\n         * Constructs a new QueryPlanNode.\n         * @memberof Trace\n         * @classdesc Represents a QueryPlanNode.\n         * @implements IQueryPlanNode\n         * @constructor\n         * @param {Trace.IQueryPlanNode=} [properties] Properties to set\n         */\n        function QueryPlanNode(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * QueryPlanNode sequence.\n         * @member {Trace.QueryPlanNode.ISequenceNode|null|undefined} sequence\n         * @memberof Trace.QueryPlanNode\n         * @instance\n         */\n        QueryPlanNode.prototype.sequence = null;\n\n        /**\n         * QueryPlanNode parallel.\n         * @member {Trace.QueryPlanNode.IParallelNode|null|undefined} parallel\n         * @memberof Trace.QueryPlanNode\n         * @instance\n         */\n        QueryPlanNode.prototype.parallel = null;\n\n        /**\n         * QueryPlanNode fetch.\n         * @member {Trace.QueryPlanNode.IFetchNode|null|undefined} fetch\n         * @memberof Trace.QueryPlanNode\n         * @instance\n         */\n        QueryPlanNode.prototype.fetch = null;\n\n        /**\n         * QueryPlanNode flatten.\n         * @member {Trace.QueryPlanNode.IFlattenNode|null|undefined} flatten\n         * @memberof Trace.QueryPlanNode\n         * @instance\n         */\n        QueryPlanNode.prototype.flatten = null;\n\n        /**\n         * QueryPlanNode defer.\n         * @member {Trace.QueryPlanNode.IDeferNode|null|undefined} defer\n         * @memberof Trace.QueryPlanNode\n         * @instance\n         */\n        QueryPlanNode.prototype.defer = null;\n\n        /**\n         * QueryPlanNode condition.\n         * @member {Trace.QueryPlanNode.IConditionNode|null|undefined} condition\n         * @memberof Trace.QueryPlanNode\n         * @instance\n         */\n        QueryPlanNode.prototype.condition = null;\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * QueryPlanNode node.\n         * @member {\"sequence\"|\"parallel\"|\"fetch\"|\"flatten\"|\"defer\"|\"condition\"|undefined} node\n         * @memberof Trace.QueryPlanNode\n         * @instance\n         */\n        Object.defineProperty(QueryPlanNode.prototype, \"node\", {\n            get: $util.oneOfGetter($oneOfFields = [\"sequence\", \"parallel\", \"fetch\", \"flatten\", \"defer\", \"condition\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new QueryPlanNode instance using the specified properties.\n         * @function create\n         * @memberof Trace.QueryPlanNode\n         * @static\n         * @param {Trace.IQueryPlanNode=} [properties] Properties to set\n         * @returns {Trace.QueryPlanNode} QueryPlanNode instance\n         */\n        QueryPlanNode.create = function create(properties) {\n            return new QueryPlanNode(properties);\n        };\n\n        /**\n         * Encodes the specified QueryPlanNode message. Does not implicitly {@link Trace.QueryPlanNode.verify|verify} messages.\n         * @function encode\n         * @memberof Trace.QueryPlanNode\n         * @static\n         * @param {Trace.IQueryPlanNode} message QueryPlanNode message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        QueryPlanNode.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.sequence != null && Object.hasOwnProperty.call(message, \"sequence\"))\n                $root.Trace.QueryPlanNode.SequenceNode.encode(message.sequence, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.parallel != null && Object.hasOwnProperty.call(message, \"parallel\"))\n                $root.Trace.QueryPlanNode.ParallelNode.encode(message.parallel, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.fetch != null && Object.hasOwnProperty.call(message, \"fetch\"))\n                $root.Trace.QueryPlanNode.FetchNode.encode(message.fetch, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.flatten != null && Object.hasOwnProperty.call(message, \"flatten\"))\n                $root.Trace.QueryPlanNode.FlattenNode.encode(message.flatten, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n            if (message.defer != null && Object.hasOwnProperty.call(message, \"defer\"))\n                $root.Trace.QueryPlanNode.DeferNode.encode(message.defer, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.condition != null && Object.hasOwnProperty.call(message, \"condition\"))\n                $root.Trace.QueryPlanNode.ConditionNode.encode(message.condition, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified QueryPlanNode message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Trace.QueryPlanNode\n         * @static\n         * @param {Trace.IQueryPlanNode} message QueryPlanNode message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        QueryPlanNode.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a QueryPlanNode message from the specified reader or buffer.\n         * @function decode\n         * @memberof Trace.QueryPlanNode\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Trace.QueryPlanNode} QueryPlanNode\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        QueryPlanNode.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.sequence = $root.Trace.QueryPlanNode.SequenceNode.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.parallel = $root.Trace.QueryPlanNode.ParallelNode.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.fetch = $root.Trace.QueryPlanNode.FetchNode.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.flatten = $root.Trace.QueryPlanNode.FlattenNode.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    message.defer = $root.Trace.QueryPlanNode.DeferNode.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.condition = $root.Trace.QueryPlanNode.ConditionNode.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a QueryPlanNode message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Trace.QueryPlanNode\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Trace.QueryPlanNode} QueryPlanNode\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        QueryPlanNode.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a QueryPlanNode message.\n         * @function verify\n         * @memberof Trace.QueryPlanNode\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        QueryPlanNode.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.sequence != null && message.hasOwnProperty(\"sequence\")) {\n                properties.node = 1;\n                {\n                    var error = $root.Trace.QueryPlanNode.SequenceNode.verify(message.sequence);\n                    if (error)\n                        return \"sequence.\" + error;\n                }\n            }\n            if (message.parallel != null && message.hasOwnProperty(\"parallel\")) {\n                if (properties.node === 1)\n                    return \"node: multiple values\";\n                properties.node = 1;\n                {\n                    var error = $root.Trace.QueryPlanNode.ParallelNode.verify(message.parallel);\n                    if (error)\n                        return \"parallel.\" + error;\n                }\n            }\n            if (message.fetch != null && message.hasOwnProperty(\"fetch\")) {\n                if (properties.node === 1)\n                    return \"node: multiple values\";\n                properties.node = 1;\n                {\n                    var error = $root.Trace.QueryPlanNode.FetchNode.verify(message.fetch);\n                    if (error)\n                        return \"fetch.\" + error;\n                }\n            }\n            if (message.flatten != null && message.hasOwnProperty(\"flatten\")) {\n                if (properties.node === 1)\n                    return \"node: multiple values\";\n                properties.node = 1;\n                {\n                    var error = $root.Trace.QueryPlanNode.FlattenNode.verify(message.flatten);\n                    if (error)\n                        return \"flatten.\" + error;\n                }\n            }\n            if (message.defer != null && message.hasOwnProperty(\"defer\")) {\n                if (properties.node === 1)\n                    return \"node: multiple values\";\n                properties.node = 1;\n                {\n                    var error = $root.Trace.QueryPlanNode.DeferNode.verify(message.defer);\n                    if (error)\n                        return \"defer.\" + error;\n                }\n            }\n            if (message.condition != null && message.hasOwnProperty(\"condition\")) {\n                if (properties.node === 1)\n                    return \"node: multiple values\";\n                properties.node = 1;\n                {\n                    var error = $root.Trace.QueryPlanNode.ConditionNode.verify(message.condition);\n                    if (error)\n                        return \"condition.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a plain object from a QueryPlanNode message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Trace.QueryPlanNode\n         * @static\n         * @param {Trace.QueryPlanNode} message QueryPlanNode\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        QueryPlanNode.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (message.sequence != null && message.hasOwnProperty(\"sequence\")) {\n                object.sequence = $root.Trace.QueryPlanNode.SequenceNode.toObject(message.sequence, options);\n                if (options.oneofs)\n                    object.node = \"sequence\";\n            }\n            if (message.parallel != null && message.hasOwnProperty(\"parallel\")) {\n                object.parallel = $root.Trace.QueryPlanNode.ParallelNode.toObject(message.parallel, options);\n                if (options.oneofs)\n                    object.node = \"parallel\";\n            }\n            if (message.fetch != null && message.hasOwnProperty(\"fetch\")) {\n                object.fetch = $root.Trace.QueryPlanNode.FetchNode.toObject(message.fetch, options);\n                if (options.oneofs)\n                    object.node = \"fetch\";\n            }\n            if (message.flatten != null && message.hasOwnProperty(\"flatten\")) {\n                object.flatten = $root.Trace.QueryPlanNode.FlattenNode.toObject(message.flatten, options);\n                if (options.oneofs)\n                    object.node = \"flatten\";\n            }\n            if (message.defer != null && message.hasOwnProperty(\"defer\")) {\n                object.defer = $root.Trace.QueryPlanNode.DeferNode.toObject(message.defer, options);\n                if (options.oneofs)\n                    object.node = \"defer\";\n            }\n            if (message.condition != null && message.hasOwnProperty(\"condition\")) {\n                object.condition = $root.Trace.QueryPlanNode.ConditionNode.toObject(message.condition, options);\n                if (options.oneofs)\n                    object.node = \"condition\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this QueryPlanNode to JSON.\n         * @function toJSON\n         * @memberof Trace.QueryPlanNode\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        QueryPlanNode.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        QueryPlanNode.SequenceNode = (function() {\n\n            /**\n             * Properties of a SequenceNode.\n             * @memberof Trace.QueryPlanNode\n             * @interface ISequenceNode\n             * @property {Array.<Trace.IQueryPlanNode>|null} [nodes] SequenceNode nodes\n             */\n\n            /**\n             * Constructs a new SequenceNode.\n             * @memberof Trace.QueryPlanNode\n             * @classdesc Represents a SequenceNode.\n             * @implements ISequenceNode\n             * @constructor\n             * @param {Trace.QueryPlanNode.ISequenceNode=} [properties] Properties to set\n             */\n            function SequenceNode(properties) {\n                this.nodes = [];\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * SequenceNode nodes.\n             * @member {Array.<Trace.IQueryPlanNode>} nodes\n             * @memberof Trace.QueryPlanNode.SequenceNode\n             * @instance\n             */\n            SequenceNode.prototype.nodes = $util.emptyArray;\n\n            /**\n             * Creates a new SequenceNode instance using the specified properties.\n             * @function create\n             * @memberof Trace.QueryPlanNode.SequenceNode\n             * @static\n             * @param {Trace.QueryPlanNode.ISequenceNode=} [properties] Properties to set\n             * @returns {Trace.QueryPlanNode.SequenceNode} SequenceNode instance\n             */\n            SequenceNode.create = function create(properties) {\n                return new SequenceNode(properties);\n            };\n\n            /**\n             * Encodes the specified SequenceNode message. Does not implicitly {@link Trace.QueryPlanNode.SequenceNode.verify|verify} messages.\n             * @function encode\n             * @memberof Trace.QueryPlanNode.SequenceNode\n             * @static\n             * @param {Trace.QueryPlanNode.ISequenceNode} message SequenceNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            SequenceNode.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.nodes != null && message.nodes.length)\n                    for (var i = 0; i < message.nodes.length; ++i)\n                        $root.Trace.QueryPlanNode.encode(message.nodes[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified SequenceNode message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.SequenceNode.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof Trace.QueryPlanNode.SequenceNode\n             * @static\n             * @param {Trace.QueryPlanNode.ISequenceNode} message SequenceNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            SequenceNode.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a SequenceNode message from the specified reader or buffer.\n             * @function decode\n             * @memberof Trace.QueryPlanNode.SequenceNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {Trace.QueryPlanNode.SequenceNode} SequenceNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            SequenceNode.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode.SequenceNode();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        if (!(message.nodes && message.nodes.length))\n                            message.nodes = [];\n                        message.nodes.push($root.Trace.QueryPlanNode.decode(reader, reader.uint32()));\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a SequenceNode message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof Trace.QueryPlanNode.SequenceNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {Trace.QueryPlanNode.SequenceNode} SequenceNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            SequenceNode.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a SequenceNode message.\n             * @function verify\n             * @memberof Trace.QueryPlanNode.SequenceNode\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            SequenceNode.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.nodes != null && message.hasOwnProperty(\"nodes\")) {\n                    if (!Array.isArray(message.nodes))\n                        return \"nodes: array expected\";\n                    for (var i = 0; i < message.nodes.length; ++i) {\n                        var error = $root.Trace.QueryPlanNode.verify(message.nodes[i]);\n                        if (error)\n                            return \"nodes.\" + error;\n                    }\n                }\n                return null;\n            };\n\n            /**\n             * Creates a plain object from a SequenceNode message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Trace.QueryPlanNode.SequenceNode\n             * @static\n             * @param {Trace.QueryPlanNode.SequenceNode} message SequenceNode\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            SequenceNode.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.arrays || options.defaults)\n                    object.nodes = [];\n                if (message.nodes && message.nodes.length) {\n                    object.nodes = [];\n                    for (var j = 0; j < message.nodes.length; ++j)\n                        object.nodes[j] = $root.Trace.QueryPlanNode.toObject(message.nodes[j], options);\n                }\n                return object;\n            };\n\n            /**\n             * Converts this SequenceNode to JSON.\n             * @function toJSON\n             * @memberof Trace.QueryPlanNode.SequenceNode\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            SequenceNode.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return SequenceNode;\n        })();\n\n        QueryPlanNode.ParallelNode = (function() {\n\n            /**\n             * Properties of a ParallelNode.\n             * @memberof Trace.QueryPlanNode\n             * @interface IParallelNode\n             * @property {Array.<Trace.IQueryPlanNode>|null} [nodes] ParallelNode nodes\n             */\n\n            /**\n             * Constructs a new ParallelNode.\n             * @memberof Trace.QueryPlanNode\n             * @classdesc Represents a ParallelNode.\n             * @implements IParallelNode\n             * @constructor\n             * @param {Trace.QueryPlanNode.IParallelNode=} [properties] Properties to set\n             */\n            function ParallelNode(properties) {\n                this.nodes = [];\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * ParallelNode nodes.\n             * @member {Array.<Trace.IQueryPlanNode>} nodes\n             * @memberof Trace.QueryPlanNode.ParallelNode\n             * @instance\n             */\n            ParallelNode.prototype.nodes = $util.emptyArray;\n\n            /**\n             * Creates a new ParallelNode instance using the specified properties.\n             * @function create\n             * @memberof Trace.QueryPlanNode.ParallelNode\n             * @static\n             * @param {Trace.QueryPlanNode.IParallelNode=} [properties] Properties to set\n             * @returns {Trace.QueryPlanNode.ParallelNode} ParallelNode instance\n             */\n            ParallelNode.create = function create(properties) {\n                return new ParallelNode(properties);\n            };\n\n            /**\n             * Encodes the specified ParallelNode message. Does not implicitly {@link Trace.QueryPlanNode.ParallelNode.verify|verify} messages.\n             * @function encode\n             * @memberof Trace.QueryPlanNode.ParallelNode\n             * @static\n             * @param {Trace.QueryPlanNode.IParallelNode} message ParallelNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ParallelNode.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.nodes != null && message.nodes.length)\n                    for (var i = 0; i < message.nodes.length; ++i)\n                        $root.Trace.QueryPlanNode.encode(message.nodes[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified ParallelNode message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.ParallelNode.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof Trace.QueryPlanNode.ParallelNode\n             * @static\n             * @param {Trace.QueryPlanNode.IParallelNode} message ParallelNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ParallelNode.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a ParallelNode message from the specified reader or buffer.\n             * @function decode\n             * @memberof Trace.QueryPlanNode.ParallelNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {Trace.QueryPlanNode.ParallelNode} ParallelNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ParallelNode.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode.ParallelNode();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        if (!(message.nodes && message.nodes.length))\n                            message.nodes = [];\n                        message.nodes.push($root.Trace.QueryPlanNode.decode(reader, reader.uint32()));\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a ParallelNode message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof Trace.QueryPlanNode.ParallelNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {Trace.QueryPlanNode.ParallelNode} ParallelNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ParallelNode.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a ParallelNode message.\n             * @function verify\n             * @memberof Trace.QueryPlanNode.ParallelNode\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            ParallelNode.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.nodes != null && message.hasOwnProperty(\"nodes\")) {\n                    if (!Array.isArray(message.nodes))\n                        return \"nodes: array expected\";\n                    for (var i = 0; i < message.nodes.length; ++i) {\n                        var error = $root.Trace.QueryPlanNode.verify(message.nodes[i]);\n                        if (error)\n                            return \"nodes.\" + error;\n                    }\n                }\n                return null;\n            };\n\n            /**\n             * Creates a plain object from a ParallelNode message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Trace.QueryPlanNode.ParallelNode\n             * @static\n             * @param {Trace.QueryPlanNode.ParallelNode} message ParallelNode\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            ParallelNode.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.arrays || options.defaults)\n                    object.nodes = [];\n                if (message.nodes && message.nodes.length) {\n                    object.nodes = [];\n                    for (var j = 0; j < message.nodes.length; ++j)\n                        object.nodes[j] = $root.Trace.QueryPlanNode.toObject(message.nodes[j], options);\n                }\n                return object;\n            };\n\n            /**\n             * Converts this ParallelNode to JSON.\n             * @function toJSON\n             * @memberof Trace.QueryPlanNode.ParallelNode\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            ParallelNode.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return ParallelNode;\n        })();\n\n        QueryPlanNode.FetchNode = (function() {\n\n            /**\n             * Properties of a FetchNode.\n             * @memberof Trace.QueryPlanNode\n             * @interface IFetchNode\n             * @property {string|null} [serviceName] FetchNode serviceName\n             * @property {boolean|null} [traceParsingFailed] FetchNode traceParsingFailed\n             * @property {ITrace|null} [trace] FetchNode trace\n             * @property {number|null} [sentTimeOffset] FetchNode sentTimeOffset\n             * @property {google.protobuf.ITimestamp|null} [sentTime] FetchNode sentTime\n             * @property {google.protobuf.ITimestamp|null} [receivedTime] FetchNode receivedTime\n             */\n\n            /**\n             * Constructs a new FetchNode.\n             * @memberof Trace.QueryPlanNode\n             * @classdesc Represents a FetchNode.\n             * @implements IFetchNode\n             * @constructor\n             * @param {Trace.QueryPlanNode.IFetchNode=} [properties] Properties to set\n             */\n            function FetchNode(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * FetchNode serviceName.\n             * @member {string} serviceName\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @instance\n             */\n            FetchNode.prototype.serviceName = \"\";\n\n            /**\n             * FetchNode traceParsingFailed.\n             * @member {boolean} traceParsingFailed\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @instance\n             */\n            FetchNode.prototype.traceParsingFailed = false;\n\n            /**\n             * FetchNode trace.\n             * @member {ITrace|null|undefined} trace\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @instance\n             */\n            FetchNode.prototype.trace = null;\n\n            /**\n             * FetchNode sentTimeOffset.\n             * @member {number} sentTimeOffset\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @instance\n             */\n            FetchNode.prototype.sentTimeOffset = 0;\n\n            /**\n             * FetchNode sentTime.\n             * @member {google.protobuf.ITimestamp|null|undefined} sentTime\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @instance\n             */\n            FetchNode.prototype.sentTime = null;\n\n            /**\n             * FetchNode receivedTime.\n             * @member {google.protobuf.ITimestamp|null|undefined} receivedTime\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @instance\n             */\n            FetchNode.prototype.receivedTime = null;\n\n            /**\n             * Creates a new FetchNode instance using the specified properties.\n             * @function create\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @static\n             * @param {Trace.QueryPlanNode.IFetchNode=} [properties] Properties to set\n             * @returns {Trace.QueryPlanNode.FetchNode} FetchNode instance\n             */\n            FetchNode.create = function create(properties) {\n                return new FetchNode(properties);\n            };\n\n            /**\n             * Encodes the specified FetchNode message. Does not implicitly {@link Trace.QueryPlanNode.FetchNode.verify|verify} messages.\n             * @function encode\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @static\n             * @param {Trace.QueryPlanNode.IFetchNode} message FetchNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            FetchNode.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.serviceName != null && Object.hasOwnProperty.call(message, \"serviceName\"))\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.serviceName);\n                if (message.traceParsingFailed != null && Object.hasOwnProperty.call(message, \"traceParsingFailed\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.traceParsingFailed);\n                if (message.trace != null && Object.hasOwnProperty.call(message, \"trace\"))\n                    $root.Trace.encode(message.trace, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n                if (message.sentTimeOffset != null && Object.hasOwnProperty.call(message, \"sentTimeOffset\"))\n                    writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.sentTimeOffset);\n                if (message.sentTime != null && Object.hasOwnProperty.call(message, \"sentTime\"))\n                    $root.google.protobuf.Timestamp.encode(message.sentTime, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n                if (message.receivedTime != null && Object.hasOwnProperty.call(message, \"receivedTime\"))\n                    $root.google.protobuf.Timestamp.encode(message.receivedTime, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified FetchNode message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.FetchNode.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @static\n             * @param {Trace.QueryPlanNode.IFetchNode} message FetchNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            FetchNode.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a FetchNode message from the specified reader or buffer.\n             * @function decode\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {Trace.QueryPlanNode.FetchNode} FetchNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            FetchNode.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode.FetchNode();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.serviceName = reader.string();\n                        break;\n                    case 2:\n                        message.traceParsingFailed = reader.bool();\n                        break;\n                    case 3:\n                        message.trace = $root.Trace.decode(reader, reader.uint32());\n                        break;\n                    case 4:\n                        message.sentTimeOffset = reader.uint64();\n                        break;\n                    case 5:\n                        message.sentTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());\n                        break;\n                    case 6:\n                        message.receivedTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a FetchNode message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {Trace.QueryPlanNode.FetchNode} FetchNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            FetchNode.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a FetchNode message.\n             * @function verify\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            FetchNode.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.serviceName != null && message.hasOwnProperty(\"serviceName\"))\n                    if (!$util.isString(message.serviceName))\n                        return \"serviceName: string expected\";\n                if (message.traceParsingFailed != null && message.hasOwnProperty(\"traceParsingFailed\"))\n                    if (typeof message.traceParsingFailed !== \"boolean\")\n                        return \"traceParsingFailed: boolean expected\";\n                if (message.trace != null && message.hasOwnProperty(\"trace\")) {\n                    var error = $root.Trace.verify(message.trace);\n                    if (error)\n                        return \"trace.\" + error;\n                }\n                if (message.sentTimeOffset != null && message.hasOwnProperty(\"sentTimeOffset\"))\n                    if (!$util.isInteger(message.sentTimeOffset) && !(message.sentTimeOffset && $util.isInteger(message.sentTimeOffset.low) && $util.isInteger(message.sentTimeOffset.high)))\n                        return \"sentTimeOffset: integer|Long expected\";\n                if (message.sentTime != null && message.hasOwnProperty(\"sentTime\")) {\n                    var error = $root.google.protobuf.Timestamp.verify(message.sentTime);\n                    if (error)\n                        return \"sentTime.\" + error;\n                }\n                if (message.receivedTime != null && message.hasOwnProperty(\"receivedTime\")) {\n                    var error = $root.google.protobuf.Timestamp.verify(message.receivedTime);\n                    if (error)\n                        return \"receivedTime.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a plain object from a FetchNode message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @static\n             * @param {Trace.QueryPlanNode.FetchNode} message FetchNode\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            FetchNode.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.serviceName = \"\";\n                    object.traceParsingFailed = false;\n                    object.trace = null;\n                    object.sentTimeOffset = 0;\n                    object.sentTime = null;\n                    object.receivedTime = null;\n                }\n                if (message.serviceName != null && message.hasOwnProperty(\"serviceName\"))\n                    object.serviceName = message.serviceName;\n                if (message.traceParsingFailed != null && message.hasOwnProperty(\"traceParsingFailed\"))\n                    object.traceParsingFailed = message.traceParsingFailed;\n                if (message.trace != null && message.hasOwnProperty(\"trace\"))\n                    object.trace = $root.Trace.toObject(message.trace, options);\n                if (message.sentTimeOffset != null && message.hasOwnProperty(\"sentTimeOffset\"))\n                    if (typeof message.sentTimeOffset === \"number\")\n                        object.sentTimeOffset = options.longs === String ? String(message.sentTimeOffset) : message.sentTimeOffset;\n                    else\n                        object.sentTimeOffset = options.longs === String ? $util.Long.prototype.toString.call(message.sentTimeOffset) : options.longs === Number ? new $util.LongBits(message.sentTimeOffset.low >>> 0, message.sentTimeOffset.high >>> 0).toNumber(true) : message.sentTimeOffset;\n                if (message.sentTime != null && message.hasOwnProperty(\"sentTime\"))\n                    object.sentTime = $root.google.protobuf.Timestamp.toObject(message.sentTime, options);\n                if (message.receivedTime != null && message.hasOwnProperty(\"receivedTime\"))\n                    object.receivedTime = $root.google.protobuf.Timestamp.toObject(message.receivedTime, options);\n                return object;\n            };\n\n            /**\n             * Converts this FetchNode to JSON.\n             * @function toJSON\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            FetchNode.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return FetchNode;\n        })();\n\n        QueryPlanNode.FlattenNode = (function() {\n\n            /**\n             * Properties of a FlattenNode.\n             * @memberof Trace.QueryPlanNode\n             * @interface IFlattenNode\n             * @property {Array.<Trace.QueryPlanNode.IResponsePathElement>|null} [responsePath] FlattenNode responsePath\n             * @property {Trace.IQueryPlanNode|null} [node] FlattenNode node\n             */\n\n            /**\n             * Constructs a new FlattenNode.\n             * @memberof Trace.QueryPlanNode\n             * @classdesc Represents a FlattenNode.\n             * @implements IFlattenNode\n             * @constructor\n             * @param {Trace.QueryPlanNode.IFlattenNode=} [properties] Properties to set\n             */\n            function FlattenNode(properties) {\n                this.responsePath = [];\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * FlattenNode responsePath.\n             * @member {Array.<Trace.QueryPlanNode.IResponsePathElement>} responsePath\n             * @memberof Trace.QueryPlanNode.FlattenNode\n             * @instance\n             */\n            FlattenNode.prototype.responsePath = $util.emptyArray;\n\n            /**\n             * FlattenNode node.\n             * @member {Trace.IQueryPlanNode|null|undefined} node\n             * @memberof Trace.QueryPlanNode.FlattenNode\n             * @instance\n             */\n            FlattenNode.prototype.node = null;\n\n            /**\n             * Creates a new FlattenNode instance using the specified properties.\n             * @function create\n             * @memberof Trace.QueryPlanNode.FlattenNode\n             * @static\n             * @param {Trace.QueryPlanNode.IFlattenNode=} [properties] Properties to set\n             * @returns {Trace.QueryPlanNode.FlattenNode} FlattenNode instance\n             */\n            FlattenNode.create = function create(properties) {\n                return new FlattenNode(properties);\n            };\n\n            /**\n             * Encodes the specified FlattenNode message. Does not implicitly {@link Trace.QueryPlanNode.FlattenNode.verify|verify} messages.\n             * @function encode\n             * @memberof Trace.QueryPlanNode.FlattenNode\n             * @static\n             * @param {Trace.QueryPlanNode.IFlattenNode} message FlattenNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            FlattenNode.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.responsePath != null && message.responsePath.length)\n                    for (var i = 0; i < message.responsePath.length; ++i)\n                        $root.Trace.QueryPlanNode.ResponsePathElement.encode(message.responsePath[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                if (message.node != null && Object.hasOwnProperty.call(message, \"node\"))\n                    $root.Trace.QueryPlanNode.encode(message.node, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified FlattenNode message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.FlattenNode.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof Trace.QueryPlanNode.FlattenNode\n             * @static\n             * @param {Trace.QueryPlanNode.IFlattenNode} message FlattenNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            FlattenNode.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a FlattenNode message from the specified reader or buffer.\n             * @function decode\n             * @memberof Trace.QueryPlanNode.FlattenNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {Trace.QueryPlanNode.FlattenNode} FlattenNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            FlattenNode.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode.FlattenNode();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        if (!(message.responsePath && message.responsePath.length))\n                            message.responsePath = [];\n                        message.responsePath.push($root.Trace.QueryPlanNode.ResponsePathElement.decode(reader, reader.uint32()));\n                        break;\n                    case 2:\n                        message.node = $root.Trace.QueryPlanNode.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a FlattenNode message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof Trace.QueryPlanNode.FlattenNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {Trace.QueryPlanNode.FlattenNode} FlattenNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            FlattenNode.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a FlattenNode message.\n             * @function verify\n             * @memberof Trace.QueryPlanNode.FlattenNode\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            FlattenNode.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.responsePath != null && message.hasOwnProperty(\"responsePath\")) {\n                    if (!Array.isArray(message.responsePath))\n                        return \"responsePath: array expected\";\n                    for (var i = 0; i < message.responsePath.length; ++i) {\n                        var error = $root.Trace.QueryPlanNode.ResponsePathElement.verify(message.responsePath[i]);\n                        if (error)\n                            return \"responsePath.\" + error;\n                    }\n                }\n                if (message.node != null && message.hasOwnProperty(\"node\")) {\n                    var error = $root.Trace.QueryPlanNode.verify(message.node);\n                    if (error)\n                        return \"node.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a plain object from a FlattenNode message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Trace.QueryPlanNode.FlattenNode\n             * @static\n             * @param {Trace.QueryPlanNode.FlattenNode} message FlattenNode\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            FlattenNode.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.arrays || options.defaults)\n                    object.responsePath = [];\n                if (options.defaults)\n                    object.node = null;\n                if (message.responsePath && message.responsePath.length) {\n                    object.responsePath = [];\n                    for (var j = 0; j < message.responsePath.length; ++j)\n                        object.responsePath[j] = $root.Trace.QueryPlanNode.ResponsePathElement.toObject(message.responsePath[j], options);\n                }\n                if (message.node != null && message.hasOwnProperty(\"node\"))\n                    object.node = $root.Trace.QueryPlanNode.toObject(message.node, options);\n                return object;\n            };\n\n            /**\n             * Converts this FlattenNode to JSON.\n             * @function toJSON\n             * @memberof Trace.QueryPlanNode.FlattenNode\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            FlattenNode.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return FlattenNode;\n        })();\n\n        QueryPlanNode.DeferNode = (function() {\n\n            /**\n             * Properties of a DeferNode.\n             * @memberof Trace.QueryPlanNode\n             * @interface IDeferNode\n             * @property {Trace.QueryPlanNode.IDeferNodePrimary|null} [primary] DeferNode primary\n             * @property {Array.<Trace.QueryPlanNode.IDeferredNode>|null} [deferred] DeferNode deferred\n             */\n\n            /**\n             * Constructs a new DeferNode.\n             * @memberof Trace.QueryPlanNode\n             * @classdesc Represents a DeferNode.\n             * @implements IDeferNode\n             * @constructor\n             * @param {Trace.QueryPlanNode.IDeferNode=} [properties] Properties to set\n             */\n            function DeferNode(properties) {\n                this.deferred = [];\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * DeferNode primary.\n             * @member {Trace.QueryPlanNode.IDeferNodePrimary|null|undefined} primary\n             * @memberof Trace.QueryPlanNode.DeferNode\n             * @instance\n             */\n            DeferNode.prototype.primary = null;\n\n            /**\n             * DeferNode deferred.\n             * @member {Array.<Trace.QueryPlanNode.IDeferredNode>} deferred\n             * @memberof Trace.QueryPlanNode.DeferNode\n             * @instance\n             */\n            DeferNode.prototype.deferred = $util.emptyArray;\n\n            /**\n             * Creates a new DeferNode instance using the specified properties.\n             * @function create\n             * @memberof Trace.QueryPlanNode.DeferNode\n             * @static\n             * @param {Trace.QueryPlanNode.IDeferNode=} [properties] Properties to set\n             * @returns {Trace.QueryPlanNode.DeferNode} DeferNode instance\n             */\n            DeferNode.create = function create(properties) {\n                return new DeferNode(properties);\n            };\n\n            /**\n             * Encodes the specified DeferNode message. Does not implicitly {@link Trace.QueryPlanNode.DeferNode.verify|verify} messages.\n             * @function encode\n             * @memberof Trace.QueryPlanNode.DeferNode\n             * @static\n             * @param {Trace.QueryPlanNode.IDeferNode} message DeferNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            DeferNode.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.primary != null && Object.hasOwnProperty.call(message, \"primary\"))\n                    $root.Trace.QueryPlanNode.DeferNodePrimary.encode(message.primary, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                if (message.deferred != null && message.deferred.length)\n                    for (var i = 0; i < message.deferred.length; ++i)\n                        $root.Trace.QueryPlanNode.DeferredNode.encode(message.deferred[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified DeferNode message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.DeferNode.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof Trace.QueryPlanNode.DeferNode\n             * @static\n             * @param {Trace.QueryPlanNode.IDeferNode} message DeferNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            DeferNode.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a DeferNode message from the specified reader or buffer.\n             * @function decode\n             * @memberof Trace.QueryPlanNode.DeferNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {Trace.QueryPlanNode.DeferNode} DeferNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            DeferNode.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode.DeferNode();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.primary = $root.Trace.QueryPlanNode.DeferNodePrimary.decode(reader, reader.uint32());\n                        break;\n                    case 2:\n                        if (!(message.deferred && message.deferred.length))\n                            message.deferred = [];\n                        message.deferred.push($root.Trace.QueryPlanNode.DeferredNode.decode(reader, reader.uint32()));\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a DeferNode message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof Trace.QueryPlanNode.DeferNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {Trace.QueryPlanNode.DeferNode} DeferNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            DeferNode.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a DeferNode message.\n             * @function verify\n             * @memberof Trace.QueryPlanNode.DeferNode\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            DeferNode.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.primary != null && message.hasOwnProperty(\"primary\")) {\n                    var error = $root.Trace.QueryPlanNode.DeferNodePrimary.verify(message.primary);\n                    if (error)\n                        return \"primary.\" + error;\n                }\n                if (message.deferred != null && message.hasOwnProperty(\"deferred\")) {\n                    if (!Array.isArray(message.deferred))\n                        return \"deferred: array expected\";\n                    for (var i = 0; i < message.deferred.length; ++i) {\n                        var error = $root.Trace.QueryPlanNode.DeferredNode.verify(message.deferred[i]);\n                        if (error)\n                            return \"deferred.\" + error;\n                    }\n                }\n                return null;\n            };\n\n            /**\n             * Creates a plain object from a DeferNode message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Trace.QueryPlanNode.DeferNode\n             * @static\n             * @param {Trace.QueryPlanNode.DeferNode} message DeferNode\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            DeferNode.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.arrays || options.defaults)\n                    object.deferred = [];\n                if (options.defaults)\n                    object.primary = null;\n                if (message.primary != null && message.hasOwnProperty(\"primary\"))\n                    object.primary = $root.Trace.QueryPlanNode.DeferNodePrimary.toObject(message.primary, options);\n                if (message.deferred && message.deferred.length) {\n                    object.deferred = [];\n                    for (var j = 0; j < message.deferred.length; ++j)\n                        object.deferred[j] = $root.Trace.QueryPlanNode.DeferredNode.toObject(message.deferred[j], options);\n                }\n                return object;\n            };\n\n            /**\n             * Converts this DeferNode to JSON.\n             * @function toJSON\n             * @memberof Trace.QueryPlanNode.DeferNode\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            DeferNode.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return DeferNode;\n        })();\n\n        QueryPlanNode.ConditionNode = (function() {\n\n            /**\n             * Properties of a ConditionNode.\n             * @memberof Trace.QueryPlanNode\n             * @interface IConditionNode\n             * @property {string|null} [condition] ConditionNode condition\n             * @property {Trace.IQueryPlanNode|null} [ifClause] ConditionNode ifClause\n             * @property {Trace.IQueryPlanNode|null} [elseClause] ConditionNode elseClause\n             */\n\n            /**\n             * Constructs a new ConditionNode.\n             * @memberof Trace.QueryPlanNode\n             * @classdesc Represents a ConditionNode.\n             * @implements IConditionNode\n             * @constructor\n             * @param {Trace.QueryPlanNode.IConditionNode=} [properties] Properties to set\n             */\n            function ConditionNode(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * ConditionNode condition.\n             * @member {string} condition\n             * @memberof Trace.QueryPlanNode.ConditionNode\n             * @instance\n             */\n            ConditionNode.prototype.condition = \"\";\n\n            /**\n             * ConditionNode ifClause.\n             * @member {Trace.IQueryPlanNode|null|undefined} ifClause\n             * @memberof Trace.QueryPlanNode.ConditionNode\n             * @instance\n             */\n            ConditionNode.prototype.ifClause = null;\n\n            /**\n             * ConditionNode elseClause.\n             * @member {Trace.IQueryPlanNode|null|undefined} elseClause\n             * @memberof Trace.QueryPlanNode.ConditionNode\n             * @instance\n             */\n            ConditionNode.prototype.elseClause = null;\n\n            /**\n             * Creates a new ConditionNode instance using the specified properties.\n             * @function create\n             * @memberof Trace.QueryPlanNode.ConditionNode\n             * @static\n             * @param {Trace.QueryPlanNode.IConditionNode=} [properties] Properties to set\n             * @returns {Trace.QueryPlanNode.ConditionNode} ConditionNode instance\n             */\n            ConditionNode.create = function create(properties) {\n                return new ConditionNode(properties);\n            };\n\n            /**\n             * Encodes the specified ConditionNode message. Does not implicitly {@link Trace.QueryPlanNode.ConditionNode.verify|verify} messages.\n             * @function encode\n             * @memberof Trace.QueryPlanNode.ConditionNode\n             * @static\n             * @param {Trace.QueryPlanNode.IConditionNode} message ConditionNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ConditionNode.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.condition != null && Object.hasOwnProperty.call(message, \"condition\"))\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.condition);\n                if (message.ifClause != null && Object.hasOwnProperty.call(message, \"ifClause\"))\n                    $root.Trace.QueryPlanNode.encode(message.ifClause, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                if (message.elseClause != null && Object.hasOwnProperty.call(message, \"elseClause\"))\n                    $root.Trace.QueryPlanNode.encode(message.elseClause, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified ConditionNode message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.ConditionNode.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof Trace.QueryPlanNode.ConditionNode\n             * @static\n             * @param {Trace.QueryPlanNode.IConditionNode} message ConditionNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ConditionNode.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a ConditionNode message from the specified reader or buffer.\n             * @function decode\n             * @memberof Trace.QueryPlanNode.ConditionNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {Trace.QueryPlanNode.ConditionNode} ConditionNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ConditionNode.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode.ConditionNode();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.condition = reader.string();\n                        break;\n                    case 2:\n                        message.ifClause = $root.Trace.QueryPlanNode.decode(reader, reader.uint32());\n                        break;\n                    case 3:\n                        message.elseClause = $root.Trace.QueryPlanNode.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a ConditionNode message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof Trace.QueryPlanNode.ConditionNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {Trace.QueryPlanNode.ConditionNode} ConditionNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ConditionNode.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a ConditionNode message.\n             * @function verify\n             * @memberof Trace.QueryPlanNode.ConditionNode\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            ConditionNode.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.condition != null && message.hasOwnProperty(\"condition\"))\n                    if (!$util.isString(message.condition))\n                        return \"condition: string expected\";\n                if (message.ifClause != null && message.hasOwnProperty(\"ifClause\")) {\n                    var error = $root.Trace.QueryPlanNode.verify(message.ifClause);\n                    if (error)\n                        return \"ifClause.\" + error;\n                }\n                if (message.elseClause != null && message.hasOwnProperty(\"elseClause\")) {\n                    var error = $root.Trace.QueryPlanNode.verify(message.elseClause);\n                    if (error)\n                        return \"elseClause.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a plain object from a ConditionNode message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Trace.QueryPlanNode.ConditionNode\n             * @static\n             * @param {Trace.QueryPlanNode.ConditionNode} message ConditionNode\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            ConditionNode.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.condition = \"\";\n                    object.ifClause = null;\n                    object.elseClause = null;\n                }\n                if (message.condition != null && message.hasOwnProperty(\"condition\"))\n                    object.condition = message.condition;\n                if (message.ifClause != null && message.hasOwnProperty(\"ifClause\"))\n                    object.ifClause = $root.Trace.QueryPlanNode.toObject(message.ifClause, options);\n                if (message.elseClause != null && message.hasOwnProperty(\"elseClause\"))\n                    object.elseClause = $root.Trace.QueryPlanNode.toObject(message.elseClause, options);\n                return object;\n            };\n\n            /**\n             * Converts this ConditionNode to JSON.\n             * @function toJSON\n             * @memberof Trace.QueryPlanNode.ConditionNode\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            ConditionNode.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return ConditionNode;\n        })();\n\n        QueryPlanNode.DeferNodePrimary = (function() {\n\n            /**\n             * Properties of a DeferNodePrimary.\n             * @memberof Trace.QueryPlanNode\n             * @interface IDeferNodePrimary\n             * @property {Trace.IQueryPlanNode|null} [node] DeferNodePrimary node\n             */\n\n            /**\n             * Constructs a new DeferNodePrimary.\n             * @memberof Trace.QueryPlanNode\n             * @classdesc Represents a DeferNodePrimary.\n             * @implements IDeferNodePrimary\n             * @constructor\n             * @param {Trace.QueryPlanNode.IDeferNodePrimary=} [properties] Properties to set\n             */\n            function DeferNodePrimary(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * DeferNodePrimary node.\n             * @member {Trace.IQueryPlanNode|null|undefined} node\n             * @memberof Trace.QueryPlanNode.DeferNodePrimary\n             * @instance\n             */\n            DeferNodePrimary.prototype.node = null;\n\n            /**\n             * Creates a new DeferNodePrimary instance using the specified properties.\n             * @function create\n             * @memberof Trace.QueryPlanNode.DeferNodePrimary\n             * @static\n             * @param {Trace.QueryPlanNode.IDeferNodePrimary=} [properties] Properties to set\n             * @returns {Trace.QueryPlanNode.DeferNodePrimary} DeferNodePrimary instance\n             */\n            DeferNodePrimary.create = function create(properties) {\n                return new DeferNodePrimary(properties);\n            };\n\n            /**\n             * Encodes the specified DeferNodePrimary message. Does not implicitly {@link Trace.QueryPlanNode.DeferNodePrimary.verify|verify} messages.\n             * @function encode\n             * @memberof Trace.QueryPlanNode.DeferNodePrimary\n             * @static\n             * @param {Trace.QueryPlanNode.IDeferNodePrimary} message DeferNodePrimary message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            DeferNodePrimary.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.node != null && Object.hasOwnProperty.call(message, \"node\"))\n                    $root.Trace.QueryPlanNode.encode(message.node, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified DeferNodePrimary message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.DeferNodePrimary.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof Trace.QueryPlanNode.DeferNodePrimary\n             * @static\n             * @param {Trace.QueryPlanNode.IDeferNodePrimary} message DeferNodePrimary message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            DeferNodePrimary.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a DeferNodePrimary message from the specified reader or buffer.\n             * @function decode\n             * @memberof Trace.QueryPlanNode.DeferNodePrimary\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {Trace.QueryPlanNode.DeferNodePrimary} DeferNodePrimary\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            DeferNodePrimary.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode.DeferNodePrimary();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.node = $root.Trace.QueryPlanNode.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a DeferNodePrimary message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof Trace.QueryPlanNode.DeferNodePrimary\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {Trace.QueryPlanNode.DeferNodePrimary} DeferNodePrimary\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            DeferNodePrimary.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a DeferNodePrimary message.\n             * @function verify\n             * @memberof Trace.QueryPlanNode.DeferNodePrimary\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            DeferNodePrimary.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.node != null && message.hasOwnProperty(\"node\")) {\n                    var error = $root.Trace.QueryPlanNode.verify(message.node);\n                    if (error)\n                        return \"node.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a plain object from a DeferNodePrimary message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Trace.QueryPlanNode.DeferNodePrimary\n             * @static\n             * @param {Trace.QueryPlanNode.DeferNodePrimary} message DeferNodePrimary\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            DeferNodePrimary.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults)\n                    object.node = null;\n                if (message.node != null && message.hasOwnProperty(\"node\"))\n                    object.node = $root.Trace.QueryPlanNode.toObject(message.node, options);\n                return object;\n            };\n\n            /**\n             * Converts this DeferNodePrimary to JSON.\n             * @function toJSON\n             * @memberof Trace.QueryPlanNode.DeferNodePrimary\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            DeferNodePrimary.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return DeferNodePrimary;\n        })();\n\n        QueryPlanNode.DeferredNode = (function() {\n\n            /**\n             * Properties of a DeferredNode.\n             * @memberof Trace.QueryPlanNode\n             * @interface IDeferredNode\n             * @property {Array.<Trace.QueryPlanNode.IDeferredNodeDepends>|null} [depends] DeferredNode depends\n             * @property {string|null} [label] DeferredNode label\n             * @property {Array.<Trace.QueryPlanNode.IResponsePathElement>|null} [path] DeferredNode path\n             * @property {Trace.IQueryPlanNode|null} [node] DeferredNode node\n             */\n\n            /**\n             * Constructs a new DeferredNode.\n             * @memberof Trace.QueryPlanNode\n             * @classdesc Represents a DeferredNode.\n             * @implements IDeferredNode\n             * @constructor\n             * @param {Trace.QueryPlanNode.IDeferredNode=} [properties] Properties to set\n             */\n            function DeferredNode(properties) {\n                this.depends = [];\n                this.path = [];\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * DeferredNode depends.\n             * @member {Array.<Trace.QueryPlanNode.IDeferredNodeDepends>} depends\n             * @memberof Trace.QueryPlanNode.DeferredNode\n             * @instance\n             */\n            DeferredNode.prototype.depends = $util.emptyArray;\n\n            /**\n             * DeferredNode label.\n             * @member {string} label\n             * @memberof Trace.QueryPlanNode.DeferredNode\n             * @instance\n             */\n            DeferredNode.prototype.label = \"\";\n\n            /**\n             * DeferredNode path.\n             * @member {Array.<Trace.QueryPlanNode.IResponsePathElement>} path\n             * @memberof Trace.QueryPlanNode.DeferredNode\n             * @instance\n             */\n            DeferredNode.prototype.path = $util.emptyArray;\n\n            /**\n             * DeferredNode node.\n             * @member {Trace.IQueryPlanNode|null|undefined} node\n             * @memberof Trace.QueryPlanNode.DeferredNode\n             * @instance\n             */\n            DeferredNode.prototype.node = null;\n\n            /**\n             * Creates a new DeferredNode instance using the specified properties.\n             * @function create\n             * @memberof Trace.QueryPlanNode.DeferredNode\n             * @static\n             * @param {Trace.QueryPlanNode.IDeferredNode=} [properties] Properties to set\n             * @returns {Trace.QueryPlanNode.DeferredNode} DeferredNode instance\n             */\n            DeferredNode.create = function create(properties) {\n                return new DeferredNode(properties);\n            };\n\n            /**\n             * Encodes the specified DeferredNode message. Does not implicitly {@link Trace.QueryPlanNode.DeferredNode.verify|verify} messages.\n             * @function encode\n             * @memberof Trace.QueryPlanNode.DeferredNode\n             * @static\n             * @param {Trace.QueryPlanNode.IDeferredNode} message DeferredNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            DeferredNode.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.depends != null && message.depends.length)\n                    for (var i = 0; i < message.depends.length; ++i)\n                        $root.Trace.QueryPlanNode.DeferredNodeDepends.encode(message.depends[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                if (message.label != null && Object.hasOwnProperty.call(message, \"label\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.label);\n                if (message.path != null && message.path.length)\n                    for (var i = 0; i < message.path.length; ++i)\n                        $root.Trace.QueryPlanNode.ResponsePathElement.encode(message.path[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n                if (message.node != null && Object.hasOwnProperty.call(message, \"node\"))\n                    $root.Trace.QueryPlanNode.encode(message.node, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified DeferredNode message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.DeferredNode.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof Trace.QueryPlanNode.DeferredNode\n             * @static\n             * @param {Trace.QueryPlanNode.IDeferredNode} message DeferredNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            DeferredNode.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a DeferredNode message from the specified reader or buffer.\n             * @function decode\n             * @memberof Trace.QueryPlanNode.DeferredNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {Trace.QueryPlanNode.DeferredNode} DeferredNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            DeferredNode.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode.DeferredNode();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        if (!(message.depends && message.depends.length))\n                            message.depends = [];\n                        message.depends.push($root.Trace.QueryPlanNode.DeferredNodeDepends.decode(reader, reader.uint32()));\n                        break;\n                    case 2:\n                        message.label = reader.string();\n                        break;\n                    case 3:\n                        if (!(message.path && message.path.length))\n                            message.path = [];\n                        message.path.push($root.Trace.QueryPlanNode.ResponsePathElement.decode(reader, reader.uint32()));\n                        break;\n                    case 4:\n                        message.node = $root.Trace.QueryPlanNode.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a DeferredNode message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof Trace.QueryPlanNode.DeferredNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {Trace.QueryPlanNode.DeferredNode} DeferredNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            DeferredNode.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a DeferredNode message.\n             * @function verify\n             * @memberof Trace.QueryPlanNode.DeferredNode\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            DeferredNode.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.depends != null && message.hasOwnProperty(\"depends\")) {\n                    if (!Array.isArray(message.depends))\n                        return \"depends: array expected\";\n                    for (var i = 0; i < message.depends.length; ++i) {\n                        var error = $root.Trace.QueryPlanNode.DeferredNodeDepends.verify(message.depends[i]);\n                        if (error)\n                            return \"depends.\" + error;\n                    }\n                }\n                if (message.label != null && message.hasOwnProperty(\"label\"))\n                    if (!$util.isString(message.label))\n                        return \"label: string expected\";\n                if (message.path != null && message.hasOwnProperty(\"path\")) {\n                    if (!Array.isArray(message.path))\n                        return \"path: array expected\";\n                    for (var i = 0; i < message.path.length; ++i) {\n                        var error = $root.Trace.QueryPlanNode.ResponsePathElement.verify(message.path[i]);\n                        if (error)\n                            return \"path.\" + error;\n                    }\n                }\n                if (message.node != null && message.hasOwnProperty(\"node\")) {\n                    var error = $root.Trace.QueryPlanNode.verify(message.node);\n                    if (error)\n                        return \"node.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a plain object from a DeferredNode message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Trace.QueryPlanNode.DeferredNode\n             * @static\n             * @param {Trace.QueryPlanNode.DeferredNode} message DeferredNode\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            DeferredNode.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.arrays || options.defaults) {\n                    object.depends = [];\n                    object.path = [];\n                }\n                if (options.defaults) {\n                    object.label = \"\";\n                    object.node = null;\n                }\n                if (message.depends && message.depends.length) {\n                    object.depends = [];\n                    for (var j = 0; j < message.depends.length; ++j)\n                        object.depends[j] = $root.Trace.QueryPlanNode.DeferredNodeDepends.toObject(message.depends[j], options);\n                }\n                if (message.label != null && message.hasOwnProperty(\"label\"))\n                    object.label = message.label;\n                if (message.path && message.path.length) {\n                    object.path = [];\n                    for (var j = 0; j < message.path.length; ++j)\n                        object.path[j] = $root.Trace.QueryPlanNode.ResponsePathElement.toObject(message.path[j], options);\n                }\n                if (message.node != null && message.hasOwnProperty(\"node\"))\n                    object.node = $root.Trace.QueryPlanNode.toObject(message.node, options);\n                return object;\n            };\n\n            /**\n             * Converts this DeferredNode to JSON.\n             * @function toJSON\n             * @memberof Trace.QueryPlanNode.DeferredNode\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            DeferredNode.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return DeferredNode;\n        })();\n\n        QueryPlanNode.DeferredNodeDepends = (function() {\n\n            /**\n             * Properties of a DeferredNodeDepends.\n             * @memberof Trace.QueryPlanNode\n             * @interface IDeferredNodeDepends\n             * @property {string|null} [id] DeferredNodeDepends id\n             * @property {string|null} [deferLabel] DeferredNodeDepends deferLabel\n             */\n\n            /**\n             * Constructs a new DeferredNodeDepends.\n             * @memberof Trace.QueryPlanNode\n             * @classdesc Represents a DeferredNodeDepends.\n             * @implements IDeferredNodeDepends\n             * @constructor\n             * @param {Trace.QueryPlanNode.IDeferredNodeDepends=} [properties] Properties to set\n             */\n            function DeferredNodeDepends(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * DeferredNodeDepends id.\n             * @member {string} id\n             * @memberof Trace.QueryPlanNode.DeferredNodeDepends\n             * @instance\n             */\n            DeferredNodeDepends.prototype.id = \"\";\n\n            /**\n             * DeferredNodeDepends deferLabel.\n             * @member {string} deferLabel\n             * @memberof Trace.QueryPlanNode.DeferredNodeDepends\n             * @instance\n             */\n            DeferredNodeDepends.prototype.deferLabel = \"\";\n\n            /**\n             * Creates a new DeferredNodeDepends instance using the specified properties.\n             * @function create\n             * @memberof Trace.QueryPlanNode.DeferredNodeDepends\n             * @static\n             * @param {Trace.QueryPlanNode.IDeferredNodeDepends=} [properties] Properties to set\n             * @returns {Trace.QueryPlanNode.DeferredNodeDepends} DeferredNodeDepends instance\n             */\n            DeferredNodeDepends.create = function create(properties) {\n                return new DeferredNodeDepends(properties);\n            };\n\n            /**\n             * Encodes the specified DeferredNodeDepends message. Does not implicitly {@link Trace.QueryPlanNode.DeferredNodeDepends.verify|verify} messages.\n             * @function encode\n             * @memberof Trace.QueryPlanNode.DeferredNodeDepends\n             * @static\n             * @param {Trace.QueryPlanNode.IDeferredNodeDepends} message DeferredNodeDepends message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            DeferredNodeDepends.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.id != null && Object.hasOwnProperty.call(message, \"id\"))\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);\n                if (message.deferLabel != null && Object.hasOwnProperty.call(message, \"deferLabel\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.deferLabel);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified DeferredNodeDepends message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.DeferredNodeDepends.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof Trace.QueryPlanNode.DeferredNodeDepends\n             * @static\n             * @param {Trace.QueryPlanNode.IDeferredNodeDepends} message DeferredNodeDepends message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            DeferredNodeDepends.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a DeferredNodeDepends message from the specified reader or buffer.\n             * @function decode\n             * @memberof Trace.QueryPlanNode.DeferredNodeDepends\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {Trace.QueryPlanNode.DeferredNodeDepends} DeferredNodeDepends\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            DeferredNodeDepends.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode.DeferredNodeDepends();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.id = reader.string();\n                        break;\n                    case 2:\n                        message.deferLabel = reader.string();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a DeferredNodeDepends message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof Trace.QueryPlanNode.DeferredNodeDepends\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {Trace.QueryPlanNode.DeferredNodeDepends} DeferredNodeDepends\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            DeferredNodeDepends.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a DeferredNodeDepends message.\n             * @function verify\n             * @memberof Trace.QueryPlanNode.DeferredNodeDepends\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            DeferredNodeDepends.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.id != null && message.hasOwnProperty(\"id\"))\n                    if (!$util.isString(message.id))\n                        return \"id: string expected\";\n                if (message.deferLabel != null && message.hasOwnProperty(\"deferLabel\"))\n                    if (!$util.isString(message.deferLabel))\n                        return \"deferLabel: string expected\";\n                return null;\n            };\n\n            /**\n             * Creates a plain object from a DeferredNodeDepends message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Trace.QueryPlanNode.DeferredNodeDepends\n             * @static\n             * @param {Trace.QueryPlanNode.DeferredNodeDepends} message DeferredNodeDepends\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            DeferredNodeDepends.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.id = \"\";\n                    object.deferLabel = \"\";\n                }\n                if (message.id != null && message.hasOwnProperty(\"id\"))\n                    object.id = message.id;\n                if (message.deferLabel != null && message.hasOwnProperty(\"deferLabel\"))\n                    object.deferLabel = message.deferLabel;\n                return object;\n            };\n\n            /**\n             * Converts this DeferredNodeDepends to JSON.\n             * @function toJSON\n             * @memberof Trace.QueryPlanNode.DeferredNodeDepends\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            DeferredNodeDepends.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return DeferredNodeDepends;\n        })();\n\n        QueryPlanNode.ResponsePathElement = (function() {\n\n            /**\n             * Properties of a ResponsePathElement.\n             * @memberof Trace.QueryPlanNode\n             * @interface IResponsePathElement\n             * @property {string|null} [fieldName] ResponsePathElement fieldName\n             * @property {number|null} [index] ResponsePathElement index\n             */\n\n            /**\n             * Constructs a new ResponsePathElement.\n             * @memberof Trace.QueryPlanNode\n             * @classdesc Represents a ResponsePathElement.\n             * @implements IResponsePathElement\n             * @constructor\n             * @param {Trace.QueryPlanNode.IResponsePathElement=} [properties] Properties to set\n             */\n            function ResponsePathElement(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * ResponsePathElement fieldName.\n             * @member {string} fieldName\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @instance\n             */\n            ResponsePathElement.prototype.fieldName = \"\";\n\n            /**\n             * ResponsePathElement index.\n             * @member {number} index\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @instance\n             */\n            ResponsePathElement.prototype.index = 0;\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * ResponsePathElement id.\n             * @member {\"fieldName\"|\"index\"|undefined} id\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @instance\n             */\n            Object.defineProperty(ResponsePathElement.prototype, \"id\", {\n                get: $util.oneOfGetter($oneOfFields = [\"fieldName\", \"index\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Creates a new ResponsePathElement instance using the specified properties.\n             * @function create\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @static\n             * @param {Trace.QueryPlanNode.IResponsePathElement=} [properties] Properties to set\n             * @returns {Trace.QueryPlanNode.ResponsePathElement} ResponsePathElement instance\n             */\n            ResponsePathElement.create = function create(properties) {\n                return new ResponsePathElement(properties);\n            };\n\n            /**\n             * Encodes the specified ResponsePathElement message. Does not implicitly {@link Trace.QueryPlanNode.ResponsePathElement.verify|verify} messages.\n             * @function encode\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @static\n             * @param {Trace.QueryPlanNode.IResponsePathElement} message ResponsePathElement message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ResponsePathElement.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.fieldName != null && Object.hasOwnProperty.call(message, \"fieldName\"))\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.fieldName);\n                if (message.index != null && Object.hasOwnProperty.call(message, \"index\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.index);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified ResponsePathElement message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.ResponsePathElement.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @static\n             * @param {Trace.QueryPlanNode.IResponsePathElement} message ResponsePathElement message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ResponsePathElement.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a ResponsePathElement message from the specified reader or buffer.\n             * @function decode\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {Trace.QueryPlanNode.ResponsePathElement} ResponsePathElement\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ResponsePathElement.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode.ResponsePathElement();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.fieldName = reader.string();\n                        break;\n                    case 2:\n                        message.index = reader.uint32();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a ResponsePathElement message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {Trace.QueryPlanNode.ResponsePathElement} ResponsePathElement\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ResponsePathElement.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a ResponsePathElement message.\n             * @function verify\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            ResponsePathElement.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                var properties = {};\n                if (message.fieldName != null && message.hasOwnProperty(\"fieldName\")) {\n                    properties.id = 1;\n                    if (!$util.isString(message.fieldName))\n                        return \"fieldName: string expected\";\n                }\n                if (message.index != null && message.hasOwnProperty(\"index\")) {\n                    if (properties.id === 1)\n                        return \"id: multiple values\";\n                    properties.id = 1;\n                    if (!$util.isInteger(message.index))\n                        return \"index: integer expected\";\n                }\n                return null;\n            };\n\n            /**\n             * Creates a plain object from a ResponsePathElement message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @static\n             * @param {Trace.QueryPlanNode.ResponsePathElement} message ResponsePathElement\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            ResponsePathElement.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (message.fieldName != null && message.hasOwnProperty(\"fieldName\")) {\n                    object.fieldName = message.fieldName;\n                    if (options.oneofs)\n                        object.id = \"fieldName\";\n                }\n                if (message.index != null && message.hasOwnProperty(\"index\")) {\n                    object.index = message.index;\n                    if (options.oneofs)\n                        object.id = \"index\";\n                }\n                return object;\n            };\n\n            /**\n             * Converts this ResponsePathElement to JSON.\n             * @function toJSON\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            ResponsePathElement.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return ResponsePathElement;\n        })();\n\n        return QueryPlanNode;\n    })();\n\n    return Trace;\n})();\n\n$root.ReportHeader = (function() {\n\n    /**\n     * Properties of a ReportHeader.\n     * @exports IReportHeader\n     * @interface IReportHeader\n     * @property {string|null} [graphRef] ReportHeader graphRef\n     * @property {string|null} [hostname] ReportHeader hostname\n     * @property {string|null} [agentVersion] ReportHeader agentVersion\n     * @property {string|null} [serviceVersion] ReportHeader serviceVersion\n     * @property {string|null} [runtimeVersion] ReportHeader runtimeVersion\n     * @property {string|null} [uname] ReportHeader uname\n     * @property {string|null} [executableSchemaId] ReportHeader executableSchemaId\n     */\n\n    /**\n     * Constructs a new ReportHeader.\n     * @exports ReportHeader\n     * @classdesc Represents a ReportHeader.\n     * @implements IReportHeader\n     * @constructor\n     * @param {IReportHeader=} [properties] Properties to set\n     */\n    function ReportHeader(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ReportHeader graphRef.\n     * @member {string} graphRef\n     * @memberof ReportHeader\n     * @instance\n     */\n    ReportHeader.prototype.graphRef = \"\";\n\n    /**\n     * ReportHeader hostname.\n     * @member {string} hostname\n     * @memberof ReportHeader\n     * @instance\n     */\n    ReportHeader.prototype.hostname = \"\";\n\n    /**\n     * ReportHeader agentVersion.\n     * @member {string} agentVersion\n     * @memberof ReportHeader\n     * @instance\n     */\n    ReportHeader.prototype.agentVersion = \"\";\n\n    /**\n     * ReportHeader serviceVersion.\n     * @member {string} serviceVersion\n     * @memberof ReportHeader\n     * @instance\n     */\n    ReportHeader.prototype.serviceVersion = \"\";\n\n    /**\n     * ReportHeader runtimeVersion.\n     * @member {string} runtimeVersion\n     * @memberof ReportHeader\n     * @instance\n     */\n    ReportHeader.prototype.runtimeVersion = \"\";\n\n    /**\n     * ReportHeader uname.\n     * @member {string} uname\n     * @memberof ReportHeader\n     * @instance\n     */\n    ReportHeader.prototype.uname = \"\";\n\n    /**\n     * ReportHeader executableSchemaId.\n     * @member {string} executableSchemaId\n     * @memberof ReportHeader\n     * @instance\n     */\n    ReportHeader.prototype.executableSchemaId = \"\";\n\n    /**\n     * Creates a new ReportHeader instance using the specified properties.\n     * @function create\n     * @memberof ReportHeader\n     * @static\n     * @param {IReportHeader=} [properties] Properties to set\n     * @returns {ReportHeader} ReportHeader instance\n     */\n    ReportHeader.create = function create(properties) {\n        return new ReportHeader(properties);\n    };\n\n    /**\n     * Encodes the specified ReportHeader message. Does not implicitly {@link ReportHeader.verify|verify} messages.\n     * @function encode\n     * @memberof ReportHeader\n     * @static\n     * @param {IReportHeader} message ReportHeader message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ReportHeader.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.hostname != null && Object.hasOwnProperty.call(message, \"hostname\"))\n            writer.uint32(/* id 5, wireType 2 =*/42).string(message.hostname);\n        if (message.agentVersion != null && Object.hasOwnProperty.call(message, \"agentVersion\"))\n            writer.uint32(/* id 6, wireType 2 =*/50).string(message.agentVersion);\n        if (message.serviceVersion != null && Object.hasOwnProperty.call(message, \"serviceVersion\"))\n            writer.uint32(/* id 7, wireType 2 =*/58).string(message.serviceVersion);\n        if (message.runtimeVersion != null && Object.hasOwnProperty.call(message, \"runtimeVersion\"))\n            writer.uint32(/* id 8, wireType 2 =*/66).string(message.runtimeVersion);\n        if (message.uname != null && Object.hasOwnProperty.call(message, \"uname\"))\n            writer.uint32(/* id 9, wireType 2 =*/74).string(message.uname);\n        if (message.executableSchemaId != null && Object.hasOwnProperty.call(message, \"executableSchemaId\"))\n            writer.uint32(/* id 11, wireType 2 =*/90).string(message.executableSchemaId);\n        if (message.graphRef != null && Object.hasOwnProperty.call(message, \"graphRef\"))\n            writer.uint32(/* id 12, wireType 2 =*/98).string(message.graphRef);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ReportHeader message, length delimited. Does not implicitly {@link ReportHeader.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ReportHeader\n     * @static\n     * @param {IReportHeader} message ReportHeader message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ReportHeader.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ReportHeader message from the specified reader or buffer.\n     * @function decode\n     * @memberof ReportHeader\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ReportHeader} ReportHeader\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ReportHeader.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ReportHeader();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 12:\n                message.graphRef = reader.string();\n                break;\n            case 5:\n                message.hostname = reader.string();\n                break;\n            case 6:\n                message.agentVersion = reader.string();\n                break;\n            case 7:\n                message.serviceVersion = reader.string();\n                break;\n            case 8:\n                message.runtimeVersion = reader.string();\n                break;\n            case 9:\n                message.uname = reader.string();\n                break;\n            case 11:\n                message.executableSchemaId = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ReportHeader message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ReportHeader\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ReportHeader} ReportHeader\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ReportHeader.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ReportHeader message.\n     * @function verify\n     * @memberof ReportHeader\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ReportHeader.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.graphRef != null && message.hasOwnProperty(\"graphRef\"))\n            if (!$util.isString(message.graphRef))\n                return \"graphRef: string expected\";\n        if (message.hostname != null && message.hasOwnProperty(\"hostname\"))\n            if (!$util.isString(message.hostname))\n                return \"hostname: string expected\";\n        if (message.agentVersion != null && message.hasOwnProperty(\"agentVersion\"))\n            if (!$util.isString(message.agentVersion))\n                return \"agentVersion: string expected\";\n        if (message.serviceVersion != null && message.hasOwnProperty(\"serviceVersion\"))\n            if (!$util.isString(message.serviceVersion))\n                return \"serviceVersion: string expected\";\n        if (message.runtimeVersion != null && message.hasOwnProperty(\"runtimeVersion\"))\n            if (!$util.isString(message.runtimeVersion))\n                return \"runtimeVersion: string expected\";\n        if (message.uname != null && message.hasOwnProperty(\"uname\"))\n            if (!$util.isString(message.uname))\n                return \"uname: string expected\";\n        if (message.executableSchemaId != null && message.hasOwnProperty(\"executableSchemaId\"))\n            if (!$util.isString(message.executableSchemaId))\n                return \"executableSchemaId: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a plain object from a ReportHeader message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ReportHeader\n     * @static\n     * @param {ReportHeader} message ReportHeader\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ReportHeader.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.hostname = \"\";\n            object.agentVersion = \"\";\n            object.serviceVersion = \"\";\n            object.runtimeVersion = \"\";\n            object.uname = \"\";\n            object.executableSchemaId = \"\";\n            object.graphRef = \"\";\n        }\n        if (message.hostname != null && message.hasOwnProperty(\"hostname\"))\n            object.hostname = message.hostname;\n        if (message.agentVersion != null && message.hasOwnProperty(\"agentVersion\"))\n            object.agentVersion = message.agentVersion;\n        if (message.serviceVersion != null && message.hasOwnProperty(\"serviceVersion\"))\n            object.serviceVersion = message.serviceVersion;\n        if (message.runtimeVersion != null && message.hasOwnProperty(\"runtimeVersion\"))\n            object.runtimeVersion = message.runtimeVersion;\n        if (message.uname != null && message.hasOwnProperty(\"uname\"))\n            object.uname = message.uname;\n        if (message.executableSchemaId != null && message.hasOwnProperty(\"executableSchemaId\"))\n            object.executableSchemaId = message.executableSchemaId;\n        if (message.graphRef != null && message.hasOwnProperty(\"graphRef\"))\n            object.graphRef = message.graphRef;\n        return object;\n    };\n\n    /**\n     * Converts this ReportHeader to JSON.\n     * @function toJSON\n     * @memberof ReportHeader\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ReportHeader.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ReportHeader;\n})();\n\n$root.PathErrorStats = (function() {\n\n    /**\n     * Properties of a PathErrorStats.\n     * @exports IPathErrorStats\n     * @interface IPathErrorStats\n     * @property {Object.<string,IPathErrorStats>|null} [children] PathErrorStats children\n     * @property {number|null} [errorsCount] PathErrorStats errorsCount\n     * @property {number|null} [requestsWithErrorsCount] PathErrorStats requestsWithErrorsCount\n     */\n\n    /**\n     * Constructs a new PathErrorStats.\n     * @exports PathErrorStats\n     * @classdesc Represents a PathErrorStats.\n     * @implements IPathErrorStats\n     * @constructor\n     * @param {IPathErrorStats=} [properties] Properties to set\n     */\n    function PathErrorStats(properties) {\n        this.children = {};\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * PathErrorStats children.\n     * @member {Object.<string,IPathErrorStats>} children\n     * @memberof PathErrorStats\n     * @instance\n     */\n    PathErrorStats.prototype.children = $util.emptyObject;\n\n    /**\n     * PathErrorStats errorsCount.\n     * @member {number} errorsCount\n     * @memberof PathErrorStats\n     * @instance\n     */\n    PathErrorStats.prototype.errorsCount = 0;\n\n    /**\n     * PathErrorStats requestsWithErrorsCount.\n     * @member {number} requestsWithErrorsCount\n     * @memberof PathErrorStats\n     * @instance\n     */\n    PathErrorStats.prototype.requestsWithErrorsCount = 0;\n\n    /**\n     * Creates a new PathErrorStats instance using the specified properties.\n     * @function create\n     * @memberof PathErrorStats\n     * @static\n     * @param {IPathErrorStats=} [properties] Properties to set\n     * @returns {PathErrorStats} PathErrorStats instance\n     */\n    PathErrorStats.create = function create(properties) {\n        return new PathErrorStats(properties);\n    };\n\n    /**\n     * Encodes the specified PathErrorStats message. Does not implicitly {@link PathErrorStats.verify|verify} messages.\n     * @function encode\n     * @memberof PathErrorStats\n     * @static\n     * @param {IPathErrorStats} message PathErrorStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    PathErrorStats.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.children != null && Object.hasOwnProperty.call(message, \"children\"))\n            for (var keys = Object.keys(message.children), i = 0; i < keys.length; ++i) {\n                writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);\n                $root.PathErrorStats.encode(message.children[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n            }\n        if (message.errorsCount != null && Object.hasOwnProperty.call(message, \"errorsCount\"))\n            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.errorsCount);\n        if (message.requestsWithErrorsCount != null && Object.hasOwnProperty.call(message, \"requestsWithErrorsCount\"))\n            writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.requestsWithErrorsCount);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified PathErrorStats message, length delimited. Does not implicitly {@link PathErrorStats.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof PathErrorStats\n     * @static\n     * @param {IPathErrorStats} message PathErrorStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    PathErrorStats.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a PathErrorStats message from the specified reader or buffer.\n     * @function decode\n     * @memberof PathErrorStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {PathErrorStats} PathErrorStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    PathErrorStats.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PathErrorStats(), key;\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                reader.skip().pos++;\n                if (message.children === $util.emptyObject)\n                    message.children = {};\n                key = reader.string();\n                reader.pos++;\n                message.children[key] = $root.PathErrorStats.decode(reader, reader.uint32());\n                break;\n            case 4:\n                message.errorsCount = reader.uint64();\n                break;\n            case 5:\n                message.requestsWithErrorsCount = reader.uint64();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a PathErrorStats message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof PathErrorStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {PathErrorStats} PathErrorStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    PathErrorStats.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a PathErrorStats message.\n     * @function verify\n     * @memberof PathErrorStats\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    PathErrorStats.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.children != null && message.hasOwnProperty(\"children\")) {\n            if (!$util.isObject(message.children))\n                return \"children: object expected\";\n            var key = Object.keys(message.children);\n            for (var i = 0; i < key.length; ++i) {\n                var error = $root.PathErrorStats.verify(message.children[key[i]]);\n                if (error)\n                    return \"children.\" + error;\n            }\n        }\n        if (message.errorsCount != null && message.hasOwnProperty(\"errorsCount\"))\n            if (!$util.isInteger(message.errorsCount) && !(message.errorsCount && $util.isInteger(message.errorsCount.low) && $util.isInteger(message.errorsCount.high)))\n                return \"errorsCount: integer|Long expected\";\n        if (message.requestsWithErrorsCount != null && message.hasOwnProperty(\"requestsWithErrorsCount\"))\n            if (!$util.isInteger(message.requestsWithErrorsCount) && !(message.requestsWithErrorsCount && $util.isInteger(message.requestsWithErrorsCount.low) && $util.isInteger(message.requestsWithErrorsCount.high)))\n                return \"requestsWithErrorsCount: integer|Long expected\";\n        return null;\n    };\n\n    /**\n     * Creates a plain object from a PathErrorStats message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof PathErrorStats\n     * @static\n     * @param {PathErrorStats} message PathErrorStats\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    PathErrorStats.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.objects || options.defaults)\n            object.children = {};\n        if (options.defaults) {\n            object.errorsCount = 0;\n            object.requestsWithErrorsCount = 0;\n        }\n        var keys2;\n        if (message.children && (keys2 = Object.keys(message.children)).length) {\n            object.children = {};\n            for (var j = 0; j < keys2.length; ++j)\n                object.children[keys2[j]] = $root.PathErrorStats.toObject(message.children[keys2[j]], options);\n        }\n        if (message.errorsCount != null && message.hasOwnProperty(\"errorsCount\"))\n            if (typeof message.errorsCount === \"number\")\n                object.errorsCount = options.longs === String ? String(message.errorsCount) : message.errorsCount;\n            else\n                object.errorsCount = options.longs === String ? $util.Long.prototype.toString.call(message.errorsCount) : options.longs === Number ? new $util.LongBits(message.errorsCount.low >>> 0, message.errorsCount.high >>> 0).toNumber(true) : message.errorsCount;\n        if (message.requestsWithErrorsCount != null && message.hasOwnProperty(\"requestsWithErrorsCount\"))\n            if (typeof message.requestsWithErrorsCount === \"number\")\n                object.requestsWithErrorsCount = options.longs === String ? String(message.requestsWithErrorsCount) : message.requestsWithErrorsCount;\n            else\n                object.requestsWithErrorsCount = options.longs === String ? $util.Long.prototype.toString.call(message.requestsWithErrorsCount) : options.longs === Number ? new $util.LongBits(message.requestsWithErrorsCount.low >>> 0, message.requestsWithErrorsCount.high >>> 0).toNumber(true) : message.requestsWithErrorsCount;\n        return object;\n    };\n\n    /**\n     * Converts this PathErrorStats to JSON.\n     * @function toJSON\n     * @memberof PathErrorStats\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    PathErrorStats.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return PathErrorStats;\n})();\n\n$root.QueryLatencyStats = (function() {\n\n    /**\n     * Properties of a QueryLatencyStats.\n     * @exports IQueryLatencyStats\n     * @interface IQueryLatencyStats\n     * @property {$protobuf.ToArray.<number>|Array.<number>|null} [latencyCount] QueryLatencyStats latencyCount\n     * @property {number|null} [requestCount] QueryLatencyStats requestCount\n     * @property {number|null} [cacheHits] QueryLatencyStats cacheHits\n     * @property {number|null} [persistedQueryHits] QueryLatencyStats persistedQueryHits\n     * @property {number|null} [persistedQueryMisses] QueryLatencyStats persistedQueryMisses\n     * @property {$protobuf.ToArray.<number>|Array.<number>|null} [cacheLatencyCount] QueryLatencyStats cacheLatencyCount\n     * @property {IPathErrorStats|null} [rootErrorStats] QueryLatencyStats rootErrorStats\n     * @property {number|null} [requestsWithErrorsCount] QueryLatencyStats requestsWithErrorsCount\n     * @property {$protobuf.ToArray.<number>|Array.<number>|null} [publicCacheTtlCount] QueryLatencyStats publicCacheTtlCount\n     * @property {$protobuf.ToArray.<number>|Array.<number>|null} [privateCacheTtlCount] QueryLatencyStats privateCacheTtlCount\n     * @property {number|null} [registeredOperationCount] QueryLatencyStats registeredOperationCount\n     * @property {number|null} [forbiddenOperationCount] QueryLatencyStats forbiddenOperationCount\n     * @property {number|null} [requestsWithoutFieldInstrumentation] QueryLatencyStats requestsWithoutFieldInstrumentation\n     */\n\n    /**\n     * Constructs a new QueryLatencyStats.\n     * @exports QueryLatencyStats\n     * @classdesc Represents a QueryLatencyStats.\n     * @implements IQueryLatencyStats\n     * @constructor\n     * @param {IQueryLatencyStats=} [properties] Properties to set\n     */\n    function QueryLatencyStats(properties) {\n        this.latencyCount = [];\n        this.cacheLatencyCount = [];\n        this.publicCacheTtlCount = [];\n        this.privateCacheTtlCount = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * QueryLatencyStats latencyCount.\n     * @member {Array.<number>} latencyCount\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.latencyCount = $util.emptyArray;\n\n    /**\n     * QueryLatencyStats requestCount.\n     * @member {number} requestCount\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.requestCount = 0;\n\n    /**\n     * QueryLatencyStats cacheHits.\n     * @member {number} cacheHits\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.cacheHits = 0;\n\n    /**\n     * QueryLatencyStats persistedQueryHits.\n     * @member {number} persistedQueryHits\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.persistedQueryHits = 0;\n\n    /**\n     * QueryLatencyStats persistedQueryMisses.\n     * @member {number} persistedQueryMisses\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.persistedQueryMisses = 0;\n\n    /**\n     * QueryLatencyStats cacheLatencyCount.\n     * @member {Array.<number>} cacheLatencyCount\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.cacheLatencyCount = $util.emptyArray;\n\n    /**\n     * QueryLatencyStats rootErrorStats.\n     * @member {IPathErrorStats|null|undefined} rootErrorStats\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.rootErrorStats = null;\n\n    /**\n     * QueryLatencyStats requestsWithErrorsCount.\n     * @member {number} requestsWithErrorsCount\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.requestsWithErrorsCount = 0;\n\n    /**\n     * QueryLatencyStats publicCacheTtlCount.\n     * @member {Array.<number>} publicCacheTtlCount\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.publicCacheTtlCount = $util.emptyArray;\n\n    /**\n     * QueryLatencyStats privateCacheTtlCount.\n     * @member {Array.<number>} privateCacheTtlCount\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.privateCacheTtlCount = $util.emptyArray;\n\n    /**\n     * QueryLatencyStats registeredOperationCount.\n     * @member {number} registeredOperationCount\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.registeredOperationCount = 0;\n\n    /**\n     * QueryLatencyStats forbiddenOperationCount.\n     * @member {number} forbiddenOperationCount\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.forbiddenOperationCount = 0;\n\n    /**\n     * QueryLatencyStats requestsWithoutFieldInstrumentation.\n     * @member {number} requestsWithoutFieldInstrumentation\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.requestsWithoutFieldInstrumentation = 0;\n\n    /**\n     * Creates a new QueryLatencyStats instance using the specified properties.\n     * @function create\n     * @memberof QueryLatencyStats\n     * @static\n     * @param {IQueryLatencyStats=} [properties] Properties to set\n     * @returns {QueryLatencyStats} QueryLatencyStats instance\n     */\n    QueryLatencyStats.create = function create(properties) {\n        return new QueryLatencyStats(properties);\n    };\n\n    /**\n     * Encodes the specified QueryLatencyStats message. Does not implicitly {@link QueryLatencyStats.verify|verify} messages.\n     * @function encode\n     * @memberof QueryLatencyStats\n     * @static\n     * @param {IQueryLatencyStats} message QueryLatencyStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    QueryLatencyStats.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.requestCount != null && Object.hasOwnProperty.call(message, \"requestCount\"))\n            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.requestCount);\n        if (message.cacheHits != null && Object.hasOwnProperty.call(message, \"cacheHits\"))\n            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.cacheHits);\n        if (message.persistedQueryHits != null && Object.hasOwnProperty.call(message, \"persistedQueryHits\"))\n            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.persistedQueryHits);\n        if (message.persistedQueryMisses != null && Object.hasOwnProperty.call(message, \"persistedQueryMisses\"))\n            writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.persistedQueryMisses);\n        if (message.rootErrorStats != null && Object.hasOwnProperty.call(message, \"rootErrorStats\"))\n            $root.PathErrorStats.encode(message.rootErrorStats, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n        if (message.requestsWithErrorsCount != null && Object.hasOwnProperty.call(message, \"requestsWithErrorsCount\"))\n            writer.uint32(/* id 8, wireType 0 =*/64).uint64(message.requestsWithErrorsCount);\n        if (message.registeredOperationCount != null && Object.hasOwnProperty.call(message, \"registeredOperationCount\"))\n            writer.uint32(/* id 11, wireType 0 =*/88).uint64(message.registeredOperationCount);\n        if (message.forbiddenOperationCount != null && Object.hasOwnProperty.call(message, \"forbiddenOperationCount\"))\n            writer.uint32(/* id 12, wireType 0 =*/96).uint64(message.forbiddenOperationCount);\n        var array13;\n        if (message.latencyCount != null && message.latencyCount.toArray)\n            array13 = message.latencyCount.toArray();\n        else\n            array13 = message.latencyCount;\n        if (array13 != null && array13.length) {\n            writer.uint32(/* id 13, wireType 2 =*/106).fork();\n            for (var i = 0; i < array13.length; ++i)\n                writer.sint64(array13[i]);\n            writer.ldelim();\n        }\n        var array14;\n        if (message.cacheLatencyCount != null && message.cacheLatencyCount.toArray)\n            array14 = message.cacheLatencyCount.toArray();\n        else\n            array14 = message.cacheLatencyCount;\n        if (array14 != null && array14.length) {\n            writer.uint32(/* id 14, wireType 2 =*/114).fork();\n            for (var i = 0; i < array14.length; ++i)\n                writer.sint64(array14[i]);\n            writer.ldelim();\n        }\n        var array15;\n        if (message.publicCacheTtlCount != null && message.publicCacheTtlCount.toArray)\n            array15 = message.publicCacheTtlCount.toArray();\n        else\n            array15 = message.publicCacheTtlCount;\n        if (array15 != null && array15.length) {\n            writer.uint32(/* id 15, wireType 2 =*/122).fork();\n            for (var i = 0; i < array15.length; ++i)\n                writer.sint64(array15[i]);\n            writer.ldelim();\n        }\n        var array16;\n        if (message.privateCacheTtlCount != null && message.privateCacheTtlCount.toArray)\n            array16 = message.privateCacheTtlCount.toArray();\n        else\n            array16 = message.privateCacheTtlCount;\n        if (array16 != null && array16.length) {\n            writer.uint32(/* id 16, wireType 2 =*/130).fork();\n            for (var i = 0; i < array16.length; ++i)\n                writer.sint64(array16[i]);\n            writer.ldelim();\n        }\n        if (message.requestsWithoutFieldInstrumentation != null && Object.hasOwnProperty.call(message, \"requestsWithoutFieldInstrumentation\"))\n            writer.uint32(/* id 17, wireType 0 =*/136).uint64(message.requestsWithoutFieldInstrumentation);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified QueryLatencyStats message, length delimited. Does not implicitly {@link QueryLatencyStats.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof QueryLatencyStats\n     * @static\n     * @param {IQueryLatencyStats} message QueryLatencyStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    QueryLatencyStats.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a QueryLatencyStats message from the specified reader or buffer.\n     * @function decode\n     * @memberof QueryLatencyStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {QueryLatencyStats} QueryLatencyStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    QueryLatencyStats.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.QueryLatencyStats();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 13:\n                if (!(message.latencyCount && message.latencyCount.length))\n                    message.latencyCount = [];\n                if ((tag & 7) === 2) {\n                    var end2 = reader.uint32() + reader.pos;\n                    while (reader.pos < end2)\n                        message.latencyCount.push(reader.sint64());\n                } else\n                    message.latencyCount.push(reader.sint64());\n                break;\n            case 2:\n                message.requestCount = reader.uint64();\n                break;\n            case 3:\n                message.cacheHits = reader.uint64();\n                break;\n            case 4:\n                message.persistedQueryHits = reader.uint64();\n                break;\n            case 5:\n                message.persistedQueryMisses = reader.uint64();\n                break;\n            case 14:\n                if (!(message.cacheLatencyCount && message.cacheLatencyCount.length))\n                    message.cacheLatencyCount = [];\n                if ((tag & 7) === 2) {\n                    var end2 = reader.uint32() + reader.pos;\n                    while (reader.pos < end2)\n                        message.cacheLatencyCount.push(reader.sint64());\n                } else\n                    message.cacheLatencyCount.push(reader.sint64());\n                break;\n            case 7:\n                message.rootErrorStats = $root.PathErrorStats.decode(reader, reader.uint32());\n                break;\n            case 8:\n                message.requestsWithErrorsCount = reader.uint64();\n                break;\n            case 15:\n                if (!(message.publicCacheTtlCount && message.publicCacheTtlCount.length))\n                    message.publicCacheTtlCount = [];\n                if ((tag & 7) === 2) {\n                    var end2 = reader.uint32() + reader.pos;\n                    while (reader.pos < end2)\n                        message.publicCacheTtlCount.push(reader.sint64());\n                } else\n                    message.publicCacheTtlCount.push(reader.sint64());\n                break;\n            case 16:\n                if (!(message.privateCacheTtlCount && message.privateCacheTtlCount.length))\n                    message.privateCacheTtlCount = [];\n                if ((tag & 7) === 2) {\n                    var end2 = reader.uint32() + reader.pos;\n                    while (reader.pos < end2)\n                        message.privateCacheTtlCount.push(reader.sint64());\n                } else\n                    message.privateCacheTtlCount.push(reader.sint64());\n                break;\n            case 11:\n                message.registeredOperationCount = reader.uint64();\n                break;\n            case 12:\n                message.forbiddenOperationCount = reader.uint64();\n                break;\n            case 17:\n                message.requestsWithoutFieldInstrumentation = reader.uint64();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a QueryLatencyStats message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof QueryLatencyStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {QueryLatencyStats} QueryLatencyStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    QueryLatencyStats.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a QueryLatencyStats message.\n     * @function verify\n     * @memberof QueryLatencyStats\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    QueryLatencyStats.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.latencyCount != null && message.hasOwnProperty(\"latencyCount\")) {\n            var array13;\n            if (message.latencyCount != null && message.latencyCount.toArray)\n                array13 = message.latencyCount.toArray();\n            else\n                array13 = message.latencyCount;\n            if (!Array.isArray(array13))\n                return \"latencyCount: array expected\";\n            for (var i = 0; i < array13.length; ++i)\n                if (!$util.isInteger(array13[i]) && !(array13[i] && $util.isInteger(array13[i].low) && $util.isInteger(array13[i].high)))\n                    return \"latencyCount: integer|Long[] expected\";\n        }\n        if (message.requestCount != null && message.hasOwnProperty(\"requestCount\"))\n            if (!$util.isInteger(message.requestCount) && !(message.requestCount && $util.isInteger(message.requestCount.low) && $util.isInteger(message.requestCount.high)))\n                return \"requestCount: integer|Long expected\";\n        if (message.cacheHits != null && message.hasOwnProperty(\"cacheHits\"))\n            if (!$util.isInteger(message.cacheHits) && !(message.cacheHits && $util.isInteger(message.cacheHits.low) && $util.isInteger(message.cacheHits.high)))\n                return \"cacheHits: integer|Long expected\";\n        if (message.persistedQueryHits != null && message.hasOwnProperty(\"persistedQueryHits\"))\n            if (!$util.isInteger(message.persistedQueryHits) && !(message.persistedQueryHits && $util.isInteger(message.persistedQueryHits.low) && $util.isInteger(message.persistedQueryHits.high)))\n                return \"persistedQueryHits: integer|Long expected\";\n        if (message.persistedQueryMisses != null && message.hasOwnProperty(\"persistedQueryMisses\"))\n            if (!$util.isInteger(message.persistedQueryMisses) && !(message.persistedQueryMisses && $util.isInteger(message.persistedQueryMisses.low) && $util.isInteger(message.persistedQueryMisses.high)))\n                return \"persistedQueryMisses: integer|Long expected\";\n        if (message.cacheLatencyCount != null && message.hasOwnProperty(\"cacheLatencyCount\")) {\n            var array14;\n            if (message.cacheLatencyCount != null && message.cacheLatencyCount.toArray)\n                array14 = message.cacheLatencyCount.toArray();\n            else\n                array14 = message.cacheLatencyCount;\n            if (!Array.isArray(array14))\n                return \"cacheLatencyCount: array expected\";\n            for (var i = 0; i < array14.length; ++i)\n                if (!$util.isInteger(array14[i]) && !(array14[i] && $util.isInteger(array14[i].low) && $util.isInteger(array14[i].high)))\n                    return \"cacheLatencyCount: integer|Long[] expected\";\n        }\n        if (message.rootErrorStats != null && message.hasOwnProperty(\"rootErrorStats\")) {\n            var error = $root.PathErrorStats.verify(message.rootErrorStats);\n            if (error)\n                return \"rootErrorStats.\" + error;\n        }\n        if (message.requestsWithErrorsCount != null && message.hasOwnProperty(\"requestsWithErrorsCount\"))\n            if (!$util.isInteger(message.requestsWithErrorsCount) && !(message.requestsWithErrorsCount && $util.isInteger(message.requestsWithErrorsCount.low) && $util.isInteger(message.requestsWithErrorsCount.high)))\n                return \"requestsWithErrorsCount: integer|Long expected\";\n        if (message.publicCacheTtlCount != null && message.hasOwnProperty(\"publicCacheTtlCount\")) {\n            var array15;\n            if (message.publicCacheTtlCount != null && message.publicCacheTtlCount.toArray)\n                array15 = message.publicCacheTtlCount.toArray();\n            else\n                array15 = message.publicCacheTtlCount;\n            if (!Array.isArray(array15))\n                return \"publicCacheTtlCount: array expected\";\n            for (var i = 0; i < array15.length; ++i)\n                if (!$util.isInteger(array15[i]) && !(array15[i] && $util.isInteger(array15[i].low) && $util.isInteger(array15[i].high)))\n                    return \"publicCacheTtlCount: integer|Long[] expected\";\n        }\n        if (message.privateCacheTtlCount != null && message.hasOwnProperty(\"privateCacheTtlCount\")) {\n            var array16;\n            if (message.privateCacheTtlCount != null && message.privateCacheTtlCount.toArray)\n                array16 = message.privateCacheTtlCount.toArray();\n            else\n                array16 = message.privateCacheTtlCount;\n            if (!Array.isArray(array16))\n                return \"privateCacheTtlCount: array expected\";\n            for (var i = 0; i < array16.length; ++i)\n                if (!$util.isInteger(array16[i]) && !(array16[i] && $util.isInteger(array16[i].low) && $util.isInteger(array16[i].high)))\n                    return \"privateCacheTtlCount: integer|Long[] expected\";\n        }\n        if (message.registeredOperationCount != null && message.hasOwnProperty(\"registeredOperationCount\"))\n            if (!$util.isInteger(message.registeredOperationCount) && !(message.registeredOperationCount && $util.isInteger(message.registeredOperationCount.low) && $util.isInteger(message.registeredOperationCount.high)))\n                return \"registeredOperationCount: integer|Long expected\";\n        if (message.forbiddenOperationCount != null && message.hasOwnProperty(\"forbiddenOperationCount\"))\n            if (!$util.isInteger(message.forbiddenOperationCount) && !(message.forbiddenOperationCount && $util.isInteger(message.forbiddenOperationCount.low) && $util.isInteger(message.forbiddenOperationCount.high)))\n                return \"forbiddenOperationCount: integer|Long expected\";\n        if (message.requestsWithoutFieldInstrumentation != null && message.hasOwnProperty(\"requestsWithoutFieldInstrumentation\"))\n            if (!$util.isInteger(message.requestsWithoutFieldInstrumentation) && !(message.requestsWithoutFieldInstrumentation && $util.isInteger(message.requestsWithoutFieldInstrumentation.low) && $util.isInteger(message.requestsWithoutFieldInstrumentation.high)))\n                return \"requestsWithoutFieldInstrumentation: integer|Long expected\";\n        return null;\n    };\n\n    /**\n     * Creates a plain object from a QueryLatencyStats message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof QueryLatencyStats\n     * @static\n     * @param {QueryLatencyStats} message QueryLatencyStats\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    QueryLatencyStats.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults) {\n            object.latencyCount = [];\n            object.cacheLatencyCount = [];\n            object.publicCacheTtlCount = [];\n            object.privateCacheTtlCount = [];\n        }\n        if (options.defaults) {\n            object.requestCount = 0;\n            object.cacheHits = 0;\n            object.persistedQueryHits = 0;\n            object.persistedQueryMisses = 0;\n            object.rootErrorStats = null;\n            object.requestsWithErrorsCount = 0;\n            object.registeredOperationCount = 0;\n            object.forbiddenOperationCount = 0;\n            object.requestsWithoutFieldInstrumentation = 0;\n        }\n        if (message.requestCount != null && message.hasOwnProperty(\"requestCount\"))\n            if (typeof message.requestCount === \"number\")\n                object.requestCount = options.longs === String ? String(message.requestCount) : message.requestCount;\n            else\n                object.requestCount = options.longs === String ? $util.Long.prototype.toString.call(message.requestCount) : options.longs === Number ? new $util.LongBits(message.requestCount.low >>> 0, message.requestCount.high >>> 0).toNumber(true) : message.requestCount;\n        if (message.cacheHits != null && message.hasOwnProperty(\"cacheHits\"))\n            if (typeof message.cacheHits === \"number\")\n                object.cacheHits = options.longs === String ? String(message.cacheHits) : message.cacheHits;\n            else\n                object.cacheHits = options.longs === String ? $util.Long.prototype.toString.call(message.cacheHits) : options.longs === Number ? new $util.LongBits(message.cacheHits.low >>> 0, message.cacheHits.high >>> 0).toNumber(true) : message.cacheHits;\n        if (message.persistedQueryHits != null && message.hasOwnProperty(\"persistedQueryHits\"))\n            if (typeof message.persistedQueryHits === \"number\")\n                object.persistedQueryHits = options.longs === String ? String(message.persistedQueryHits) : message.persistedQueryHits;\n            else\n                object.persistedQueryHits = options.longs === String ? $util.Long.prototype.toString.call(message.persistedQueryHits) : options.longs === Number ? new $util.LongBits(message.persistedQueryHits.low >>> 0, message.persistedQueryHits.high >>> 0).toNumber(true) : message.persistedQueryHits;\n        if (message.persistedQueryMisses != null && message.hasOwnProperty(\"persistedQueryMisses\"))\n            if (typeof message.persistedQueryMisses === \"number\")\n                object.persistedQueryMisses = options.longs === String ? String(message.persistedQueryMisses) : message.persistedQueryMisses;\n            else\n                object.persistedQueryMisses = options.longs === String ? $util.Long.prototype.toString.call(message.persistedQueryMisses) : options.longs === Number ? new $util.LongBits(message.persistedQueryMisses.low >>> 0, message.persistedQueryMisses.high >>> 0).toNumber(true) : message.persistedQueryMisses;\n        if (message.rootErrorStats != null && message.hasOwnProperty(\"rootErrorStats\"))\n            object.rootErrorStats = $root.PathErrorStats.toObject(message.rootErrorStats, options);\n        if (message.requestsWithErrorsCount != null && message.hasOwnProperty(\"requestsWithErrorsCount\"))\n            if (typeof message.requestsWithErrorsCount === \"number\")\n                object.requestsWithErrorsCount = options.longs === String ? String(message.requestsWithErrorsCount) : message.requestsWithErrorsCount;\n            else\n                object.requestsWithErrorsCount = options.longs === String ? $util.Long.prototype.toString.call(message.requestsWithErrorsCount) : options.longs === Number ? new $util.LongBits(message.requestsWithErrorsCount.low >>> 0, message.requestsWithErrorsCount.high >>> 0).toNumber(true) : message.requestsWithErrorsCount;\n        if (message.registeredOperationCount != null && message.hasOwnProperty(\"registeredOperationCount\"))\n            if (typeof message.registeredOperationCount === \"number\")\n                object.registeredOperationCount = options.longs === String ? String(message.registeredOperationCount) : message.registeredOperationCount;\n            else\n                object.registeredOperationCount = options.longs === String ? $util.Long.prototype.toString.call(message.registeredOperationCount) : options.longs === Number ? new $util.LongBits(message.registeredOperationCount.low >>> 0, message.registeredOperationCount.high >>> 0).toNumber(true) : message.registeredOperationCount;\n        if (message.forbiddenOperationCount != null && message.hasOwnProperty(\"forbiddenOperationCount\"))\n            if (typeof message.forbiddenOperationCount === \"number\")\n                object.forbiddenOperationCount = options.longs === String ? String(message.forbiddenOperationCount) : message.forbiddenOperationCount;\n            else\n                object.forbiddenOperationCount = options.longs === String ? $util.Long.prototype.toString.call(message.forbiddenOperationCount) : options.longs === Number ? new $util.LongBits(message.forbiddenOperationCount.low >>> 0, message.forbiddenOperationCount.high >>> 0).toNumber(true) : message.forbiddenOperationCount;\n        if (message.latencyCount && message.latencyCount.length) {\n            object.latencyCount = [];\n            for (var j = 0; j < message.latencyCount.length; ++j)\n                if (typeof message.latencyCount[j] === \"number\")\n                    object.latencyCount[j] = options.longs === String ? String(message.latencyCount[j]) : message.latencyCount[j];\n                else\n                    object.latencyCount[j] = options.longs === String ? $util.Long.prototype.toString.call(message.latencyCount[j]) : options.longs === Number ? new $util.LongBits(message.latencyCount[j].low >>> 0, message.latencyCount[j].high >>> 0).toNumber() : message.latencyCount[j];\n        }\n        if (message.cacheLatencyCount && message.cacheLatencyCount.length) {\n            object.cacheLatencyCount = [];\n            for (var j = 0; j < message.cacheLatencyCount.length; ++j)\n                if (typeof message.cacheLatencyCount[j] === \"number\")\n                    object.cacheLatencyCount[j] = options.longs === String ? String(message.cacheLatencyCount[j]) : message.cacheLatencyCount[j];\n                else\n                    object.cacheLatencyCount[j] = options.longs === String ? $util.Long.prototype.toString.call(message.cacheLatencyCount[j]) : options.longs === Number ? new $util.LongBits(message.cacheLatencyCount[j].low >>> 0, message.cacheLatencyCount[j].high >>> 0).toNumber() : message.cacheLatencyCount[j];\n        }\n        if (message.publicCacheTtlCount && message.publicCacheTtlCount.length) {\n            object.publicCacheTtlCount = [];\n            for (var j = 0; j < message.publicCacheTtlCount.length; ++j)\n                if (typeof message.publicCacheTtlCount[j] === \"number\")\n                    object.publicCacheTtlCount[j] = options.longs === String ? String(message.publicCacheTtlCount[j]) : message.publicCacheTtlCount[j];\n                else\n                    object.publicCacheTtlCount[j] = options.longs === String ? $util.Long.prototype.toString.call(message.publicCacheTtlCount[j]) : options.longs === Number ? new $util.LongBits(message.publicCacheTtlCount[j].low >>> 0, message.publicCacheTtlCount[j].high >>> 0).toNumber() : message.publicCacheTtlCount[j];\n        }\n        if (message.privateCacheTtlCount && message.privateCacheTtlCount.length) {\n            object.privateCacheTtlCount = [];\n            for (var j = 0; j < message.privateCacheTtlCount.length; ++j)\n                if (typeof message.privateCacheTtlCount[j] === \"number\")\n                    object.privateCacheTtlCount[j] = options.longs === String ? String(message.privateCacheTtlCount[j]) : message.privateCacheTtlCount[j];\n                else\n                    object.privateCacheTtlCount[j] = options.longs === String ? $util.Long.prototype.toString.call(message.privateCacheTtlCount[j]) : options.longs === Number ? new $util.LongBits(message.privateCacheTtlCount[j].low >>> 0, message.privateCacheTtlCount[j].high >>> 0).toNumber() : message.privateCacheTtlCount[j];\n        }\n        if (message.requestsWithoutFieldInstrumentation != null && message.hasOwnProperty(\"requestsWithoutFieldInstrumentation\"))\n            if (typeof message.requestsWithoutFieldInstrumentation === \"number\")\n                object.requestsWithoutFieldInstrumentation = options.longs === String ? String(message.requestsWithoutFieldInstrumentation) : message.requestsWithoutFieldInstrumentation;\n            else\n                object.requestsWithoutFieldInstrumentation = options.longs === String ? $util.Long.prototype.toString.call(message.requestsWithoutFieldInstrumentation) : options.longs === Number ? new $util.LongBits(message.requestsWithoutFieldInstrumentation.low >>> 0, message.requestsWithoutFieldInstrumentation.high >>> 0).toNumber(true) : message.requestsWithoutFieldInstrumentation;\n        return object;\n    };\n\n    /**\n     * Converts this QueryLatencyStats to JSON.\n     * @function toJSON\n     * @memberof QueryLatencyStats\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    QueryLatencyStats.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return QueryLatencyStats;\n})();\n\n$root.StatsContext = (function() {\n\n    /**\n     * Properties of a StatsContext.\n     * @exports IStatsContext\n     * @interface IStatsContext\n     * @property {string|null} [clientName] StatsContext clientName\n     * @property {string|null} [clientVersion] StatsContext clientVersion\n     */\n\n    /**\n     * Constructs a new StatsContext.\n     * @exports StatsContext\n     * @classdesc Represents a StatsContext.\n     * @implements IStatsContext\n     * @constructor\n     * @param {IStatsContext=} [properties] Properties to set\n     */\n    function StatsContext(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * StatsContext clientName.\n     * @member {string} clientName\n     * @memberof StatsContext\n     * @instance\n     */\n    StatsContext.prototype.clientName = \"\";\n\n    /**\n     * StatsContext clientVersion.\n     * @member {string} clientVersion\n     * @memberof StatsContext\n     * @instance\n     */\n    StatsContext.prototype.clientVersion = \"\";\n\n    /**\n     * Creates a new StatsContext instance using the specified properties.\n     * @function create\n     * @memberof StatsContext\n     * @static\n     * @param {IStatsContext=} [properties] Properties to set\n     * @returns {StatsContext} StatsContext instance\n     */\n    StatsContext.create = function create(properties) {\n        return new StatsContext(properties);\n    };\n\n    /**\n     * Encodes the specified StatsContext message. Does not implicitly {@link StatsContext.verify|verify} messages.\n     * @function encode\n     * @memberof StatsContext\n     * @static\n     * @param {IStatsContext} message StatsContext message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    StatsContext.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.clientName != null && Object.hasOwnProperty.call(message, \"clientName\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.clientName);\n        if (message.clientVersion != null && Object.hasOwnProperty.call(message, \"clientVersion\"))\n            writer.uint32(/* id 3, wireType 2 =*/26).string(message.clientVersion);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified StatsContext message, length delimited. Does not implicitly {@link StatsContext.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof StatsContext\n     * @static\n     * @param {IStatsContext} message StatsContext message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    StatsContext.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a StatsContext message from the specified reader or buffer.\n     * @function decode\n     * @memberof StatsContext\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {StatsContext} StatsContext\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    StatsContext.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.StatsContext();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 2:\n                message.clientName = reader.string();\n                break;\n            case 3:\n                message.clientVersion = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a StatsContext message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof StatsContext\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {StatsContext} StatsContext\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    StatsContext.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a StatsContext message.\n     * @function verify\n     * @memberof StatsContext\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    StatsContext.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.clientName != null && message.hasOwnProperty(\"clientName\"))\n            if (!$util.isString(message.clientName))\n                return \"clientName: string expected\";\n        if (message.clientVersion != null && message.hasOwnProperty(\"clientVersion\"))\n            if (!$util.isString(message.clientVersion))\n                return \"clientVersion: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a plain object from a StatsContext message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof StatsContext\n     * @static\n     * @param {StatsContext} message StatsContext\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    StatsContext.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.clientName = \"\";\n            object.clientVersion = \"\";\n        }\n        if (message.clientName != null && message.hasOwnProperty(\"clientName\"))\n            object.clientName = message.clientName;\n        if (message.clientVersion != null && message.hasOwnProperty(\"clientVersion\"))\n            object.clientVersion = message.clientVersion;\n        return object;\n    };\n\n    /**\n     * Converts this StatsContext to JSON.\n     * @function toJSON\n     * @memberof StatsContext\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    StatsContext.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return StatsContext;\n})();\n\n$root.ContextualizedQueryLatencyStats = (function() {\n\n    /**\n     * Properties of a ContextualizedQueryLatencyStats.\n     * @exports IContextualizedQueryLatencyStats\n     * @interface IContextualizedQueryLatencyStats\n     * @property {IQueryLatencyStats|null} [queryLatencyStats] ContextualizedQueryLatencyStats queryLatencyStats\n     * @property {IStatsContext|null} [context] ContextualizedQueryLatencyStats context\n     */\n\n    /**\n     * Constructs a new ContextualizedQueryLatencyStats.\n     * @exports ContextualizedQueryLatencyStats\n     * @classdesc Represents a ContextualizedQueryLatencyStats.\n     * @implements IContextualizedQueryLatencyStats\n     * @constructor\n     * @param {IContextualizedQueryLatencyStats=} [properties] Properties to set\n     */\n    function ContextualizedQueryLatencyStats(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ContextualizedQueryLatencyStats queryLatencyStats.\n     * @member {IQueryLatencyStats|null|undefined} queryLatencyStats\n     * @memberof ContextualizedQueryLatencyStats\n     * @instance\n     */\n    ContextualizedQueryLatencyStats.prototype.queryLatencyStats = null;\n\n    /**\n     * ContextualizedQueryLatencyStats context.\n     * @member {IStatsContext|null|undefined} context\n     * @memberof ContextualizedQueryLatencyStats\n     * @instance\n     */\n    ContextualizedQueryLatencyStats.prototype.context = null;\n\n    /**\n     * Creates a new ContextualizedQueryLatencyStats instance using the specified properties.\n     * @function create\n     * @memberof ContextualizedQueryLatencyStats\n     * @static\n     * @param {IContextualizedQueryLatencyStats=} [properties] Properties to set\n     * @returns {ContextualizedQueryLatencyStats} ContextualizedQueryLatencyStats instance\n     */\n    ContextualizedQueryLatencyStats.create = function create(properties) {\n        return new ContextualizedQueryLatencyStats(properties);\n    };\n\n    /**\n     * Encodes the specified ContextualizedQueryLatencyStats message. Does not implicitly {@link ContextualizedQueryLatencyStats.verify|verify} messages.\n     * @function encode\n     * @memberof ContextualizedQueryLatencyStats\n     * @static\n     * @param {IContextualizedQueryLatencyStats} message ContextualizedQueryLatencyStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ContextualizedQueryLatencyStats.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.queryLatencyStats != null && Object.hasOwnProperty.call(message, \"queryLatencyStats\"))\n            $root.QueryLatencyStats.encode(message.queryLatencyStats, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.context != null && Object.hasOwnProperty.call(message, \"context\"))\n            $root.StatsContext.encode(message.context, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ContextualizedQueryLatencyStats message, length delimited. Does not implicitly {@link ContextualizedQueryLatencyStats.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ContextualizedQueryLatencyStats\n     * @static\n     * @param {IContextualizedQueryLatencyStats} message ContextualizedQueryLatencyStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ContextualizedQueryLatencyStats.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ContextualizedQueryLatencyStats message from the specified reader or buffer.\n     * @function decode\n     * @memberof ContextualizedQueryLatencyStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ContextualizedQueryLatencyStats} ContextualizedQueryLatencyStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ContextualizedQueryLatencyStats.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ContextualizedQueryLatencyStats();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.queryLatencyStats = $root.QueryLatencyStats.decode(reader, reader.uint32());\n                break;\n            case 2:\n                message.context = $root.StatsContext.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ContextualizedQueryLatencyStats message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ContextualizedQueryLatencyStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ContextualizedQueryLatencyStats} ContextualizedQueryLatencyStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ContextualizedQueryLatencyStats.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ContextualizedQueryLatencyStats message.\n     * @function verify\n     * @memberof ContextualizedQueryLatencyStats\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ContextualizedQueryLatencyStats.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.queryLatencyStats != null && message.hasOwnProperty(\"queryLatencyStats\")) {\n            var error = $root.QueryLatencyStats.verify(message.queryLatencyStats);\n            if (error)\n                return \"queryLatencyStats.\" + error;\n        }\n        if (message.context != null && message.hasOwnProperty(\"context\")) {\n            var error = $root.StatsContext.verify(message.context);\n            if (error)\n                return \"context.\" + error;\n        }\n        return null;\n    };\n\n    /**\n     * Creates a plain object from a ContextualizedQueryLatencyStats message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ContextualizedQueryLatencyStats\n     * @static\n     * @param {ContextualizedQueryLatencyStats} message ContextualizedQueryLatencyStats\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ContextualizedQueryLatencyStats.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.queryLatencyStats = null;\n            object.context = null;\n        }\n        if (message.queryLatencyStats != null && message.hasOwnProperty(\"queryLatencyStats\"))\n            object.queryLatencyStats = $root.QueryLatencyStats.toObject(message.queryLatencyStats, options);\n        if (message.context != null && message.hasOwnProperty(\"context\"))\n            object.context = $root.StatsContext.toObject(message.context, options);\n        return object;\n    };\n\n    /**\n     * Converts this ContextualizedQueryLatencyStats to JSON.\n     * @function toJSON\n     * @memberof ContextualizedQueryLatencyStats\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ContextualizedQueryLatencyStats.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ContextualizedQueryLatencyStats;\n})();\n\n$root.ContextualizedTypeStats = (function() {\n\n    /**\n     * Properties of a ContextualizedTypeStats.\n     * @exports IContextualizedTypeStats\n     * @interface IContextualizedTypeStats\n     * @property {IStatsContext|null} [context] ContextualizedTypeStats context\n     * @property {Object.<string,ITypeStat>|null} [perTypeStat] ContextualizedTypeStats perTypeStat\n     */\n\n    /**\n     * Constructs a new ContextualizedTypeStats.\n     * @exports ContextualizedTypeStats\n     * @classdesc Represents a ContextualizedTypeStats.\n     * @implements IContextualizedTypeStats\n     * @constructor\n     * @param {IContextualizedTypeStats=} [properties] Properties to set\n     */\n    function ContextualizedTypeStats(properties) {\n        this.perTypeStat = {};\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ContextualizedTypeStats context.\n     * @member {IStatsContext|null|undefined} context\n     * @memberof ContextualizedTypeStats\n     * @instance\n     */\n    ContextualizedTypeStats.prototype.context = null;\n\n    /**\n     * ContextualizedTypeStats perTypeStat.\n     * @member {Object.<string,ITypeStat>} perTypeStat\n     * @memberof ContextualizedTypeStats\n     * @instance\n     */\n    ContextualizedTypeStats.prototype.perTypeStat = $util.emptyObject;\n\n    /**\n     * Creates a new ContextualizedTypeStats instance using the specified properties.\n     * @function create\n     * @memberof ContextualizedTypeStats\n     * @static\n     * @param {IContextualizedTypeStats=} [properties] Properties to set\n     * @returns {ContextualizedTypeStats} ContextualizedTypeStats instance\n     */\n    ContextualizedTypeStats.create = function create(properties) {\n        return new ContextualizedTypeStats(properties);\n    };\n\n    /**\n     * Encodes the specified ContextualizedTypeStats message. Does not implicitly {@link ContextualizedTypeStats.verify|verify} messages.\n     * @function encode\n     * @memberof ContextualizedTypeStats\n     * @static\n     * @param {IContextualizedTypeStats} message ContextualizedTypeStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ContextualizedTypeStats.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.context != null && Object.hasOwnProperty.call(message, \"context\"))\n            $root.StatsContext.encode(message.context, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.perTypeStat != null && Object.hasOwnProperty.call(message, \"perTypeStat\"))\n            for (var keys = Object.keys(message.perTypeStat), i = 0; i < keys.length; ++i) {\n                writer.uint32(/* id 2, wireType 2 =*/18).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);\n                $root.TypeStat.encode(message.perTypeStat[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n            }\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ContextualizedTypeStats message, length delimited. Does not implicitly {@link ContextualizedTypeStats.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ContextualizedTypeStats\n     * @static\n     * @param {IContextualizedTypeStats} message ContextualizedTypeStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ContextualizedTypeStats.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ContextualizedTypeStats message from the specified reader or buffer.\n     * @function decode\n     * @memberof ContextualizedTypeStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ContextualizedTypeStats} ContextualizedTypeStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ContextualizedTypeStats.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ContextualizedTypeStats(), key;\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.context = $root.StatsContext.decode(reader, reader.uint32());\n                break;\n            case 2:\n                reader.skip().pos++;\n                if (message.perTypeStat === $util.emptyObject)\n                    message.perTypeStat = {};\n                key = reader.string();\n                reader.pos++;\n                message.perTypeStat[key] = $root.TypeStat.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ContextualizedTypeStats message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ContextualizedTypeStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ContextualizedTypeStats} ContextualizedTypeStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ContextualizedTypeStats.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ContextualizedTypeStats message.\n     * @function verify\n     * @memberof ContextualizedTypeStats\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ContextualizedTypeStats.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.context != null && message.hasOwnProperty(\"context\")) {\n            var error = $root.StatsContext.verify(message.context);\n            if (error)\n                return \"context.\" + error;\n        }\n        if (message.perTypeStat != null && message.hasOwnProperty(\"perTypeStat\")) {\n            if (!$util.isObject(message.perTypeStat))\n                return \"perTypeStat: object expected\";\n            var key = Object.keys(message.perTypeStat);\n            for (var i = 0; i < key.length; ++i) {\n                var error = $root.TypeStat.verify(message.perTypeStat[key[i]]);\n                if (error)\n                    return \"perTypeStat.\" + error;\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Creates a plain object from a ContextualizedTypeStats message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ContextualizedTypeStats\n     * @static\n     * @param {ContextualizedTypeStats} message ContextualizedTypeStats\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ContextualizedTypeStats.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.objects || options.defaults)\n            object.perTypeStat = {};\n        if (options.defaults)\n            object.context = null;\n        if (message.context != null && message.hasOwnProperty(\"context\"))\n            object.context = $root.StatsContext.toObject(message.context, options);\n        var keys2;\n        if (message.perTypeStat && (keys2 = Object.keys(message.perTypeStat)).length) {\n            object.perTypeStat = {};\n            for (var j = 0; j < keys2.length; ++j)\n                object.perTypeStat[keys2[j]] = $root.TypeStat.toObject(message.perTypeStat[keys2[j]], options);\n        }\n        return object;\n    };\n\n    /**\n     * Converts this ContextualizedTypeStats to JSON.\n     * @function toJSON\n     * @memberof ContextualizedTypeStats\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ContextualizedTypeStats.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ContextualizedTypeStats;\n})();\n\n$root.FieldStat = (function() {\n\n    /**\n     * Properties of a FieldStat.\n     * @exports IFieldStat\n     * @interface IFieldStat\n     * @property {string|null} [returnType] FieldStat returnType\n     * @property {number|null} [errorsCount] FieldStat errorsCount\n     * @property {number|null} [observedExecutionCount] FieldStat observedExecutionCount\n     * @property {number|null} [estimatedExecutionCount] FieldStat estimatedExecutionCount\n     * @property {number|null} [requestsWithErrorsCount] FieldStat requestsWithErrorsCount\n     * @property {$protobuf.ToArray.<number>|Array.<number>|null} [latencyCount] FieldStat latencyCount\n     */\n\n    /**\n     * Constructs a new FieldStat.\n     * @exports FieldStat\n     * @classdesc Represents a FieldStat.\n     * @implements IFieldStat\n     * @constructor\n     * @param {IFieldStat=} [properties] Properties to set\n     */\n    function FieldStat(properties) {\n        this.latencyCount = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * FieldStat returnType.\n     * @member {string} returnType\n     * @memberof FieldStat\n     * @instance\n     */\n    FieldStat.prototype.returnType = \"\";\n\n    /**\n     * FieldStat errorsCount.\n     * @member {number} errorsCount\n     * @memberof FieldStat\n     * @instance\n     */\n    FieldStat.prototype.errorsCount = 0;\n\n    /**\n     * FieldStat observedExecutionCount.\n     * @member {number} observedExecutionCount\n     * @memberof FieldStat\n     * @instance\n     */\n    FieldStat.prototype.observedExecutionCount = 0;\n\n    /**\n     * FieldStat estimatedExecutionCount.\n     * @member {number} estimatedExecutionCount\n     * @memberof FieldStat\n     * @instance\n     */\n    FieldStat.prototype.estimatedExecutionCount = 0;\n\n    /**\n     * FieldStat requestsWithErrorsCount.\n     * @member {number} requestsWithErrorsCount\n     * @memberof FieldStat\n     * @instance\n     */\n    FieldStat.prototype.requestsWithErrorsCount = 0;\n\n    /**\n     * FieldStat latencyCount.\n     * @member {Array.<number>} latencyCount\n     * @memberof FieldStat\n     * @instance\n     */\n    FieldStat.prototype.latencyCount = $util.emptyArray;\n\n    /**\n     * Creates a new FieldStat instance using the specified properties.\n     * @function create\n     * @memberof FieldStat\n     * @static\n     * @param {IFieldStat=} [properties] Properties to set\n     * @returns {FieldStat} FieldStat instance\n     */\n    FieldStat.create = function create(properties) {\n        return new FieldStat(properties);\n    };\n\n    /**\n     * Encodes the specified FieldStat message. Does not implicitly {@link FieldStat.verify|verify} messages.\n     * @function encode\n     * @memberof FieldStat\n     * @static\n     * @param {IFieldStat} message FieldStat message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    FieldStat.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.returnType != null && Object.hasOwnProperty.call(message, \"returnType\"))\n            writer.uint32(/* id 3, wireType 2 =*/26).string(message.returnType);\n        if (message.errorsCount != null && Object.hasOwnProperty.call(message, \"errorsCount\"))\n            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.errorsCount);\n        if (message.observedExecutionCount != null && Object.hasOwnProperty.call(message, \"observedExecutionCount\"))\n            writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.observedExecutionCount);\n        if (message.requestsWithErrorsCount != null && Object.hasOwnProperty.call(message, \"requestsWithErrorsCount\"))\n            writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.requestsWithErrorsCount);\n        var array9;\n        if (message.latencyCount != null && message.latencyCount.toArray)\n            array9 = message.latencyCount.toArray();\n        else\n            array9 = message.latencyCount;\n        if (array9 != null && array9.length) {\n            writer.uint32(/* id 9, wireType 2 =*/74).fork();\n            for (var i = 0; i < array9.length; ++i)\n                writer.sint64(array9[i]);\n            writer.ldelim();\n        }\n        if (message.estimatedExecutionCount != null && Object.hasOwnProperty.call(message, \"estimatedExecutionCount\"))\n            writer.uint32(/* id 10, wireType 0 =*/80).uint64(message.estimatedExecutionCount);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified FieldStat message, length delimited. Does not implicitly {@link FieldStat.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof FieldStat\n     * @static\n     * @param {IFieldStat} message FieldStat message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    FieldStat.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a FieldStat message from the specified reader or buffer.\n     * @function decode\n     * @memberof FieldStat\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {FieldStat} FieldStat\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    FieldStat.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.FieldStat();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 3:\n                message.returnType = reader.string();\n                break;\n            case 4:\n                message.errorsCount = reader.uint64();\n                break;\n            case 5:\n                message.observedExecutionCount = reader.uint64();\n                break;\n            case 10:\n                message.estimatedExecutionCount = reader.uint64();\n                break;\n            case 6:\n                message.requestsWithErrorsCount = reader.uint64();\n                break;\n            case 9:\n                if (!(message.latencyCount && message.latencyCount.length))\n                    message.latencyCount = [];\n                if ((tag & 7) === 2) {\n                    var end2 = reader.uint32() + reader.pos;\n                    while (reader.pos < end2)\n                        message.latencyCount.push(reader.sint64());\n                } else\n                    message.latencyCount.push(reader.sint64());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a FieldStat message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof FieldStat\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {FieldStat} FieldStat\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    FieldStat.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a FieldStat message.\n     * @function verify\n     * @memberof FieldStat\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    FieldStat.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.returnType != null && message.hasOwnProperty(\"returnType\"))\n            if (!$util.isString(message.returnType))\n                return \"returnType: string expected\";\n        if (message.errorsCount != null && message.hasOwnProperty(\"errorsCount\"))\n            if (!$util.isInteger(message.errorsCount) && !(message.errorsCount && $util.isInteger(message.errorsCount.low) && $util.isInteger(message.errorsCount.high)))\n                return \"errorsCount: integer|Long expected\";\n        if (message.observedExecutionCount != null && message.hasOwnProperty(\"observedExecutionCount\"))\n            if (!$util.isInteger(message.observedExecutionCount) && !(message.observedExecutionCount && $util.isInteger(message.observedExecutionCount.low) && $util.isInteger(message.observedExecutionCount.high)))\n                return \"observedExecutionCount: integer|Long expected\";\n        if (message.estimatedExecutionCount != null && message.hasOwnProperty(\"estimatedExecutionCount\"))\n            if (!$util.isInteger(message.estimatedExecutionCount) && !(message.estimatedExecutionCount && $util.isInteger(message.estimatedExecutionCount.low) && $util.isInteger(message.estimatedExecutionCount.high)))\n                return \"estimatedExecutionCount: integer|Long expected\";\n        if (message.requestsWithErrorsCount != null && message.hasOwnProperty(\"requestsWithErrorsCount\"))\n            if (!$util.isInteger(message.requestsWithErrorsCount) && !(message.requestsWithErrorsCount && $util.isInteger(message.requestsWithErrorsCount.low) && $util.isInteger(message.requestsWithErrorsCount.high)))\n                return \"requestsWithErrorsCount: integer|Long expected\";\n        if (message.latencyCount != null && message.hasOwnProperty(\"latencyCount\")) {\n            var array9;\n            if (message.latencyCount != null && message.latencyCount.toArray)\n                array9 = message.latencyCount.toArray();\n            else\n                array9 = message.latencyCount;\n            if (!Array.isArray(array9))\n                return \"latencyCount: array expected\";\n            for (var i = 0; i < array9.length; ++i)\n                if (!$util.isInteger(array9[i]) && !(array9[i] && $util.isInteger(array9[i].low) && $util.isInteger(array9[i].high)))\n                    return \"latencyCount: integer|Long[] expected\";\n        }\n        return null;\n    };\n\n    /**\n     * Creates a plain object from a FieldStat message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof FieldStat\n     * @static\n     * @param {FieldStat} message FieldStat\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    FieldStat.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults)\n            object.latencyCount = [];\n        if (options.defaults) {\n            object.returnType = \"\";\n            object.errorsCount = 0;\n            object.observedExecutionCount = 0;\n            object.requestsWithErrorsCount = 0;\n            object.estimatedExecutionCount = 0;\n        }\n        if (message.returnType != null && message.hasOwnProperty(\"returnType\"))\n            object.returnType = message.returnType;\n        if (message.errorsCount != null && message.hasOwnProperty(\"errorsCount\"))\n            if (typeof message.errorsCount === \"number\")\n                object.errorsCount = options.longs === String ? String(message.errorsCount) : message.errorsCount;\n            else\n                object.errorsCount = options.longs === String ? $util.Long.prototype.toString.call(message.errorsCount) : options.longs === Number ? new $util.LongBits(message.errorsCount.low >>> 0, message.errorsCount.high >>> 0).toNumber(true) : message.errorsCount;\n        if (message.observedExecutionCount != null && message.hasOwnProperty(\"observedExecutionCount\"))\n            if (typeof message.observedExecutionCount === \"number\")\n                object.observedExecutionCount = options.longs === String ? String(message.observedExecutionCount) : message.observedExecutionCount;\n            else\n                object.observedExecutionCount = options.longs === String ? $util.Long.prototype.toString.call(message.observedExecutionCount) : options.longs === Number ? new $util.LongBits(message.observedExecutionCount.low >>> 0, message.observedExecutionCount.high >>> 0).toNumber(true) : message.observedExecutionCount;\n        if (message.requestsWithErrorsCount != null && message.hasOwnProperty(\"requestsWithErrorsCount\"))\n            if (typeof message.requestsWithErrorsCount === \"number\")\n                object.requestsWithErrorsCount = options.longs === String ? String(message.requestsWithErrorsCount) : message.requestsWithErrorsCount;\n            else\n                object.requestsWithErrorsCount = options.longs === String ? $util.Long.prototype.toString.call(message.requestsWithErrorsCount) : options.longs === Number ? new $util.LongBits(message.requestsWithErrorsCount.low >>> 0, message.requestsWithErrorsCount.high >>> 0).toNumber(true) : message.requestsWithErrorsCount;\n        if (message.latencyCount && message.latencyCount.length) {\n            object.latencyCount = [];\n            for (var j = 0; j < message.latencyCount.length; ++j)\n                if (typeof message.latencyCount[j] === \"number\")\n                    object.latencyCount[j] = options.longs === String ? String(message.latencyCount[j]) : message.latencyCount[j];\n                else\n                    object.latencyCount[j] = options.longs === String ? $util.Long.prototype.toString.call(message.latencyCount[j]) : options.longs === Number ? new $util.LongBits(message.latencyCount[j].low >>> 0, message.latencyCount[j].high >>> 0).toNumber() : message.latencyCount[j];\n        }\n        if (message.estimatedExecutionCount != null && message.hasOwnProperty(\"estimatedExecutionCount\"))\n            if (typeof message.estimatedExecutionCount === \"number\")\n                object.estimatedExecutionCount = options.longs === String ? String(message.estimatedExecutionCount) : message.estimatedExecutionCount;\n            else\n                object.estimatedExecutionCount = options.longs === String ? $util.Long.prototype.toString.call(message.estimatedExecutionCount) : options.longs === Number ? new $util.LongBits(message.estimatedExecutionCount.low >>> 0, message.estimatedExecutionCount.high >>> 0).toNumber(true) : message.estimatedExecutionCount;\n        return object;\n    };\n\n    /**\n     * Converts this FieldStat to JSON.\n     * @function toJSON\n     * @memberof FieldStat\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    FieldStat.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return FieldStat;\n})();\n\n$root.TypeStat = (function() {\n\n    /**\n     * Properties of a TypeStat.\n     * @exports ITypeStat\n     * @interface ITypeStat\n     * @property {Object.<string,IFieldStat>|null} [perFieldStat] TypeStat perFieldStat\n     */\n\n    /**\n     * Constructs a new TypeStat.\n     * @exports TypeStat\n     * @classdesc Represents a TypeStat.\n     * @implements ITypeStat\n     * @constructor\n     * @param {ITypeStat=} [properties] Properties to set\n     */\n    function TypeStat(properties) {\n        this.perFieldStat = {};\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * TypeStat perFieldStat.\n     * @member {Object.<string,IFieldStat>} perFieldStat\n     * @memberof TypeStat\n     * @instance\n     */\n    TypeStat.prototype.perFieldStat = $util.emptyObject;\n\n    /**\n     * Creates a new TypeStat instance using the specified properties.\n     * @function create\n     * @memberof TypeStat\n     * @static\n     * @param {ITypeStat=} [properties] Properties to set\n     * @returns {TypeStat} TypeStat instance\n     */\n    TypeStat.create = function create(properties) {\n        return new TypeStat(properties);\n    };\n\n    /**\n     * Encodes the specified TypeStat message. Does not implicitly {@link TypeStat.verify|verify} messages.\n     * @function encode\n     * @memberof TypeStat\n     * @static\n     * @param {ITypeStat} message TypeStat message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    TypeStat.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.perFieldStat != null && Object.hasOwnProperty.call(message, \"perFieldStat\"))\n            for (var keys = Object.keys(message.perFieldStat), i = 0; i < keys.length; ++i) {\n                writer.uint32(/* id 3, wireType 2 =*/26).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);\n                $root.FieldStat.encode(message.perFieldStat[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n            }\n        return writer;\n    };\n\n    /**\n     * Encodes the specified TypeStat message, length delimited. Does not implicitly {@link TypeStat.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof TypeStat\n     * @static\n     * @param {ITypeStat} message TypeStat message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    TypeStat.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a TypeStat message from the specified reader or buffer.\n     * @function decode\n     * @memberof TypeStat\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {TypeStat} TypeStat\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    TypeStat.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.TypeStat(), key;\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 3:\n                reader.skip().pos++;\n                if (message.perFieldStat === $util.emptyObject)\n                    message.perFieldStat = {};\n                key = reader.string();\n                reader.pos++;\n                message.perFieldStat[key] = $root.FieldStat.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a TypeStat message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof TypeStat\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {TypeStat} TypeStat\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    TypeStat.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a TypeStat message.\n     * @function verify\n     * @memberof TypeStat\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    TypeStat.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.perFieldStat != null && message.hasOwnProperty(\"perFieldStat\")) {\n            if (!$util.isObject(message.perFieldStat))\n                return \"perFieldStat: object expected\";\n            var key = Object.keys(message.perFieldStat);\n            for (var i = 0; i < key.length; ++i) {\n                var error = $root.FieldStat.verify(message.perFieldStat[key[i]]);\n                if (error)\n                    return \"perFieldStat.\" + error;\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Creates a plain object from a TypeStat message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof TypeStat\n     * @static\n     * @param {TypeStat} message TypeStat\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    TypeStat.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.objects || options.defaults)\n            object.perFieldStat = {};\n        var keys2;\n        if (message.perFieldStat && (keys2 = Object.keys(message.perFieldStat)).length) {\n            object.perFieldStat = {};\n            for (var j = 0; j < keys2.length; ++j)\n                object.perFieldStat[keys2[j]] = $root.FieldStat.toObject(message.perFieldStat[keys2[j]], options);\n        }\n        return object;\n    };\n\n    /**\n     * Converts this TypeStat to JSON.\n     * @function toJSON\n     * @memberof TypeStat\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    TypeStat.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return TypeStat;\n})();\n\n$root.ReferencedFieldsForType = (function() {\n\n    /**\n     * Properties of a ReferencedFieldsForType.\n     * @exports IReferencedFieldsForType\n     * @interface IReferencedFieldsForType\n     * @property {Array.<string>|null} [fieldNames] ReferencedFieldsForType fieldNames\n     * @property {boolean|null} [isInterface] ReferencedFieldsForType isInterface\n     */\n\n    /**\n     * Constructs a new ReferencedFieldsForType.\n     * @exports ReferencedFieldsForType\n     * @classdesc Represents a ReferencedFieldsForType.\n     * @implements IReferencedFieldsForType\n     * @constructor\n     * @param {IReferencedFieldsForType=} [properties] Properties to set\n     */\n    function ReferencedFieldsForType(properties) {\n        this.fieldNames = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ReferencedFieldsForType fieldNames.\n     * @member {Array.<string>} fieldNames\n     * @memberof ReferencedFieldsForType\n     * @instance\n     */\n    ReferencedFieldsForType.prototype.fieldNames = $util.emptyArray;\n\n    /**\n     * ReferencedFieldsForType isInterface.\n     * @member {boolean} isInterface\n     * @memberof ReferencedFieldsForType\n     * @instance\n     */\n    ReferencedFieldsForType.prototype.isInterface = false;\n\n    /**\n     * Creates a new ReferencedFieldsForType instance using the specified properties.\n     * @function create\n     * @memberof ReferencedFieldsForType\n     * @static\n     * @param {IReferencedFieldsForType=} [properties] Properties to set\n     * @returns {ReferencedFieldsForType} ReferencedFieldsForType instance\n     */\n    ReferencedFieldsForType.create = function create(properties) {\n        return new ReferencedFieldsForType(properties);\n    };\n\n    /**\n     * Encodes the specified ReferencedFieldsForType message. Does not implicitly {@link ReferencedFieldsForType.verify|verify} messages.\n     * @function encode\n     * @memberof ReferencedFieldsForType\n     * @static\n     * @param {IReferencedFieldsForType} message ReferencedFieldsForType message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ReferencedFieldsForType.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.fieldNames != null && message.fieldNames.length)\n            for (var i = 0; i < message.fieldNames.length; ++i)\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.fieldNames[i]);\n        if (message.isInterface != null && Object.hasOwnProperty.call(message, \"isInterface\"))\n            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isInterface);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ReferencedFieldsForType message, length delimited. Does not implicitly {@link ReferencedFieldsForType.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ReferencedFieldsForType\n     * @static\n     * @param {IReferencedFieldsForType} message ReferencedFieldsForType message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ReferencedFieldsForType.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ReferencedFieldsForType message from the specified reader or buffer.\n     * @function decode\n     * @memberof ReferencedFieldsForType\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ReferencedFieldsForType} ReferencedFieldsForType\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ReferencedFieldsForType.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ReferencedFieldsForType();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                if (!(message.fieldNames && message.fieldNames.length))\n                    message.fieldNames = [];\n                message.fieldNames.push(reader.string());\n                break;\n            case 2:\n                message.isInterface = reader.bool();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ReferencedFieldsForType message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ReferencedFieldsForType\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ReferencedFieldsForType} ReferencedFieldsForType\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ReferencedFieldsForType.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ReferencedFieldsForType message.\n     * @function verify\n     * @memberof ReferencedFieldsForType\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ReferencedFieldsForType.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.fieldNames != null && message.hasOwnProperty(\"fieldNames\")) {\n            if (!Array.isArray(message.fieldNames))\n                return \"fieldNames: array expected\";\n            for (var i = 0; i < message.fieldNames.length; ++i)\n                if (!$util.isString(message.fieldNames[i]))\n                    return \"fieldNames: string[] expected\";\n        }\n        if (message.isInterface != null && message.hasOwnProperty(\"isInterface\"))\n            if (typeof message.isInterface !== \"boolean\")\n                return \"isInterface: boolean expected\";\n        return null;\n    };\n\n    /**\n     * Creates a plain object from a ReferencedFieldsForType message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ReferencedFieldsForType\n     * @static\n     * @param {ReferencedFieldsForType} message ReferencedFieldsForType\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ReferencedFieldsForType.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults)\n            object.fieldNames = [];\n        if (options.defaults)\n            object.isInterface = false;\n        if (message.fieldNames && message.fieldNames.length) {\n            object.fieldNames = [];\n            for (var j = 0; j < message.fieldNames.length; ++j)\n                object.fieldNames[j] = message.fieldNames[j];\n        }\n        if (message.isInterface != null && message.hasOwnProperty(\"isInterface\"))\n            object.isInterface = message.isInterface;\n        return object;\n    };\n\n    /**\n     * Converts this ReferencedFieldsForType to JSON.\n     * @function toJSON\n     * @memberof ReferencedFieldsForType\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ReferencedFieldsForType.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ReferencedFieldsForType;\n})();\n\n$root.Report = (function() {\n\n    /**\n     * Properties of a Report.\n     * @exports IReport\n     * @interface IReport\n     * @property {IReportHeader|null} [header] Report header\n     * @property {Object.<string,ITracesAndStats>|null} [tracesPerQuery] Report tracesPerQuery\n     * @property {google.protobuf.ITimestamp|null} [endTime] Report endTime\n     * @property {number|null} [operationCount] Report operationCount\n     * @property {boolean|null} [tracesPreAggregated] Report tracesPreAggregated\n     */\n\n    /**\n     * Constructs a new Report.\n     * @exports Report\n     * @classdesc Represents a Report.\n     * @implements IReport\n     * @constructor\n     * @param {IReport=} [properties] Properties to set\n     */\n    function Report(properties) {\n        this.tracesPerQuery = {};\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Report header.\n     * @member {IReportHeader|null|undefined} header\n     * @memberof Report\n     * @instance\n     */\n    Report.prototype.header = null;\n\n    /**\n     * Report tracesPerQuery.\n     * @member {Object.<string,ITracesAndStats>} tracesPerQuery\n     * @memberof Report\n     * @instance\n     */\n    Report.prototype.tracesPerQuery = $util.emptyObject;\n\n    /**\n     * Report endTime.\n     * @member {google.protobuf.ITimestamp|null|undefined} endTime\n     * @memberof Report\n     * @instance\n     */\n    Report.prototype.endTime = null;\n\n    /**\n     * Report operationCount.\n     * @member {number} operationCount\n     * @memberof Report\n     * @instance\n     */\n    Report.prototype.operationCount = 0;\n\n    /**\n     * Report tracesPreAggregated.\n     * @member {boolean} tracesPreAggregated\n     * @memberof Report\n     * @instance\n     */\n    Report.prototype.tracesPreAggregated = false;\n\n    /**\n     * Creates a new Report instance using the specified properties.\n     * @function create\n     * @memberof Report\n     * @static\n     * @param {IReport=} [properties] Properties to set\n     * @returns {Report} Report instance\n     */\n    Report.create = function create(properties) {\n        return new Report(properties);\n    };\n\n    /**\n     * Encodes the specified Report message. Does not implicitly {@link Report.verify|verify} messages.\n     * @function encode\n     * @memberof Report\n     * @static\n     * @param {IReport} message Report message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Report.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.header != null && Object.hasOwnProperty.call(message, \"header\"))\n            $root.ReportHeader.encode(message.header, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.endTime != null && Object.hasOwnProperty.call(message, \"endTime\"))\n            $root.google.protobuf.Timestamp.encode(message.endTime, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        if (message.tracesPerQuery != null && Object.hasOwnProperty.call(message, \"tracesPerQuery\"))\n            for (var keys = Object.keys(message.tracesPerQuery), i = 0; i < keys.length; ++i) {\n                writer.uint32(/* id 5, wireType 2 =*/42).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);\n                $root.TracesAndStats.encode(message.tracesPerQuery[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n            }\n        if (message.operationCount != null && Object.hasOwnProperty.call(message, \"operationCount\"))\n            writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.operationCount);\n        if (message.tracesPreAggregated != null && Object.hasOwnProperty.call(message, \"tracesPreAggregated\"))\n            writer.uint32(/* id 7, wireType 0 =*/56).bool(message.tracesPreAggregated);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified Report message, length delimited. Does not implicitly {@link Report.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Report\n     * @static\n     * @param {IReport} message Report message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Report.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a Report message from the specified reader or buffer.\n     * @function decode\n     * @memberof Report\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Report} Report\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Report.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Report(), key;\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.header = $root.ReportHeader.decode(reader, reader.uint32());\n                break;\n            case 5:\n                reader.skip().pos++;\n                if (message.tracesPerQuery === $util.emptyObject)\n                    message.tracesPerQuery = {};\n                key = reader.string();\n                reader.pos++;\n                message.tracesPerQuery[key] = $root.TracesAndStats.decode(reader, reader.uint32());\n                break;\n            case 2:\n                message.endTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());\n                break;\n            case 6:\n                message.operationCount = reader.uint64();\n                break;\n            case 7:\n                message.tracesPreAggregated = reader.bool();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a Report message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Report\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Report} Report\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Report.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a Report message.\n     * @function verify\n     * @memberof Report\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    Report.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.header != null && message.hasOwnProperty(\"header\")) {\n            var error = $root.ReportHeader.verify(message.header);\n            if (error)\n                return \"header.\" + error;\n        }\n        if (message.tracesPerQuery != null && message.hasOwnProperty(\"tracesPerQuery\")) {\n            if (!$util.isObject(message.tracesPerQuery))\n                return \"tracesPerQuery: object expected\";\n            var key = Object.keys(message.tracesPerQuery);\n            for (var i = 0; i < key.length; ++i) {\n                var error = $root.TracesAndStats.verify(message.tracesPerQuery[key[i]]);\n                if (error)\n                    return \"tracesPerQuery.\" + error;\n            }\n        }\n        if (message.endTime != null && message.hasOwnProperty(\"endTime\")) {\n            var error = $root.google.protobuf.Timestamp.verify(message.endTime);\n            if (error)\n                return \"endTime.\" + error;\n        }\n        if (message.operationCount != null && message.hasOwnProperty(\"operationCount\"))\n            if (!$util.isInteger(message.operationCount) && !(message.operationCount && $util.isInteger(message.operationCount.low) && $util.isInteger(message.operationCount.high)))\n                return \"operationCount: integer|Long expected\";\n        if (message.tracesPreAggregated != null && message.hasOwnProperty(\"tracesPreAggregated\"))\n            if (typeof message.tracesPreAggregated !== \"boolean\")\n                return \"tracesPreAggregated: boolean expected\";\n        return null;\n    };\n\n    /**\n     * Creates a plain object from a Report message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Report\n     * @static\n     * @param {Report} message Report\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Report.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.objects || options.defaults)\n            object.tracesPerQuery = {};\n        if (options.defaults) {\n            object.header = null;\n            object.endTime = null;\n            object.operationCount = 0;\n            object.tracesPreAggregated = false;\n        }\n        if (message.header != null && message.hasOwnProperty(\"header\"))\n            object.header = $root.ReportHeader.toObject(message.header, options);\n        if (message.endTime != null && message.hasOwnProperty(\"endTime\"))\n            object.endTime = $root.google.protobuf.Timestamp.toObject(message.endTime, options);\n        var keys2;\n        if (message.tracesPerQuery && (keys2 = Object.keys(message.tracesPerQuery)).length) {\n            object.tracesPerQuery = {};\n            for (var j = 0; j < keys2.length; ++j)\n                object.tracesPerQuery[keys2[j]] = $root.TracesAndStats.toObject(message.tracesPerQuery[keys2[j]], options);\n        }\n        if (message.operationCount != null && message.hasOwnProperty(\"operationCount\"))\n            if (typeof message.operationCount === \"number\")\n                object.operationCount = options.longs === String ? String(message.operationCount) : message.operationCount;\n            else\n                object.operationCount = options.longs === String ? $util.Long.prototype.toString.call(message.operationCount) : options.longs === Number ? new $util.LongBits(message.operationCount.low >>> 0, message.operationCount.high >>> 0).toNumber(true) : message.operationCount;\n        if (message.tracesPreAggregated != null && message.hasOwnProperty(\"tracesPreAggregated\"))\n            object.tracesPreAggregated = message.tracesPreAggregated;\n        return object;\n    };\n\n    /**\n     * Converts this Report to JSON.\n     * @function toJSON\n     * @memberof Report\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Report.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Report;\n})();\n\n$root.ContextualizedStats = (function() {\n\n    /**\n     * Properties of a ContextualizedStats.\n     * @exports IContextualizedStats\n     * @interface IContextualizedStats\n     * @property {IStatsContext|null} [context] ContextualizedStats context\n     * @property {IQueryLatencyStats|null} [queryLatencyStats] ContextualizedStats queryLatencyStats\n     * @property {Object.<string,ITypeStat>|null} [perTypeStat] ContextualizedStats perTypeStat\n     */\n\n    /**\n     * Constructs a new ContextualizedStats.\n     * @exports ContextualizedStats\n     * @classdesc Represents a ContextualizedStats.\n     * @implements IContextualizedStats\n     * @constructor\n     * @param {IContextualizedStats=} [properties] Properties to set\n     */\n    function ContextualizedStats(properties) {\n        this.perTypeStat = {};\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ContextualizedStats context.\n     * @member {IStatsContext|null|undefined} context\n     * @memberof ContextualizedStats\n     * @instance\n     */\n    ContextualizedStats.prototype.context = null;\n\n    /**\n     * ContextualizedStats queryLatencyStats.\n     * @member {IQueryLatencyStats|null|undefined} queryLatencyStats\n     * @memberof ContextualizedStats\n     * @instance\n     */\n    ContextualizedStats.prototype.queryLatencyStats = null;\n\n    /**\n     * ContextualizedStats perTypeStat.\n     * @member {Object.<string,ITypeStat>} perTypeStat\n     * @memberof ContextualizedStats\n     * @instance\n     */\n    ContextualizedStats.prototype.perTypeStat = $util.emptyObject;\n\n    /**\n     * Creates a new ContextualizedStats instance using the specified properties.\n     * @function create\n     * @memberof ContextualizedStats\n     * @static\n     * @param {IContextualizedStats=} [properties] Properties to set\n     * @returns {ContextualizedStats} ContextualizedStats instance\n     */\n    ContextualizedStats.create = function create(properties) {\n        return new ContextualizedStats(properties);\n    };\n\n    /**\n     * Encodes the specified ContextualizedStats message. Does not implicitly {@link ContextualizedStats.verify|verify} messages.\n     * @function encode\n     * @memberof ContextualizedStats\n     * @static\n     * @param {IContextualizedStats} message ContextualizedStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ContextualizedStats.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.context != null && Object.hasOwnProperty.call(message, \"context\"))\n            $root.StatsContext.encode(message.context, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.queryLatencyStats != null && Object.hasOwnProperty.call(message, \"queryLatencyStats\"))\n            $root.QueryLatencyStats.encode(message.queryLatencyStats, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        if (message.perTypeStat != null && Object.hasOwnProperty.call(message, \"perTypeStat\"))\n            for (var keys = Object.keys(message.perTypeStat), i = 0; i < keys.length; ++i) {\n                writer.uint32(/* id 3, wireType 2 =*/26).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);\n                $root.TypeStat.encode(message.perTypeStat[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n            }\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ContextualizedStats message, length delimited. Does not implicitly {@link ContextualizedStats.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ContextualizedStats\n     * @static\n     * @param {IContextualizedStats} message ContextualizedStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ContextualizedStats.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ContextualizedStats message from the specified reader or buffer.\n     * @function decode\n     * @memberof ContextualizedStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ContextualizedStats} ContextualizedStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ContextualizedStats.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ContextualizedStats(), key;\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.context = $root.StatsContext.decode(reader, reader.uint32());\n                break;\n            case 2:\n                message.queryLatencyStats = $root.QueryLatencyStats.decode(reader, reader.uint32());\n                break;\n            case 3:\n                reader.skip().pos++;\n                if (message.perTypeStat === $util.emptyObject)\n                    message.perTypeStat = {};\n                key = reader.string();\n                reader.pos++;\n                message.perTypeStat[key] = $root.TypeStat.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ContextualizedStats message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ContextualizedStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ContextualizedStats} ContextualizedStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ContextualizedStats.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ContextualizedStats message.\n     * @function verify\n     * @memberof ContextualizedStats\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ContextualizedStats.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.context != null && message.hasOwnProperty(\"context\")) {\n            var error = $root.StatsContext.verify(message.context);\n            if (error)\n                return \"context.\" + error;\n        }\n        if (message.queryLatencyStats != null && message.hasOwnProperty(\"queryLatencyStats\")) {\n            var error = $root.QueryLatencyStats.verify(message.queryLatencyStats);\n            if (error)\n                return \"queryLatencyStats.\" + error;\n        }\n        if (message.perTypeStat != null && message.hasOwnProperty(\"perTypeStat\")) {\n            if (!$util.isObject(message.perTypeStat))\n                return \"perTypeStat: object expected\";\n            var key = Object.keys(message.perTypeStat);\n            for (var i = 0; i < key.length; ++i) {\n                var error = $root.TypeStat.verify(message.perTypeStat[key[i]]);\n                if (error)\n                    return \"perTypeStat.\" + error;\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Creates a plain object from a ContextualizedStats message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ContextualizedStats\n     * @static\n     * @param {ContextualizedStats} message ContextualizedStats\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ContextualizedStats.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.objects || options.defaults)\n            object.perTypeStat = {};\n        if (options.defaults) {\n            object.context = null;\n            object.queryLatencyStats = null;\n        }\n        if (message.context != null && message.hasOwnProperty(\"context\"))\n            object.context = $root.StatsContext.toObject(message.context, options);\n        if (message.queryLatencyStats != null && message.hasOwnProperty(\"queryLatencyStats\"))\n            object.queryLatencyStats = $root.QueryLatencyStats.toObject(message.queryLatencyStats, options);\n        var keys2;\n        if (message.perTypeStat && (keys2 = Object.keys(message.perTypeStat)).length) {\n            object.perTypeStat = {};\n            for (var j = 0; j < keys2.length; ++j)\n                object.perTypeStat[keys2[j]] = $root.TypeStat.toObject(message.perTypeStat[keys2[j]], options);\n        }\n        return object;\n    };\n\n    /**\n     * Converts this ContextualizedStats to JSON.\n     * @function toJSON\n     * @memberof ContextualizedStats\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ContextualizedStats.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ContextualizedStats;\n})();\n\n$root.TracesAndStats = (function() {\n\n    /**\n     * Properties of a TracesAndStats.\n     * @exports ITracesAndStats\n     * @interface ITracesAndStats\n     * @property {Array.<ITrace|Uint8Array>|null} [trace] TracesAndStats trace\n     * @property {$protobuf.ToArray.<IContextualizedStats>|Array.<IContextualizedStats>|null} [statsWithContext] TracesAndStats statsWithContext\n     * @property {Object.<string,IReferencedFieldsForType>|null} [referencedFieldsByType] TracesAndStats referencedFieldsByType\n     * @property {Array.<ITrace|Uint8Array>|null} [internalTracesContributingToStats] TracesAndStats internalTracesContributingToStats\n     */\n\n    /**\n     * Constructs a new TracesAndStats.\n     * @exports TracesAndStats\n     * @classdesc Represents a TracesAndStats.\n     * @implements ITracesAndStats\n     * @constructor\n     * @param {ITracesAndStats=} [properties] Properties to set\n     */\n    function TracesAndStats(properties) {\n        this.trace = [];\n        this.statsWithContext = [];\n        this.referencedFieldsByType = {};\n        this.internalTracesContributingToStats = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * TracesAndStats trace.\n     * @member {Array.<ITrace|Uint8Array>} trace\n     * @memberof TracesAndStats\n     * @instance\n     */\n    TracesAndStats.prototype.trace = $util.emptyArray;\n\n    /**\n     * TracesAndStats statsWithContext.\n     * @member {Array.<IContextualizedStats>} statsWithContext\n     * @memberof TracesAndStats\n     * @instance\n     */\n    TracesAndStats.prototype.statsWithContext = $util.emptyArray;\n\n    /**\n     * TracesAndStats referencedFieldsByType.\n     * @member {Object.<string,IReferencedFieldsForType>} referencedFieldsByType\n     * @memberof TracesAndStats\n     * @instance\n     */\n    TracesAndStats.prototype.referencedFieldsByType = $util.emptyObject;\n\n    /**\n     * TracesAndStats internalTracesContributingToStats.\n     * @member {Array.<ITrace|Uint8Array>} internalTracesContributingToStats\n     * @memberof TracesAndStats\n     * @instance\n     */\n    TracesAndStats.prototype.internalTracesContributingToStats = $util.emptyArray;\n\n    /**\n     * Creates a new TracesAndStats instance using the specified properties.\n     * @function create\n     * @memberof TracesAndStats\n     * @static\n     * @param {ITracesAndStats=} [properties] Properties to set\n     * @returns {TracesAndStats} TracesAndStats instance\n     */\n    TracesAndStats.create = function create(properties) {\n        return new TracesAndStats(properties);\n    };\n\n    /**\n     * Encodes the specified TracesAndStats message. Does not implicitly {@link TracesAndStats.verify|verify} messages.\n     * @function encode\n     * @memberof TracesAndStats\n     * @static\n     * @param {ITracesAndStats} message TracesAndStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    TracesAndStats.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.trace != null && message.trace.length)\n            for (var i = 0; i < message.trace.length; ++i)\n                if (message.trace[i] instanceof Uint8Array) {\n                    writer.uint32(/* id 1, wireType 2 =*/10);\n                    writer.bytes(message.trace[i]);\n                } else\n                    $root.Trace.encode(message.trace[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        var array2;\n        if (message.statsWithContext != null && message.statsWithContext.toArray)\n            array2 = message.statsWithContext.toArray();\n        else\n            array2 = message.statsWithContext;\n        if (array2 != null && array2.length)\n            for (var i = 0; i < array2.length; ++i)\n                $root.ContextualizedStats.encode(array2[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        if (message.internalTracesContributingToStats != null && message.internalTracesContributingToStats.length)\n            for (var i = 0; i < message.internalTracesContributingToStats.length; ++i)\n                if (message.internalTracesContributingToStats[i] instanceof Uint8Array) {\n                    writer.uint32(/* id 3, wireType 2 =*/26);\n                    writer.bytes(message.internalTracesContributingToStats[i]);\n                } else\n                    $root.Trace.encode(message.internalTracesContributingToStats[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n        if (message.referencedFieldsByType != null && Object.hasOwnProperty.call(message, \"referencedFieldsByType\"))\n            for (var keys = Object.keys(message.referencedFieldsByType), i = 0; i < keys.length; ++i) {\n                writer.uint32(/* id 4, wireType 2 =*/34).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);\n                $root.ReferencedFieldsForType.encode(message.referencedFieldsByType[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n            }\n        return writer;\n    };\n\n    /**\n     * Encodes the specified TracesAndStats message, length delimited. Does not implicitly {@link TracesAndStats.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof TracesAndStats\n     * @static\n     * @param {ITracesAndStats} message TracesAndStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    TracesAndStats.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a TracesAndStats message from the specified reader or buffer.\n     * @function decode\n     * @memberof TracesAndStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {TracesAndStats} TracesAndStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    TracesAndStats.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.TracesAndStats(), key;\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                if (!(message.trace && message.trace.length))\n                    message.trace = [];\n                message.trace.push($root.Trace.decode(reader, reader.uint32()));\n                break;\n            case 2:\n                if (!(message.statsWithContext && message.statsWithContext.length))\n                    message.statsWithContext = [];\n                message.statsWithContext.push($root.ContextualizedStats.decode(reader, reader.uint32()));\n                break;\n            case 4:\n                reader.skip().pos++;\n                if (message.referencedFieldsByType === $util.emptyObject)\n                    message.referencedFieldsByType = {};\n                key = reader.string();\n                reader.pos++;\n                message.referencedFieldsByType[key] = $root.ReferencedFieldsForType.decode(reader, reader.uint32());\n                break;\n            case 3:\n                if (!(message.internalTracesContributingToStats && message.internalTracesContributingToStats.length))\n                    message.internalTracesContributingToStats = [];\n                message.internalTracesContributingToStats.push($root.Trace.decode(reader, reader.uint32()));\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a TracesAndStats message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof TracesAndStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {TracesAndStats} TracesAndStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    TracesAndStats.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a TracesAndStats message.\n     * @function verify\n     * @memberof TracesAndStats\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    TracesAndStats.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.trace != null && message.hasOwnProperty(\"trace\")) {\n            if (!Array.isArray(message.trace))\n                return \"trace: array expected\";\n            for (var i = 0; i < message.trace.length; ++i)\n                if (!(message.trace[i] instanceof Uint8Array)) {\n                    var error = $root.Trace.verify(message.trace[i]);\n                    if (error)\n                        return \"trace.\" + error;\n                }\n        }\n        if (message.statsWithContext != null && message.hasOwnProperty(\"statsWithContext\")) {\n            var array2;\n            if (message.statsWithContext != null && message.statsWithContext.toArray)\n                array2 = message.statsWithContext.toArray();\n            else\n                array2 = message.statsWithContext;\n            if (!Array.isArray(array2))\n                return \"statsWithContext: array expected\";\n            for (var i = 0; i < array2.length; ++i) {\n                var error = $root.ContextualizedStats.verify(array2[i]);\n                if (error)\n                    return \"statsWithContext.\" + error;\n            }\n        }\n        if (message.referencedFieldsByType != null && message.hasOwnProperty(\"referencedFieldsByType\")) {\n            if (!$util.isObject(message.referencedFieldsByType))\n                return \"referencedFieldsByType: object expected\";\n            var key = Object.keys(message.referencedFieldsByType);\n            for (var i = 0; i < key.length; ++i) {\n                var error = $root.ReferencedFieldsForType.verify(message.referencedFieldsByType[key[i]]);\n                if (error)\n                    return \"referencedFieldsByType.\" + error;\n            }\n        }\n        if (message.internalTracesContributingToStats != null && message.hasOwnProperty(\"internalTracesContributingToStats\")) {\n            if (!Array.isArray(message.internalTracesContributingToStats))\n                return \"internalTracesContributingToStats: array expected\";\n            for (var i = 0; i < message.internalTracesContributingToStats.length; ++i)\n                if (!(message.internalTracesContributingToStats[i] instanceof Uint8Array)) {\n                    var error = $root.Trace.verify(message.internalTracesContributingToStats[i]);\n                    if (error)\n                        return \"internalTracesContributingToStats.\" + error;\n                }\n        }\n        return null;\n    };\n\n    /**\n     * Creates a plain object from a TracesAndStats message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof TracesAndStats\n     * @static\n     * @param {TracesAndStats} message TracesAndStats\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    TracesAndStats.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults) {\n            object.trace = [];\n            object.statsWithContext = [];\n            object.internalTracesContributingToStats = [];\n        }\n        if (options.objects || options.defaults)\n            object.referencedFieldsByType = {};\n        if (message.trace && message.trace.length) {\n            object.trace = [];\n            for (var j = 0; j < message.trace.length; ++j)\n                object.trace[j] = $root.Trace.toObject(message.trace[j], options);\n        }\n        if (message.statsWithContext && message.statsWithContext.length) {\n            object.statsWithContext = [];\n            for (var j = 0; j < message.statsWithContext.length; ++j)\n                object.statsWithContext[j] = $root.ContextualizedStats.toObject(message.statsWithContext[j], options);\n        }\n        if (message.internalTracesContributingToStats && message.internalTracesContributingToStats.length) {\n            object.internalTracesContributingToStats = [];\n            for (var j = 0; j < message.internalTracesContributingToStats.length; ++j)\n                object.internalTracesContributingToStats[j] = $root.Trace.toObject(message.internalTracesContributingToStats[j], options);\n        }\n        var keys2;\n        if (message.referencedFieldsByType && (keys2 = Object.keys(message.referencedFieldsByType)).length) {\n            object.referencedFieldsByType = {};\n            for (var j = 0; j < keys2.length; ++j)\n                object.referencedFieldsByType[keys2[j]] = $root.ReferencedFieldsForType.toObject(message.referencedFieldsByType[keys2[j]], options);\n        }\n        return object;\n    };\n\n    /**\n     * Converts this TracesAndStats to JSON.\n     * @function toJSON\n     * @memberof TracesAndStats\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    TracesAndStats.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return TracesAndStats;\n})();\n\n$root.google = (function() {\n\n    /**\n     * Namespace google.\n     * @exports google\n     * @namespace\n     */\n    var google = {};\n\n    google.protobuf = (function() {\n\n        /**\n         * Namespace protobuf.\n         * @memberof google\n         * @namespace\n         */\n        var protobuf = {};\n\n        protobuf.Timestamp = (function() {\n\n            /**\n             * Properties of a Timestamp.\n             * @memberof google.protobuf\n             * @interface ITimestamp\n             * @property {number|null} [seconds] Timestamp seconds\n             * @property {number|null} [nanos] Timestamp nanos\n             */\n\n            /**\n             * Constructs a new Timestamp.\n             * @memberof google.protobuf\n             * @classdesc Represents a Timestamp.\n             * @implements ITimestamp\n             * @constructor\n             * @param {google.protobuf.ITimestamp=} [properties] Properties to set\n             */\n            function Timestamp(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Timestamp seconds.\n             * @member {number} seconds\n             * @memberof google.protobuf.Timestamp\n             * @instance\n             */\n            Timestamp.prototype.seconds = 0;\n\n            /**\n             * Timestamp nanos.\n             * @member {number} nanos\n             * @memberof google.protobuf.Timestamp\n             * @instance\n             */\n            Timestamp.prototype.nanos = 0;\n\n            /**\n             * Creates a new Timestamp instance using the specified properties.\n             * @function create\n             * @memberof google.protobuf.Timestamp\n             * @static\n             * @param {google.protobuf.ITimestamp=} [properties] Properties to set\n             * @returns {google.protobuf.Timestamp} Timestamp instance\n             */\n            Timestamp.create = function create(properties) {\n                return new Timestamp(properties);\n            };\n\n            /**\n             * Encodes the specified Timestamp message. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.\n             * @function encode\n             * @memberof google.protobuf.Timestamp\n             * @static\n             * @param {google.protobuf.ITimestamp} message Timestamp message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Timestamp.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.seconds != null && Object.hasOwnProperty.call(message, \"seconds\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.seconds);\n                if (message.nanos != null && Object.hasOwnProperty.call(message, \"nanos\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nanos);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Timestamp message, length delimited. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof google.protobuf.Timestamp\n             * @static\n             * @param {google.protobuf.ITimestamp} message Timestamp message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Timestamp.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Timestamp message from the specified reader or buffer.\n             * @function decode\n             * @memberof google.protobuf.Timestamp\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {google.protobuf.Timestamp} Timestamp\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Timestamp.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Timestamp();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.seconds = reader.int64();\n                        break;\n                    case 2:\n                        message.nanos = reader.int32();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Timestamp message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof google.protobuf.Timestamp\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {google.protobuf.Timestamp} Timestamp\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Timestamp.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Timestamp message.\n             * @function verify\n             * @memberof google.protobuf.Timestamp\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Timestamp.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.seconds != null && message.hasOwnProperty(\"seconds\"))\n                    if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high)))\n                        return \"seconds: integer|Long expected\";\n                if (message.nanos != null && message.hasOwnProperty(\"nanos\"))\n                    if (!$util.isInteger(message.nanos))\n                        return \"nanos: integer expected\";\n                return null;\n            };\n\n            /**\n             * Creates a plain object from a Timestamp message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof google.protobuf.Timestamp\n             * @static\n             * @param {google.protobuf.Timestamp} message Timestamp\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Timestamp.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.seconds = 0;\n                    object.nanos = 0;\n                }\n                if (message.seconds != null && message.hasOwnProperty(\"seconds\"))\n                    if (typeof message.seconds === \"number\")\n                        object.seconds = options.longs === String ? String(message.seconds) : message.seconds;\n                    else\n                        object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;\n                if (message.nanos != null && message.hasOwnProperty(\"nanos\"))\n                    object.nanos = message.nanos;\n                return object;\n            };\n\n            /**\n             * Converts this Timestamp to JSON.\n             * @function toJSON\n             * @memberof google.protobuf.Timestamp\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Timestamp.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Timestamp;\n        })();\n\n        return protobuf;\n    })();\n\n    return google;\n})();\n\nmodule.exports = $root;\n","export function iterateOverTrace(trace, f, includePath) {\n    const rootPath = includePath\n        ? new RootCollectingPathsResponseNamePath()\n        : notCollectingPathsResponseNamePath;\n    if (trace.root) {\n        if (iterateOverTraceNode(trace.root, rootPath, f))\n            return;\n    }\n    if (trace.queryPlan) {\n        if (iterateOverQueryPlan(trace.queryPlan, rootPath, f))\n            return;\n    }\n}\nfunction iterateOverQueryPlan(node, rootPath, f) {\n    if (!node)\n        return false;\n    if (node.fetch?.trace?.root && node.fetch.serviceName) {\n        return iterateOverTraceNode(node.fetch.trace.root, rootPath.child(`service:${node.fetch.serviceName}`), f);\n    }\n    if (node.flatten?.node) {\n        return iterateOverQueryPlan(node.flatten.node, rootPath, f);\n    }\n    if (node.parallel?.nodes) {\n        return node.parallel.nodes.some((node) => iterateOverQueryPlan(node, rootPath, f));\n    }\n    if (node.sequence?.nodes) {\n        return node.sequence.nodes.some((node) => iterateOverQueryPlan(node, rootPath, f));\n    }\n    return false;\n}\nfunction iterateOverTraceNode(node, path, f) {\n    if (f(node, path)) {\n        return true;\n    }\n    return (node.child?.some((child) => {\n        const childPath = child.responseName\n            ? path.child(child.responseName)\n            : path;\n        return iterateOverTraceNode(child, childPath, f);\n    }) ?? false);\n}\nconst notCollectingPathsResponseNamePath = {\n    toArray() {\n        throw Error('not collecting paths!');\n    },\n    child() {\n        return this;\n    },\n};\nclass RootCollectingPathsResponseNamePath {\n    toArray() {\n        return [];\n    }\n    child(responseName) {\n        return new ChildCollectingPathsResponseNamePath(responseName, this);\n    }\n}\nclass ChildCollectingPathsResponseNamePath {\n    constructor(responseName, prev) {\n        this.responseName = responseName;\n        this.prev = prev;\n    }\n    toArray() {\n        const out = [];\n        let curr = this;\n        while (curr instanceof ChildCollectingPathsResponseNamePath) {\n            out.push(curr.responseName);\n            curr = curr.prev;\n        }\n        return out.reverse();\n    }\n    child(responseName) {\n        return new ChildCollectingPathsResponseNamePath(responseName, this);\n    }\n}\n//# sourceMappingURL=iterateOverTrace.js.map","export class DurationHistogram {\n    toArray() {\n        let bufferedZeroes = 0;\n        const outputArray = [];\n        for (const value of this.buckets) {\n            if (value === 0) {\n                bufferedZeroes++;\n            }\n            else {\n                if (bufferedZeroes === 1) {\n                    outputArray.push(0);\n                }\n                else if (bufferedZeroes !== 0) {\n                    outputArray.push(-bufferedZeroes);\n                }\n                outputArray.push(Math.floor(value));\n                bufferedZeroes = 0;\n            }\n        }\n        return outputArray;\n    }\n    static durationToBucket(durationNs) {\n        const log = Math.log(durationNs / 1000.0);\n        const unboundedBucket = Math.ceil(log / DurationHistogram.EXPONENT_LOG);\n        return unboundedBucket <= 0 || Number.isNaN(unboundedBucket)\n            ? 0\n            : unboundedBucket >= DurationHistogram.BUCKET_COUNT\n                ? DurationHistogram.BUCKET_COUNT - 1\n                : unboundedBucket;\n    }\n    incrementDuration(durationNs, value = 1) {\n        this.incrementBucket(DurationHistogram.durationToBucket(durationNs), value);\n        return this;\n    }\n    incrementBucket(bucket, value = 1) {\n        if (bucket >= DurationHistogram.BUCKET_COUNT) {\n            throw Error('Bucket is out of bounds of the buckets array');\n        }\n        if (bucket >= this.buckets.length) {\n            const oldLength = this.buckets.length;\n            this.buckets.length = bucket + 1;\n            this.buckets.fill(0, oldLength);\n        }\n        this.buckets[bucket] += value;\n    }\n    combine(otherHistogram) {\n        for (let i = 0; i < otherHistogram.buckets.length; i++) {\n            this.incrementBucket(i, otherHistogram.buckets[i]);\n        }\n    }\n    constructor(options) {\n        const initSize = options?.initSize || 74;\n        const buckets = options?.buckets;\n        const arrayInitSize = Math.max(buckets?.length || 0, initSize);\n        this.buckets = Array(arrayInitSize).fill(0);\n        if (buckets) {\n            buckets.forEach((val, index) => (this.buckets[index] = val));\n        }\n    }\n}\nDurationHistogram.BUCKET_COUNT = 384;\nDurationHistogram.EXPONENT_LOG = Math.log(1.1);\n//# sourceMappingURL=durationHistogram.js.map","import { Trace, } from '@apollo/usage-reporting-protobuf';\nimport { DurationHistogram } from './durationHistogram.js';\nimport { iterateOverTrace } from './iterateOverTrace.js';\nexport class SizeEstimator {\n    constructor() {\n        this.bytes = 0;\n    }\n}\nexport class OurReport {\n    constructor(header) {\n        this.header = header;\n        this.tracesPreAggregated = false;\n        this.tracesPerQuery = Object.create(null);\n        this.endTime = null;\n        this.operationCount = 0;\n        this.sizeEstimator = new SizeEstimator();\n    }\n    ensureCountsAreIntegers() {\n        for (const tracesAndStats of Object.values(this.tracesPerQuery)) {\n            tracesAndStats.ensureCountsAreIntegers();\n        }\n    }\n    addTrace({ statsReportKey, trace, asTrace, referencedFieldsByType, maxTraceBytes = 10 * 1024 * 1024, nonFtv1ErrorPaths, }) {\n        const tracesAndStats = this.getTracesAndStats({\n            statsReportKey,\n            referencedFieldsByType,\n        });\n        if (asTrace) {\n            const encodedTrace = Trace.encode(trace).finish();\n            if (!isNaN(maxTraceBytes) && encodedTrace.length > maxTraceBytes) {\n                tracesAndStats.statsWithContext.addTrace(trace, this.sizeEstimator, nonFtv1ErrorPaths);\n            }\n            else {\n                tracesAndStats.trace.push(encodedTrace);\n                this.sizeEstimator.bytes += 2 + encodedTrace.length;\n            }\n        }\n        else {\n            tracesAndStats.statsWithContext.addTrace(trace, this.sizeEstimator, nonFtv1ErrorPaths);\n        }\n    }\n    getTracesAndStats({ statsReportKey, referencedFieldsByType, }) {\n        const existing = this.tracesPerQuery[statsReportKey];\n        if (existing) {\n            return existing;\n        }\n        this.sizeEstimator.bytes += estimatedBytesForString(statsReportKey);\n        for (const [typeName, referencedFieldsForType] of Object.entries(referencedFieldsByType)) {\n            this.sizeEstimator.bytes += 2 + 2;\n            if (referencedFieldsForType.isInterface) {\n                this.sizeEstimator.bytes += 2;\n            }\n            this.sizeEstimator.bytes += estimatedBytesForString(typeName);\n            for (const fieldName of referencedFieldsForType.fieldNames) {\n                this.sizeEstimator.bytes += estimatedBytesForString(fieldName);\n            }\n        }\n        return (this.tracesPerQuery[statsReportKey] = new OurTracesAndStats(referencedFieldsByType));\n    }\n}\nclass OurTracesAndStats {\n    constructor(referencedFieldsByType) {\n        this.referencedFieldsByType = referencedFieldsByType;\n        this.trace = [];\n        this.statsWithContext = new StatsByContext();\n        this.internalTracesContributingToStats = [];\n    }\n    ensureCountsAreIntegers() {\n        this.statsWithContext.ensureCountsAreIntegers();\n    }\n}\nclass StatsByContext {\n    constructor() {\n        this.map = Object.create(null);\n    }\n    toArray() {\n        return Object.values(this.map);\n    }\n    ensureCountsAreIntegers() {\n        for (const contextualizedStats of Object.values(this.map)) {\n            contextualizedStats.ensureCountsAreIntegers();\n        }\n    }\n    addTrace(trace, sizeEstimator, nonFtv1ErrorPaths) {\n        this.getContextualizedStats(trace, sizeEstimator).addTrace(trace, sizeEstimator, nonFtv1ErrorPaths);\n    }\n    getContextualizedStats(trace, sizeEstimator) {\n        const statsContext = {\n            clientName: trace.clientName,\n            clientVersion: trace.clientVersion,\n        };\n        const statsContextKey = JSON.stringify(statsContext);\n        const existing = this.map[statsContextKey];\n        if (existing) {\n            return existing;\n        }\n        sizeEstimator.bytes +=\n            20 +\n                estimatedBytesForString(trace.clientName) +\n                estimatedBytesForString(trace.clientVersion);\n        const contextualizedStats = new OurContextualizedStats(statsContext);\n        this.map[statsContextKey] = contextualizedStats;\n        return contextualizedStats;\n    }\n}\nexport class OurContextualizedStats {\n    constructor(context) {\n        this.context = context;\n        this.queryLatencyStats = new OurQueryLatencyStats();\n        this.perTypeStat = Object.create(null);\n    }\n    ensureCountsAreIntegers() {\n        for (const typeStat of Object.values(this.perTypeStat)) {\n            typeStat.ensureCountsAreIntegers();\n        }\n    }\n    addTrace(trace, sizeEstimator, nonFtv1ErrorPaths = []) {\n        const { fieldExecutionWeight } = trace;\n        if (!fieldExecutionWeight) {\n            this.queryLatencyStats.requestsWithoutFieldInstrumentation++;\n        }\n        this.queryLatencyStats.requestCount++;\n        if (trace.fullQueryCacheHit) {\n            this.queryLatencyStats.cacheLatencyCount.incrementDuration(trace.durationNs);\n            this.queryLatencyStats.cacheHits++;\n        }\n        else {\n            this.queryLatencyStats.latencyCount.incrementDuration(trace.durationNs);\n        }\n        if (!trace.fullQueryCacheHit && trace.cachePolicy?.maxAgeNs != null) {\n            switch (trace.cachePolicy.scope) {\n                case Trace.CachePolicy.Scope.PRIVATE:\n                    this.queryLatencyStats.privateCacheTtlCount.incrementDuration(trace.cachePolicy.maxAgeNs);\n                    break;\n                case Trace.CachePolicy.Scope.PUBLIC:\n                    this.queryLatencyStats.publicCacheTtlCount.incrementDuration(trace.cachePolicy.maxAgeNs);\n                    break;\n            }\n        }\n        if (trace.persistedQueryHit) {\n            this.queryLatencyStats.persistedQueryHits++;\n        }\n        if (trace.persistedQueryRegister) {\n            this.queryLatencyStats.persistedQueryMisses++;\n        }\n        if (trace.forbiddenOperation) {\n            this.queryLatencyStats.forbiddenOperationCount++;\n        }\n        if (trace.registeredOperation) {\n            this.queryLatencyStats.registeredOperationCount++;\n        }\n        let hasError = false;\n        const errorPathStats = new Set();\n        const traceNodeStats = (node, path) => {\n            if (node.error?.length) {\n                hasError = true;\n                let currPathErrorStats = this.queryLatencyStats.rootErrorStats;\n                path.toArray().forEach((subPath) => {\n                    currPathErrorStats = currPathErrorStats.getChild(subPath, sizeEstimator);\n                });\n                errorPathStats.add(currPathErrorStats);\n                currPathErrorStats.errorsCount += node.error.length;\n            }\n            if (fieldExecutionWeight) {\n                const fieldName = node.originalFieldName || node.responseName;\n                if (node.parentType &&\n                    fieldName &&\n                    node.type &&\n                    node.endTime != null &&\n                    node.startTime != null &&\n                    node.endTime >= node.startTime) {\n                    const typeStat = this.getTypeStat(node.parentType, sizeEstimator);\n                    const fieldStat = typeStat.getFieldStat(fieldName, node.type, sizeEstimator);\n                    fieldStat.errorsCount += node.error?.length ?? 0;\n                    fieldStat.observedExecutionCount++;\n                    fieldStat.estimatedExecutionCount += fieldExecutionWeight;\n                    fieldStat.requestsWithErrorsCount +=\n                        (node.error?.length ?? 0) > 0 ? 1 : 0;\n                    fieldStat.latencyCount.incrementDuration(node.endTime - node.startTime, fieldExecutionWeight);\n                }\n            }\n            return false;\n        };\n        iterateOverTrace(trace, traceNodeStats, true);\n        for (const { subgraph, path } of nonFtv1ErrorPaths) {\n            hasError = true;\n            if (path) {\n                let currPathErrorStats = this.queryLatencyStats.rootErrorStats.getChild(`service:${subgraph}`, sizeEstimator);\n                path.forEach((subPath) => {\n                    if (typeof subPath === 'string') {\n                        currPathErrorStats = currPathErrorStats.getChild(subPath, sizeEstimator);\n                    }\n                });\n                errorPathStats.add(currPathErrorStats);\n                currPathErrorStats.errorsCount += 1;\n            }\n        }\n        for (const errorPath of errorPathStats) {\n            errorPath.requestsWithErrorsCount += 1;\n        }\n        if (hasError) {\n            this.queryLatencyStats.requestsWithErrorsCount++;\n        }\n    }\n    getTypeStat(parentType, sizeEstimator) {\n        const existing = this.perTypeStat[parentType];\n        if (existing) {\n            return existing;\n        }\n        sizeEstimator.bytes += estimatedBytesForString(parentType);\n        const typeStat = new OurTypeStat();\n        this.perTypeStat[parentType] = typeStat;\n        return typeStat;\n    }\n}\nclass OurQueryLatencyStats {\n    constructor() {\n        this.latencyCount = new DurationHistogram();\n        this.requestCount = 0;\n        this.requestsWithoutFieldInstrumentation = 0;\n        this.cacheHits = 0;\n        this.persistedQueryHits = 0;\n        this.persistedQueryMisses = 0;\n        this.cacheLatencyCount = new DurationHistogram();\n        this.rootErrorStats = new OurPathErrorStats();\n        this.requestsWithErrorsCount = 0;\n        this.publicCacheTtlCount = new DurationHistogram();\n        this.privateCacheTtlCount = new DurationHistogram();\n        this.registeredOperationCount = 0;\n        this.forbiddenOperationCount = 0;\n    }\n}\nclass OurPathErrorStats {\n    constructor() {\n        this.children = Object.create(null);\n        this.errorsCount = 0;\n        this.requestsWithErrorsCount = 0;\n    }\n    getChild(subPath, sizeEstimator) {\n        const existing = this.children[subPath];\n        if (existing) {\n            return existing;\n        }\n        const child = new OurPathErrorStats();\n        this.children[subPath] = child;\n        sizeEstimator.bytes += estimatedBytesForString(subPath) + 4;\n        return child;\n    }\n}\nclass OurTypeStat {\n    constructor() {\n        this.perFieldStat = Object.create(null);\n    }\n    getFieldStat(fieldName, returnType, sizeEstimator) {\n        const existing = this.perFieldStat[fieldName];\n        if (existing) {\n            return existing;\n        }\n        sizeEstimator.bytes +=\n            estimatedBytesForString(fieldName) +\n                estimatedBytesForString(returnType) +\n                10;\n        const fieldStat = new OurFieldStat(returnType);\n        this.perFieldStat[fieldName] = fieldStat;\n        return fieldStat;\n    }\n    ensureCountsAreIntegers() {\n        for (const fieldStat of Object.values(this.perFieldStat)) {\n            fieldStat.ensureCountsAreIntegers();\n        }\n    }\n}\nclass OurFieldStat {\n    constructor(returnType) {\n        this.returnType = returnType;\n        this.errorsCount = 0;\n        this.observedExecutionCount = 0;\n        this.estimatedExecutionCount = 0;\n        this.requestsWithErrorsCount = 0;\n        this.latencyCount = new DurationHistogram();\n    }\n    ensureCountsAreIntegers() {\n        this.estimatedExecutionCount = Math.floor(this.estimatedExecutionCount);\n    }\n}\nfunction estimatedBytesForString(s) {\n    return 2 + Buffer.byteLength(s);\n}\n//# sourceMappingURL=stats.js.map","import { Report, ReportHeader, Trace } from '@apollo/usage-reporting-protobuf';\nimport { usageReportingSignature, calculateReferencedFieldsByType, } from '@apollo/utils.usagereporting';\nimport retry from 'async-retry';\nimport { printSchema } from 'graphql';\nimport { AbortController } from 'node-abort-controller';\nimport fetch from 'node-fetch';\nimport os from 'os';\nimport { gzip } from 'zlib';\nimport { internalPlugin } from '../../internalPlugin.js';\nimport { dateToProtoTimestamp, TraceTreeBuilder } from '../traceTreeBuilder.js';\nimport { defaultSendOperationsAsTrace } from './defaultSendOperationsAsTrace.js';\nimport { createOperationDerivedDataCache, operationDerivedDataCacheKey, } from './operationDerivedDataCache.js';\nimport { OurReport } from './stats.js';\nimport { makeTraceDetails } from './traceDetails.js';\nimport { packageVersion } from '../../generated/packageVersion.js';\nimport { computeCoreSchemaHash } from '../../utils/computeCoreSchemaHash.js';\nimport { schemaIsSubgraph } from '../schemaIsSubgraph.js';\nconst reportHeaderDefaults = {\n    hostname: os.hostname(),\n    agentVersion: `@apollo/server@${packageVersion}`,\n    runtimeVersion: `node ${process.version}`,\n    uname: `${os.platform()}, ${os.type()}, ${os.release()}, ${os.arch()})`,\n};\nexport function ApolloServerPluginUsageReporting(options = Object.create(null)) {\n    const fieldLevelInstrumentationOption = options.fieldLevelInstrumentation;\n    const fieldLevelInstrumentation = typeof fieldLevelInstrumentationOption === 'number'\n        ? async () => Math.random() < fieldLevelInstrumentationOption\n            ? 1 / fieldLevelInstrumentationOption\n            : 0\n        : fieldLevelInstrumentationOption\n            ? fieldLevelInstrumentationOption\n            : async () => true;\n    let requestDidStartHandler = null;\n    return internalPlugin({\n        __internal_plugin_id__: 'UsageReporting',\n        __is_disabled_plugin__: false,\n        async requestDidStart(requestContext) {\n            if (requestDidStartHandler) {\n                return requestDidStartHandler(requestContext);\n            }\n            return {};\n        },\n        async serverWillStart({ logger: serverLogger, apollo, startedInBackground, schema, }) {\n            const logger = options.logger ?? serverLogger;\n            const { key, graphRef } = apollo;\n            if (!(key && graphRef)) {\n                throw new Error(\"You've enabled usage reporting via ApolloServerPluginUsageReporting, \" +\n                    'but you also need to provide your Apollo API key and graph ref, via ' +\n                    'the APOLLO_KEY/APOLLO_GRAPH_REF environment ' +\n                    'variables or via `new ApolloServer({apollo: {key, graphRef})`.');\n            }\n            if (schemaIsSubgraph(schema)) {\n                if (options.__onlyIfSchemaIsNotSubgraph) {\n                    logger.warn('You have specified an Apollo API key and graph ref but this server appears ' +\n                        'to be a subgraph. Typically usage reports are sent to Apollo by your Router ' +\n                        'or Gateway, not directly from your subgraph; usage reporting is disabled. To ' +\n                        'enable usage reporting anyway, explicitly install `ApolloServerPluginUsageReporting`. ' +\n                        'To disable this warning, install `ApolloServerPluginUsageReportingDisabled`.');\n                    return {};\n                }\n                else {\n                    logger.warn('You have installed `ApolloServerPluginUsageReporting` but this server appears to ' +\n                        'be a subgraph. Typically usage reports are sent to Apollo by your Router ' +\n                        'or Gateway, not directly from your subgraph. If this was unintentional, remove ' +\n                        \"`ApolloServerPluginUsageReporting` from your server's `plugins` array.\");\n                }\n            }\n            logger.info('Apollo usage reporting starting! See your graph at ' +\n                `https://studio.apollographql.com/graph/${encodeURI(graphRef)}/`);\n            const sendReportsImmediately = options.sendReportsImmediately ?? startedInBackground;\n            let operationDerivedDataCache = null;\n            const reportByExecutableSchemaId = new Map();\n            const getReportWhichMustBeUsedImmediately = (executableSchemaId) => {\n                const existing = reportByExecutableSchemaId.get(executableSchemaId);\n                if (existing) {\n                    return existing;\n                }\n                const report = new OurReport(new ReportHeader({\n                    ...reportHeaderDefaults,\n                    executableSchemaId,\n                    graphRef,\n                }));\n                reportByExecutableSchemaId.set(executableSchemaId, report);\n                return report;\n            };\n            const getAndDeleteReport = (executableSchemaId) => {\n                const report = reportByExecutableSchemaId.get(executableSchemaId);\n                if (report) {\n                    reportByExecutableSchemaId.delete(executableSchemaId);\n                    return report;\n                }\n                return null;\n            };\n            const overriddenExecutableSchemaId = options.overrideReportedSchema\n                ? computeCoreSchemaHash(options.overrideReportedSchema)\n                : undefined;\n            let lastSeenExecutableSchemaToId;\n            let reportTimer;\n            if (!sendReportsImmediately) {\n                reportTimer = setInterval(() => sendAllReportsAndReportErrors(), options.reportIntervalMs || 10 * 1000);\n            }\n            let sendTraces = options.sendTraces ?? true;\n            const sendOperationAsTrace = options.experimental_sendOperationAsTrace ??\n                defaultSendOperationsAsTrace();\n            let stopped = false;\n            function executableSchemaIdForSchema(schema) {\n                if (lastSeenExecutableSchemaToId?.executableSchema === schema) {\n                    return lastSeenExecutableSchemaToId.executableSchemaId;\n                }\n                const id = computeCoreSchemaHash(printSchema(schema));\n                lastSeenExecutableSchemaToId = {\n                    executableSchema: schema,\n                    executableSchemaId: id,\n                };\n                return id;\n            }\n            async function sendAllReportsAndReportErrors() {\n                await Promise.all([...reportByExecutableSchemaId.keys()].map((executableSchemaId) => sendReportAndReportErrors(executableSchemaId)));\n            }\n            async function sendReportAndReportErrors(executableSchemaId) {\n                return sendReport(executableSchemaId).catch((err) => {\n                    if (options.reportErrorFunction) {\n                        options.reportErrorFunction(err);\n                    }\n                    else {\n                        logger.error(err.message);\n                    }\n                });\n            }\n            const sendReport = async (executableSchemaId) => {\n                let report = getAndDeleteReport(executableSchemaId);\n                if (!report ||\n                    (Object.keys(report.tracesPerQuery).length === 0 &&\n                        report.operationCount === 0)) {\n                    return;\n                }\n                report.endTime = dateToProtoTimestamp(new Date());\n                report.ensureCountsAreIntegers();\n                const protobufError = Report.verify(report);\n                if (protobufError) {\n                    throw new Error(`Error verifying report: ${protobufError}`);\n                }\n                let message = Report.encode(report).finish();\n                report = null;\n                if (options.debugPrintReports) {\n                    const decodedReport = Report.decode(message);\n                    logger.info(`Apollo usage report: ${JSON.stringify(decodedReport.toJSON())}`);\n                }\n                const compressed = await new Promise((resolve, reject) => {\n                    gzip(message, (error, result) => {\n                        error ? reject(error) : resolve(result);\n                    });\n                });\n                message = null;\n                const fetcher = options.fetcher ?? fetch;\n                const response = await retry(async () => {\n                    const controller = new AbortController();\n                    const abortTimeout = setTimeout(() => {\n                        controller.abort();\n                    }, options.requestTimeoutMs ?? 30000);\n                    let curResponse;\n                    try {\n                        curResponse = await fetcher((options.endpointUrl ||\n                            'https://usage-reporting.api.apollographql.com') +\n                            '/api/ingress/traces', {\n                            method: 'POST',\n                            headers: {\n                                'user-agent': 'ApolloServerPluginUsageReporting',\n                                'x-api-key': key,\n                                'content-encoding': 'gzip',\n                                accept: 'application/json',\n                            },\n                            body: compressed,\n                            signal: controller.signal,\n                        });\n                    }\n                    finally {\n                        clearTimeout(abortTimeout);\n                    }\n                    if (curResponse.status >= 500 && curResponse.status < 600) {\n                        throw new Error(`HTTP status ${curResponse.status}, ${(await curResponse.text()) || '(no body)'}`);\n                    }\n                    else {\n                        return curResponse;\n                    }\n                }, {\n                    retries: (options.maxAttempts || 5) - 1,\n                    minTimeout: options.minimumRetryDelayMs || 100,\n                    factor: 2,\n                }).catch((err) => {\n                    throw new Error(`Error sending report to Apollo servers: ${err.message}`);\n                });\n                if (response.status < 200 || response.status >= 300) {\n                    throw new Error(`Error sending report to Apollo servers: HTTP status ${response.status}, ${(await response.text()) || '(no body)'}`);\n                }\n                if (sendTraces &&\n                    response.status === 200 &&\n                    response.headers\n                        .get('content-type')\n                        ?.match(/^\\s*application\\/json\\s*(?:;|$)/i)) {\n                    const body = await response.text();\n                    let parsedBody;\n                    try {\n                        parsedBody = JSON.parse(body);\n                    }\n                    catch (e) {\n                        throw new Error(`Error parsing response from Apollo servers: ${e}`);\n                    }\n                    if (parsedBody.tracesIgnored === true) {\n                        logger.debug(\"This graph's organization does not have access to traces; sending all \" +\n                            'subsequent operations as stats.');\n                        sendTraces = false;\n                    }\n                }\n                if (options.debugPrintReports) {\n                    logger.info(`Apollo usage report: status ${response.status}`);\n                }\n            };\n            requestDidStartHandler = ({ metrics, schema, request: { http, variables }, }) => {\n                const treeBuilder = new TraceTreeBuilder({\n                    maskedBy: 'ApolloServerPluginUsageReporting',\n                    sendErrors: options.sendErrors,\n                });\n                treeBuilder.startTiming();\n                metrics.startHrTime = treeBuilder.startHrTime;\n                let graphqlValidationFailure = false;\n                let graphqlUnknownOperationName = false;\n                let includeOperationInUsageReporting = null;\n                if (http) {\n                    treeBuilder.trace.http = new Trace.HTTP({\n                        method: Trace.HTTP.Method[http.method] || Trace.HTTP.Method.UNKNOWN,\n                    });\n                    if (options.sendHeaders) {\n                        makeHTTPRequestHeaders(treeBuilder.trace.http, http.headers, options.sendHeaders);\n                    }\n                }\n                async function maybeCallIncludeRequestHook(requestContext) {\n                    if (includeOperationInUsageReporting !== null)\n                        return;\n                    if (typeof options.includeRequest !== 'function') {\n                        includeOperationInUsageReporting = true;\n                        return;\n                    }\n                    includeOperationInUsageReporting =\n                        await options.includeRequest(requestContext);\n                    if (typeof includeOperationInUsageReporting !== 'boolean') {\n                        logger.warn(\"The 'includeRequest' async predicate function must return a boolean value.\");\n                        includeOperationInUsageReporting = true;\n                    }\n                }\n                let didResolveSource = false;\n                return {\n                    async didResolveSource(requestContext) {\n                        didResolveSource = true;\n                        if (metrics.persistedQueryHit) {\n                            treeBuilder.trace.persistedQueryHit = true;\n                        }\n                        if (metrics.persistedQueryRegister) {\n                            treeBuilder.trace.persistedQueryRegister = true;\n                        }\n                        if (variables) {\n                            treeBuilder.trace.details = makeTraceDetails(variables, options.sendVariableValues, requestContext.source);\n                        }\n                        const clientInfo = (options.generateClientInfo || defaultGenerateClientInfo)(requestContext);\n                        if (clientInfo) {\n                            const { clientName, clientVersion } = clientInfo;\n                            treeBuilder.trace.clientVersion = clientVersion || '';\n                            treeBuilder.trace.clientName = clientName || '';\n                        }\n                    },\n                    async validationDidStart() {\n                        return async (validationErrors) => {\n                            graphqlValidationFailure = validationErrors\n                                ? validationErrors.length !== 0\n                                : false;\n                        };\n                    },\n                    async didResolveOperation(requestContext) {\n                        graphqlUnknownOperationName =\n                            requestContext.operation === undefined;\n                        await maybeCallIncludeRequestHook(requestContext);\n                        if (includeOperationInUsageReporting &&\n                            !graphqlUnknownOperationName) {\n                            if (metrics.captureTraces === undefined) {\n                                const rawWeight = await fieldLevelInstrumentation(requestContext);\n                                treeBuilder.trace.fieldExecutionWeight =\n                                    typeof rawWeight === 'number' ? rawWeight : rawWeight ? 1 : 0;\n                                metrics.captureTraces =\n                                    !!treeBuilder.trace.fieldExecutionWeight;\n                            }\n                        }\n                    },\n                    async executionDidStart() {\n                        if (!metrics.captureTraces)\n                            return;\n                        return {\n                            willResolveField({ info }) {\n                                return treeBuilder.willResolveField(info);\n                            },\n                        };\n                    },\n                    async didEncounterSubsequentErrors(_requestContext, errors) {\n                        treeBuilder.didEncounterErrors(errors);\n                    },\n                    async willSendSubsequentPayload(requestContext, payload) {\n                        if (!payload.hasNext) {\n                            await operationFinished(requestContext);\n                        }\n                    },\n                    async willSendResponse(requestContext) {\n                        if (!didResolveSource)\n                            return;\n                        if (requestContext.errors) {\n                            treeBuilder.didEncounterErrors(requestContext.errors);\n                        }\n                        if (requestContext.response.body.kind === 'single') {\n                            await operationFinished(requestContext);\n                        }\n                    },\n                };\n                async function operationFinished(requestContext) {\n                    const resolvedOperation = !!requestContext.operation;\n                    await maybeCallIncludeRequestHook(requestContext);\n                    treeBuilder.stopTiming();\n                    const executableSchemaId = overriddenExecutableSchemaId ?? executableSchemaIdForSchema(schema);\n                    if (includeOperationInUsageReporting === false) {\n                        if (resolvedOperation) {\n                            getReportWhichMustBeUsedImmediately(executableSchemaId)\n                                .operationCount++;\n                        }\n                        return;\n                    }\n                    treeBuilder.trace.fullQueryCacheHit = !!metrics.responseCacheHit;\n                    treeBuilder.trace.forbiddenOperation = !!metrics.forbiddenOperation;\n                    treeBuilder.trace.registeredOperation = !!metrics.registeredOperation;\n                    const policyIfCacheable = requestContext.overallCachePolicy.policyIfCacheable();\n                    if (policyIfCacheable) {\n                        treeBuilder.trace.cachePolicy = new Trace.CachePolicy({\n                            scope: policyIfCacheable.scope === 'PRIVATE'\n                                ? Trace.CachePolicy.Scope.PRIVATE\n                                : policyIfCacheable.scope === 'PUBLIC'\n                                    ? Trace.CachePolicy.Scope.PUBLIC\n                                    : Trace.CachePolicy.Scope.UNKNOWN,\n                            maxAgeNs: policyIfCacheable.maxAge * 1e9,\n                        });\n                    }\n                    if (metrics.queryPlanTrace) {\n                        treeBuilder.trace.queryPlan = metrics.queryPlanTrace;\n                    }\n                    addTrace().catch(logger.error);\n                    async function addTrace() {\n                        if (stopped) {\n                            return;\n                        }\n                        await new Promise((res) => setImmediate(res));\n                        const executableSchemaId = overriddenExecutableSchemaId ??\n                            executableSchemaIdForSchema(schema);\n                        const { trace } = treeBuilder;\n                        let statsReportKey = undefined;\n                        let referencedFieldsByType;\n                        if (!requestContext.document) {\n                            statsReportKey = `## GraphQLParseFailure\\n`;\n                        }\n                        else if (graphqlValidationFailure) {\n                            statsReportKey = `## GraphQLValidationFailure\\n`;\n                        }\n                        else if (graphqlUnknownOperationName) {\n                            statsReportKey = `## GraphQLUnknownOperationName\\n`;\n                        }\n                        const isExecutable = statsReportKey === undefined;\n                        if (statsReportKey) {\n                            if (options.sendUnexecutableOperationDocuments) {\n                                trace.unexecutedOperationBody = requestContext.source;\n                                trace.unexecutedOperationName =\n                                    requestContext.request.operationName || '';\n                            }\n                            referencedFieldsByType = Object.create(null);\n                        }\n                        else {\n                            const operationDerivedData = getOperationDerivedData();\n                            statsReportKey = `# ${requestContext.operationName || '-'}\\n${operationDerivedData.signature}`;\n                            referencedFieldsByType =\n                                operationDerivedData.referencedFieldsByType;\n                        }\n                        const protobufError = Trace.verify(trace);\n                        if (protobufError) {\n                            throw new Error(`Error encoding trace: ${protobufError}`);\n                        }\n                        if (resolvedOperation) {\n                            getReportWhichMustBeUsedImmediately(executableSchemaId)\n                                .operationCount++;\n                        }\n                        getReportWhichMustBeUsedImmediately(executableSchemaId).addTrace({\n                            statsReportKey,\n                            trace,\n                            asTrace: sendTraces &&\n                                (!isExecutable || !!metrics.captureTraces) &&\n                                !metrics.nonFtv1ErrorPaths?.length &&\n                                sendOperationAsTrace(trace, statsReportKey),\n                            referencedFieldsByType,\n                            nonFtv1ErrorPaths: metrics.nonFtv1ErrorPaths ?? [],\n                        });\n                        if (sendReportsImmediately ||\n                            getReportWhichMustBeUsedImmediately(executableSchemaId)\n                                .sizeEstimator.bytes >=\n                                (options.maxUncompressedReportSize || 4 * 1024 * 1024)) {\n                            await sendReportAndReportErrors(executableSchemaId);\n                        }\n                    }\n                    function getOperationDerivedData() {\n                        if (!requestContext.document) {\n                            throw new Error('No document?');\n                        }\n                        const cacheKey = operationDerivedDataCacheKey(requestContext.queryHash, requestContext.operationName || '');\n                        if (!operationDerivedDataCache ||\n                            operationDerivedDataCache.forSchema !== schema) {\n                            operationDerivedDataCache = {\n                                forSchema: schema,\n                                cache: createOperationDerivedDataCache({ logger }),\n                            };\n                        }\n                        const cachedOperationDerivedData = operationDerivedDataCache.cache.get(cacheKey);\n                        if (cachedOperationDerivedData) {\n                            return cachedOperationDerivedData;\n                        }\n                        const generatedSignature = (options.calculateSignature || usageReportingSignature)(requestContext.document, requestContext.operationName || '');\n                        const generatedOperationDerivedData = {\n                            signature: generatedSignature,\n                            referencedFieldsByType: calculateReferencedFieldsByType({\n                                document: requestContext.document,\n                                schema,\n                                resolvedOperationName: requestContext.operationName ?? null,\n                            }),\n                        };\n                        operationDerivedDataCache.cache.set(cacheKey, generatedOperationDerivedData);\n                        return generatedOperationDerivedData;\n                    }\n                }\n            };\n            return {\n                async serverWillStop() {\n                    if (reportTimer) {\n                        clearInterval(reportTimer);\n                        reportTimer = undefined;\n                    }\n                    stopped = true;\n                    await sendAllReportsAndReportErrors();\n                },\n            };\n        },\n    });\n}\nexport function makeHTTPRequestHeaders(http, headers, sendHeaders) {\n    if (!sendHeaders ||\n        ('none' in sendHeaders && sendHeaders.none) ||\n        ('all' in sendHeaders && !sendHeaders.all)) {\n        return;\n    }\n    for (const [key, value] of headers) {\n        if (('exceptNames' in sendHeaders &&\n            sendHeaders.exceptNames.some((exceptHeader) => {\n                return exceptHeader.toLowerCase() === key;\n            })) ||\n            ('onlyNames' in sendHeaders &&\n                !sendHeaders.onlyNames.some((header) => {\n                    return header.toLowerCase() === key;\n                }))) {\n            continue;\n        }\n        switch (key) {\n            case 'authorization':\n            case 'cookie':\n            case 'set-cookie':\n                break;\n            default:\n                http.requestHeaders[key] = new Trace.HTTP.Values({\n                    value: [value],\n                });\n        }\n    }\n}\nfunction defaultGenerateClientInfo({ request, }) {\n    const clientNameHeaderKey = 'apollographql-client-name';\n    const clientVersionHeaderKey = 'apollographql-client-version';\n    if (request.http?.headers?.get(clientNameHeaderKey) ||\n        request.http?.headers?.get(clientVersionHeaderKey)) {\n        return {\n            clientName: request.http?.headers?.get(clientNameHeaderKey),\n            clientVersion: request.http?.headers?.get(clientVersionHeaderKey),\n        };\n    }\n    else if (request.extensions?.clientInfo) {\n        return request.extensions.clientInfo;\n    }\n    else {\n        return {};\n    }\n}\n//# sourceMappingURL=plugin.js.map","import LRUCache from 'lru-cache';\nimport { iterateOverTrace } from './iterateOverTrace.js';\nimport { DurationHistogram } from './durationHistogram.js';\nexport function defaultSendOperationsAsTrace() {\n    const cache = new LRUCache({\n        maxSize: Math.pow(2, 20),\n        sizeCalculation: (_val, key) => {\n            return (key && Buffer.byteLength(key)) || 0;\n        },\n    });\n    return (trace, statsReportKey) => {\n        const endTimeSeconds = trace.endTime?.seconds;\n        if (endTimeSeconds == null) {\n            throw Error('programming error: endTime not set on trace');\n        }\n        const hasErrors = traceHasErrors(trace);\n        const cacheKey = JSON.stringify([\n            statsReportKey,\n            DurationHistogram.durationToBucket(trace.durationNs),\n            Math.floor(endTimeSeconds / 60),\n            hasErrors ? Math.floor(endTimeSeconds / 5) : '',\n        ]);\n        if (cache.get(cacheKey)) {\n            return false;\n        }\n        cache.set(cacheKey, true);\n        return true;\n    };\n}\nfunction traceHasErrors(trace) {\n    let hasErrors = false;\n    function traceNodeStats(node) {\n        if ((node.error?.length ?? 0) > 0) {\n            hasErrors = true;\n        }\n        return hasErrors;\n    }\n    iterateOverTrace(trace, traceNodeStats, false);\n    return hasErrors;\n}\n//# sourceMappingURL=defaultSendOperationsAsTrace.js.map","import { Trace } from '@apollo/usage-reporting-protobuf';\nexport function makeTraceDetails(variables, sendVariableValues, operationString) {\n    const details = new Trace.Details();\n    const variablesToRecord = (() => {\n        if (sendVariableValues && 'transform' in sendVariableValues) {\n            const originalKeys = Object.keys(variables);\n            try {\n                const modifiedVariables = sendVariableValues.transform({\n                    variables: variables,\n                    operationString: operationString,\n                });\n                return cleanModifiedVariables(originalKeys, modifiedVariables);\n            }\n            catch (e) {\n                return handleVariableValueTransformError(originalKeys);\n            }\n        }\n        else {\n            return variables;\n        }\n    })();\n    Object.keys(variablesToRecord).forEach((name) => {\n        if (!sendVariableValues ||\n            ('none' in sendVariableValues && sendVariableValues.none) ||\n            ('all' in sendVariableValues && !sendVariableValues.all) ||\n            ('exceptNames' in sendVariableValues &&\n                sendVariableValues.exceptNames.includes(name)) ||\n            ('onlyNames' in sendVariableValues &&\n                !sendVariableValues.onlyNames.includes(name))) {\n            details.variablesJson[name] = '';\n        }\n        else {\n            try {\n                details.variablesJson[name] =\n                    typeof variablesToRecord[name] === 'undefined'\n                        ? ''\n                        : JSON.stringify(variablesToRecord[name]);\n            }\n            catch (e) {\n                details.variablesJson[name] = JSON.stringify('[Unable to convert value to JSON]');\n            }\n        }\n    });\n    return details;\n}\nfunction handleVariableValueTransformError(variableNames) {\n    const modifiedVariables = Object.create(null);\n    variableNames.forEach((name) => {\n        modifiedVariables[name] = '[PREDICATE_FUNCTION_ERROR]';\n    });\n    return modifiedVariables;\n}\nfunction cleanModifiedVariables(originalKeys, modifiedVariables) {\n    const cleanedVariables = Object.create(null);\n    originalKeys.forEach((name) => {\n        cleanedVariables[name] = modifiedVariables[name];\n    });\n    return cleanedVariables;\n}\n//# sourceMappingURL=traceDetails.js.map","import LRUCache from 'lru-cache';\nexport function createOperationDerivedDataCache({ logger, }) {\n    let lastWarn;\n    let lastDisposals = 0;\n    return new LRUCache({\n        sizeCalculation(obj) {\n            return Buffer.byteLength(JSON.stringify(obj), 'utf8');\n        },\n        maxSize: Math.pow(2, 20) * 10,\n        dispose() {\n            lastDisposals++;\n            if (!lastWarn || new Date().getTime() - lastWarn.getTime() > 60000) {\n                lastWarn = new Date();\n                logger.warn([\n                    'This server is processing a high number of unique operations.  ',\n                    `A total of ${lastDisposals} records have been `,\n                    'ejected from the ApolloServerPluginUsageReporting signature cache in the past ',\n                    'interval.  If you see this warning frequently, please open an ',\n                    'issue on the Apollo Server repository.',\n                ].join(''));\n                lastDisposals = 0;\n            }\n        },\n    });\n}\nexport function operationDerivedDataCacheKey(queryHash, operationName) {\n    return `${queryHash}${operationName && ':' + operationName}`;\n}\n//# sourceMappingURL=operationDerivedDataCache.js.map"],"names":["Object","defineProperty","exports","value","dropUnusedDefinitions","graphql_1","ast","operationName","separated","separateOperations","printWithReducedWhitespace","sanitizedAST","visit","StringValue","node","Buffer","from","toString","block","minimizedButStillHex","withWhitespace","print","replace","_","c","hex","JSON","stringify","removeAliases","Field","alias","rest","__importDefault","mod","__esModule","sortAST","lodash_sortby_1","sortDirectives","directives","default","sortArguments","arguments","sortVariableDefinitions","variableDefinitions","Document","definitions","OperationDefinition","SelectionSet","selections","FragmentSpread","InlineFragment","FragmentDefinition","Directive","stripSensitiveLiterals","options","hideListAndObjectLiterals","listAndObjectVisitorIfEnabled","ListValue","values","ObjectValue","fields","IntValue","FloatValue","calculateReferencedFieldsByType","usage_reporting_protobuf_1","document","schema","resolvedOperationName","filteredDocument","documentSeparatedByOperation","Error","typeInfo","TypeInfo","interfaces","Set","referencedFieldSetByType","create","visitWithTypeInfo","field","fieldName","name","parentType","getParentType","parentTypeName","isInterfaceType","add","referencedFieldsByType","typeName","fieldNames","entries","ReferencedFieldsForType","isInterface","has","usageReportingSignature","calculateReferencedFieldsByType_1","enumerable","get","signature_1","utils_dropunuseddefinitions_1","utils_stripsensitiveliterals_1","utils_printwithreducedwhitespace_1","utils_removealiases_1","utils_sortast_1","retrier","module","fn","opts","Promise","resolve","reject","op","bail","err","onError","num","retry","onRetry","mainError","randomize","operation","attempt","val","then","catch","uid","func","transform","start","HASH_UNDEFINED","INFINITY","argsTag","arrayTag","boolTag","dateTag","errorTag","funcTag","mapTag","numberTag","objectTag","promiseTag","regexpTag","setTag","stringTag","symbolTag","weakMapTag","arrayBufferTag","dataViewTag","reIsDeepProp","reIsPlainProp","reLeadingDot","rePropName","reEscapeChar","reIsHostCtor","reIsUint","typedArrayTags","freeGlobal","global","freeSelf","self","root","Function","freeExports","nodeType","freeModule","freeProcess","moduleExports","process","nodeUtil","binding","e","nodeIsTypedArray","isTypedArray","arrayMap","array","iteratee","index","length","result","Array","baseUnary","isHostObject","mapToArray","map","size","forEach","key","setToArray","set","arrayProto","prototype","funcProto","objectProto","coreJsData","maskSrcKey","exec","keys","IE_PROTO","funcToString","hasOwnProperty","objectToString","reIsNative","RegExp","call","Symbol","Uint8Array","propertyIsEnumerable","splice","spreadableSymbol","isConcatSpreadable","undefined","nativeKeys","arg","nativeMax","Math","max","DataView","getNative","Map","WeakMap","nativeCreate","dataViewCtorString","toSource","mapCtorString","promiseCtorString","setCtorString","weakMapCtorString","symbolProto","symbolValueOf","valueOf","symbolToString","Hash","clear","entry","ListCache","__data__","data","MapCache","assocIndexOf","pop","push","SetCache","getMapData","Stack","cache","pairs","LARGE_ARRAY_SIZE","eq","baseEach","createBaseEach","eachFunc","fromRight","collection","isArrayLike","iterable","object","baseFor","createBaseFor","keysFunc","props","baseGet","path","isKey","castPath","isArray","stringToPath","toKey","baseHasIn","baseIsEqual","other","customizer","bitmask","stack","isObject","isObjectLike","baseIsEqualDeep","equalFunc","objIsArr","othIsArr","objTag","othTag","getTag","objIsObj","othIsObj","isSameTag","equalArrays","equalByTag","tag","byteLength","byteOffset","buffer","message","convert","isPartial","stacked","objIsWrapped","othIsWrapped","objUnwrapped","othUnwrapped","equalObjects","objProps","objLength","othProps","skipCtor","objValue","othValue","compared","objCtor","constructor","othCtor","baseIteratee","identity","baseMatchesProperty","srcValue","isStrictComparable","matchesStrictComparable","defaultValue","hasIn","hasPath","hasFunc","isLength","isIndex","isArguments","UNORDERED_COMPARE_FLAG","baseMatches","source","matchData","getMatchData","baseIsMatch","noCustomizer","property","arrLength","othLength","seen","arrValue","arraySome","predicate","othIndex","isKeyable","type","baseIsNative","isMasked","pattern","isFunction","test","ArrayBuffer","Ctor","ctorString","isFlattenable","isIterateeCall","isSymbol","memoize","string","baseToString","match","number","quote","sortBy","iteratees","orders","baseFlatten","depth","isStrict","arrayPush","offset","baseSortBy","comparer","sort","compareMultiple","objCriteria","criteria","othCriteria","ordersLength","compareAscending","valIsDefined","valIsNull","valIsReflexive","valIsSymbol","othIsDefined","othIsNull","othIsReflexive","othIsSymbol","order","args","otherArgs","apply","thisArg","resolver","TypeError","memoized","Cache","isArrayLikeObject","arrayLikeKeys","inherited","baseTimes","n","String","skipIndexes","baseKeys","isPrototype","RetryOperation","timeouts","forever","retries","Infinity","unref","maxRetryTime","concat","factor","minTimeout","maxTimeout","i","createTimeout","a","b","timeout","round","random","pow","min","wrap","obj","methods","method","original","slice","callback","bind","_originalTimeouts","parse","_timeouts","_options","_maxRetryTime","_fn","_errors","_attempts","_operationTimeout","_operationTimeoutCb","_timeout","_operationStart","_timer","_cachedTimeouts","reset","stop","clearTimeout","currentTime","Date","getTime","unshift","shift","setTimeout","timeoutOps","cb","try","console","log","errors","attempts","counts","mainErrorCount","error","count","google","protobuf","$protobuf","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","Trace","properties","startTime","endTime","durationNs","isIncomplete","signature","unexecutedOperationBody","unexecutedOperationName","details","clientName","clientVersion","http","cachePolicy","queryPlan","fullQueryCacheHit","persistedQueryHit","persistedQueryRegister","registeredOperation","forbiddenOperation","fieldExecutionWeight","encode","writer","Timestamp","uint32","fork","ldelim","Details","HTTP","uint64","Node","CachePolicy","bool","QueryPlanNode","double","encodeDelimited","decode","reader","end","len","pos","skipType","decodeDelimited","verify","isInteger","low","high","isString","toObject","defaults","longs","Long","Number","LongBits","toNumber","json","isFinite","toJSON","toJSONOptions","valuesById","scope","maxAgeNs","int32","int64","enums","Scope","variablesJson","emptyObject","skip","keys2","objects","j","location","emptyArray","timeNs","Location","arrays","requestHeaders","responseHeaders","statusCode","Values","Method","line","column","$oneOfFields","child","responseName","originalFieldName","oneOfGetter","oneOfSetter","id","oneofs","sequence","parallel","fetch","flatten","defer","condition","SequenceNode","ParallelNode","FetchNode","FlattenNode","DeferNode","ConditionNode","nodes","serviceName","traceParsingFailed","trace","sentTimeOffset","sentTime","receivedTime","responsePath","ResponsePathElement","deferred","primary","DeferNodePrimary","DeferredNode","ifClause","elseClause","depends","label","DeferredNodeDepends","deferLabel","ReportHeader","graphRef","hostname","agentVersion","serviceVersion","runtimeVersion","uname","executableSchemaId","PathErrorStats","children","errorsCount","requestsWithErrorsCount","QueryLatencyStats","latencyCount","cacheLatencyCount","publicCacheTtlCount","privateCacheTtlCount","requestCount","cacheHits","persistedQueryHits","persistedQueryMisses","rootErrorStats","registeredOperationCount","forbiddenOperationCount","requestsWithoutFieldInstrumentation","array13","toArray","array14","array15","array16","sint64","end2","StatsContext","ContextualizedQueryLatencyStats","queryLatencyStats","context","ContextualizedTypeStats","perTypeStat","TypeStat","FieldStat","returnType","observedExecutionCount","estimatedExecutionCount","array9","perFieldStat","Report","tracesPerQuery","header","operationCount","tracesPreAggregated","TracesAndStats","ContextualizedStats","statsWithContext","internalTracesContributingToStats","array2","bytes","seconds","nanos","iterateOverTrace","f","includePath","rootPath","RootCollectingPathsResponseNamePath","notCollectingPathsResponseNamePath","iterateOverTraceNode","iterateOverQueryPlan","some","childPath","ChildCollectingPathsResponseNamePath","prev","out","curr","reverse","DurationHistogram","bufferedZeroes","outputArray","buckets","floor","durationToBucket","unboundedBucket","ceil","EXPONENT_LOG","isNaN","BUCKET_COUNT","incrementDuration","incrementBucket","bucket","oldLength","fill","combine","otherHistogram","initSize","arrayInitSize","SizeEstimator","OurReport","sizeEstimator","ensureCountsAreIntegers","tracesAndStats","addTrace","statsReportKey","asTrace","maxTraceBytes","nonFtv1ErrorPaths","getTracesAndStats","encodedTrace","finish","existing","referencedFieldsForType","estimatedBytesForString","OurTracesAndStats","StatsByContext","contextualizedStats","getContextualizedStats","statsContext","statsContextKey","OurContextualizedStats","OurQueryLatencyStats","typeStat","hasError","errorPathStats","subgraph","currPathErrorStats","subPath","getChild","fieldStat","getTypeStat","getFieldStat","errorPath","OurTypeStat","OurPathErrorStats","OurFieldStat","s","reportHeaderDefaults","version","ApolloServerPluginUsageReporting","fieldLevelInstrumentationOption","fieldLevelInstrumentation","requestDidStartHandler","__internal_plugin_id__","__is_disabled_plugin__","requestDidStart","requestContext","serverWillStart","logger","serverLogger","apollo","startedInBackground","lastSeenExecutableSchemaToId","reportTimer","__onlyIfSchemaIsNotSubgraph","warn","info","encodeURI","sendReportsImmediately","operationDerivedDataCache","reportByExecutableSchemaId","getReportWhichMustBeUsedImmediately","report","getAndDeleteReport","delete","overriddenExecutableSchemaId","overrideReportedSchema","setInterval","sendAllReportsAndReportErrors","reportIntervalMs","sendTraces","sendOperationAsTrace","experimental_sendOperationAsTrace","defaultSendOperationsAsTrace","maxSize","sizeCalculation","_val","endTimeSeconds","hasErrors","traceHasErrors","cacheKey","stopped","executableSchemaIdForSchema","executableSchema","all","sendReportAndReportErrors","sendReport","reportErrorFunction","protobufError","debugPrintReports","decodedReport","compressed","gzip","fetcher","response","curResponse","controller","AbortController","abortTimeout","abort","requestTimeoutMs","endpointUrl","headers","accept","body","signal","status","text","maxAttempts","minimumRetryDelayMs","parsedBody","tracesIgnored","debug","metrics","request","variables","treeBuilder","maskedBy","sendErrors","startTiming","startHrTime","graphqlValidationFailure","graphqlUnknownOperationName","includeOperationInUsageReporting","maybeCallIncludeRequestHook","includeRequest","sendHeaders","makeHTTPRequestHeaders","none","exceptNames","exceptHeader","toLowerCase","onlyNames","didResolveSource","makeTraceDetails","sendVariableValues","operationString","variablesToRecord","originalKeys","modifiedVariables","cleanModifiedVariables","cleanedVariables","handleVariableValueTransformError","variableNames","includes","clientInfo","generateClientInfo","clientNameHeaderKey","clientVersionHeaderKey","extensions","validationDidStart","validationErrors","didResolveOperation","captureTraces","rawWeight","executionDidStart","willResolveField","didEncounterSubsequentErrors","_requestContext","didEncounterErrors","willSendSubsequentPayload","payload","hasNext","operationFinished","willSendResponse","kind","resolvedOperation","stopTiming","responseCacheHit","policyIfCacheable","overallCachePolicy","res","setImmediate","isExecutable","sendUnexecutableOperationDocuments","operationDerivedData","getOperationDerivedData","queryHash","forSchema","createOperationDerivedDataCache","lastWarn","lastDisposals","dispose","cachedOperationDerivedData","generatedOperationDerivedData","calculateSignature","maxUncompressedReportSize","maxAge","queryPlanTrace","serverWillStop","clearInterval"],"mappings":"qEACAA,OAAOC,cAAc,CAACC,EAAS,aAAc,CAAEC,MAAO,EAAK,GAC3DD,EAAQE,qBAAqB,CAAG,KAAK,EACrC,IAAMC,EAAY,EAAQ,MAQ1BH,CAAAA,EAAQE,qBAAqB,CAP7B,SAA+BE,CAAG,CAAEC,CAAa,EAC7C,IAAMC,EAAY,AAAC,GAAGH,EAAUI,kBAAkB,AAAD,EAAGH,EAAI,CAACC,EAAc,QACvE,AAAKC,EAGEA,EAFIF,CAGf,C,wBCTAN,OAAOC,cAAc,CAACC,EAAS,aAAc,CAAEC,MAAO,EAAK,GAC3DD,EAAQQ,0BAA0B,CAAG,KAAK,EAC1C,IAAML,EAAY,EAAQ,MAkB1BH,CAAAA,EAAQQ,0BAA0B,CAjBlC,SAAoCJ,CAAG,EACnC,IAAMK,EAAe,AAAC,GAAGN,EAAUO,KAAK,AAAD,EAAGN,EAAK,CAC3CO,YAAAA,AAAYC,GACD,EACH,GAAGA,CAAI,CACPX,MAAOY,OAAOC,IAAI,CAACF,EAAKX,KAAK,CAAE,QAAQc,QAAQ,CAAC,OAChDC,MAAO,EACX,EAER,GAMA,MAAOC,AAJsBC,AADN,AAAC,GAAGf,EAAUgB,KAAK,AAAD,EAAGV,GAEvCW,OAAO,CAAC,OAAQ,KAChBA,OAAO,CAAC,oBAAqB,CAACC,EAAGC,IAAMA,GACvCF,OAAO,CAAC,oBAAqB,CAACC,EAAGC,IAAMA,GAChBF,OAAO,CAAC,iBAAkB,CAACC,EAAGE,IAAQC,KAAKC,SAAS,CAACZ,OAAOC,IAAI,CAACS,EAAK,OAAOR,QAAQ,CAAC,SACtH,C,wBCnBAjB,OAAOC,cAAc,CAACC,EAAS,aAAc,CAAEC,MAAO,EAAK,GAC3DD,EAAQ0B,aAAa,CAAG,KAAK,EAC7B,IAAMvB,EAAY,EAAQ,MAS1BH,CAAAA,EAAQ0B,aAAa,CARrB,SAAuBtB,CAAG,EACtB,MAAO,AAAC,GAAGD,EAAUO,KAAK,AAAD,EAAGN,EAAK,CAC7BuB,MAAMf,CAAI,EACN,GAAM,CAAEgB,MAAAA,CAAK,CAAE,GAAGC,EAAM,CAAGjB,EAC3B,OAAOiB,CACX,CACJ,EACJ,C,wBCVA,IAAIC,EAAkB,AAAC,IAAI,EAAI,IAAI,CAACA,eAAe,EAAK,SAAUC,CAAG,EACjE,OAAO,AAACA,GAAOA,EAAIC,UAAU,CAAID,EAAM,CAAE,QAAWA,CAAI,CAC5D,EACAjC,OAAOC,cAAc,CAACC,EAAS,aAAc,CAAEC,MAAO,EAAK,GAC3DD,EAAQiC,OAAO,CAAG,KAAK,EACvB,IAAM9B,EAAY,EAAQ,OACpB+B,EAAkBJ,EAAgB,EAAQ,QAoChD,SAASK,EAAevB,CAAI,EACxB,MAAO,eAAgBA,EACjB,CAAE,GAAGA,CAAI,CAAEwB,WAAY,AAAC,GAAGF,EAAgBG,OAAO,AAAD,EAAGzB,EAAKwB,UAAU,CAAE,aAAc,EACnFxB,CACV,CACA,SAAS0B,EAAc1B,CAAI,EACvB,MAAO,cAAeA,EAChB,CAAE,GAAGA,CAAI,CAAE2B,UAAW,AAAC,GAAGL,EAAgBG,OAAO,AAAD,EAAGzB,EAAK2B,SAAS,CAAE,aAAc,EACjF3B,CACV,CACA,SAAS4B,EAAwB5B,CAAI,EACjC,MAAO,wBAAyBA,EAC1B,CACE,GAAGA,CAAI,CACP6B,oBAAqB,AAAC,GAAGP,EAAgBG,OAAO,AAAD,EAAGzB,EAAK6B,mBAAmB,CAAE,sBAChF,EACE7B,CACV,CAlBAZ,EAAQiC,OAAO,CAlCf,SAAiB7B,CAAG,EAChB,MAAO,AAAC,GAAGD,EAAUO,KAAK,AAAD,EAAGN,EAAK,CAC7BsC,SAAAA,AAAS9B,GACE,EACH,GAAGA,CAAI,CACP+B,YAAa,AAAC,GAAGT,EAAgBG,OAAO,AAAD,EAAGzB,EAAK+B,WAAW,CAAE,OAAQ,aACxE,GAEJC,oBAAAA,AAAoBhC,GACT4B,EAAwB5B,GAEnCiC,aAAAA,AAAajC,GACF,EACH,GAAGA,CAAI,CACPkC,WAAY,AAAC,GAAGZ,EAAgBG,OAAO,AAAD,EAAGzB,EAAKkC,UAAU,CAAE,OAAQ,aACtE,GAEJnB,MAAAA,AAAMf,GACK0B,EAAc1B,GAEzBmC,eAAAA,AAAenC,GACJuB,EAAevB,GAE1BoC,eAAAA,AAAepC,GACJuB,EAAevB,GAE1BqC,mBAAAA,AAAmBrC,GACRuB,EAAeK,EAAwB5B,IAElDsC,UAAAA,AAAUtC,GACC0B,EAAc1B,EAE7B,EACJ,C,wBCxCAd,OAAOC,cAAc,CAACC,EAAS,aAAc,CAAEC,MAAO,EAAK,GAC3DD,EAAQmD,sBAAsB,CAAG,KAAK,EACtC,IAAMhD,EAAY,EAAQ,MA2B1BH,CAAAA,EAAQmD,sBAAsB,CA1B9B,SAAgC/C,CAAG,CAAEgD,EAAU,CAC3CC,0BAA2B,EAC/B,CAAC,EACG,IAAMC,EAAgCF,EAAQC,yBAAyB,CACjE,CACEE,UAAAA,AAAU3C,GACC,EAAE,GAAGA,CAAI,CAAE4C,OAAQ,EAAE,AAAC,GAEjCC,YAAAA,AAAY7C,GACD,EAAE,GAAGA,CAAI,CAAE8C,OAAQ,EAAE,AAAC,EAErC,EACE,CAAC,EACP,MAAO,AAAC,GAAGvD,EAAUO,KAAK,AAAD,EAAGN,EAAK,CAC7BuD,SAAAA,AAAS/C,GACE,EAAE,GAAGA,CAAI,CAAEX,MAAO,GAAI,GAEjC2D,WAAAA,AAAWhD,GACA,EAAE,GAAGA,CAAI,CAAEX,MAAO,GAAI,GAEjCU,YAAAA,AAAYC,GACD,EAAE,GAAGA,CAAI,CAAEX,MAAO,GAAIe,MAAO,EAAM,GAE9C,GAAGsC,CAA6B,AACpC,EACJ,C,uBC5BAxD,OAAOC,cAAc,CAACC,EAAS,aAAc,CAAEC,MAAO,EAAK,GAC3DD,EAAQ6D,+BAA+B,CAAG,KAAK,EAC/C,IAAM1D,EAAY,EAAQ,OACpB2D,EAA6B,EAAQ,MAoC3C9D,CAAAA,EAAQ6D,+BAA+B,CAnCvC,SAAyC,CAAEE,SAAAA,CAAQ,CAAEC,OAAAA,CAAM,CAAEC,sBAAAA,CAAqB,CAAG,EAEjF,IAAMC,EAAmBC,AADY,AAAC,GAAGhE,EAAUI,kBAAkB,AAAD,EAAGwD,EAClB,CAACE,MAAAA,EAAqEA,EAAwB,GAAG,CACtJ,GAAI,CAACC,EACD,MAAME,MAAM,CAAC,6BAA6B,EAAEH,MAAAA,EAAqEA,EAAwB,GAAG,WAAW,CAAC,EAE5J,IAAMI,EAAW,IAAIlE,EAAUmE,QAAQ,CAACN,GAClCO,EAAa,IAAIC,IACjBC,EAA2B3E,OAAO4E,MAAM,CAAC,MAC/C,AAAC,GAAGvE,EAAUO,KAAK,AAAD,EAAGwD,EAAkB,AAAC,GAAG/D,EAAUwE,iBAAiB,AAAD,EAAGN,EAAU,CAC9E1C,MAAMiD,CAAK,EACP,IAAMC,EAAYD,EAAME,IAAI,CAAC7E,KAAK,CAC5B8E,EAAaV,EAASW,aAAa,GACzC,GAAI,CAACD,EACD,MAAMX,MAAM,CAAC,gDAAgD,EAAES,EAAU,CAAC,EAE9E,IAAMI,EAAiBF,EAAWD,IAAI,AAClC,EAACL,CAAwB,CAACQ,EAAe,GACzCR,CAAwB,CAACQ,EAAe,CAAG,IAAIT,IAC3C,AAAC,GAAGrE,EAAU+E,eAAe,AAAD,EAAGH,IAC/BR,EAAWY,GAAG,CAACF,IAGvBR,CAAwB,CAACQ,EAAe,CAACE,GAAG,CAACN,EACjD,CACJ,IACA,IAAMO,EAAyBtF,OAAO4E,MAAM,CAAC,MAC7C,IAAK,GAAM,CAACW,EAAUC,EAAW,GAAIxF,OAAOyF,OAAO,CAACd,GAChDW,CAAsB,CAACC,EAAS,CAAG,IAAIvB,EAA2B0B,uBAAuB,CAAC,CACtFF,WAAY,IAAIA,EAAW,CAC3BG,YAAalB,EAAWmB,GAAG,CAACL,EAChC,GAEJ,OAAOD,CACX,C,wBCrCApF,EAAQ2F,uBAAuB,CAAG3F,EAAQ6D,+BAA+B,CAAG,KAAK,EACjF,IAAI+B,EAAoC,EAAQ,MAChD9F,OAAOC,cAAc,CAACC,EAAS,kCAAmC,CAAE6F,WAAY,GAAMC,IAAK,WAAc,OAAOF,EAAkC/B,+BAA+B,AAAE,CAAE,GACrL,IAAIkC,EAAc,EAAQ,OAC1BjG,OAAOC,cAAc,CAACC,EAAS,0BAA2B,CAAE6F,WAAY,GAAMC,IAAK,WAAc,OAAOC,EAAYJ,uBAAuB,AAAE,CAAE,E,wBCL/I7F,OAAOC,cAAc,CAACC,EAAS,aAAc,CAAEC,MAAO,EAAK,GAC3DD,EAAQ2F,uBAAuB,CAAG,KAAK,EACvC,IAAMK,EAAgC,EAAQ,OACxCC,EAAiC,EAAQ,OACzCC,EAAqC,EAAQ,OAC7CC,EAAwB,EAAQ,OAChCC,EAAkB,EAAQ,MAMhCpG,CAAAA,EAAQ2F,uBAAuB,CAL/B,SAAiCvF,CAAG,CAAEC,CAAa,EAC/C,MAAO,AAAC,GAAG6F,EAAmC1F,0BAA0B,AAAD,EAAG,AAAC,GAAG4F,EAAgBnE,OAAO,AAAD,EAAG,AAAC,GAAGkE,EAAsBzE,aAAa,AAAD,EAAG,AAAC,GAAGuE,EAA+B9C,sBAAsB,AAAD,EAAG,AAAC,GAAG6C,EAA8B9F,qBAAqB,AAAD,EAAGE,EAAKC,GAAgB,CACrRgD,0BAA2B,EAC/B,KACJ,C,wBCXA,IAAIgD,EAAU,EAAQ,MA2DtBC,CAAAA,EAAOtG,OAAO,CAzDd,SAAeuG,CAAE,CAAEC,CAAI,EAsDrB,OAAO,IAAIC,QArDX,SAAaC,CAAO,CAAEC,CAAM,EAC1B,IACIC,EADAxD,EAAUoD,GAAQ,CAAC,EAevB,SAASK,EAAKC,CAAG,EACfH,EAAOG,GAAO,AAAI1C,MAAM,WAC1B,CAEA,SAAS2C,EAAQD,CAAG,CAAEE,CAAG,EACvB,GAAIF,EAAID,IAAI,CAAE,CACZA,EAAKC,GACL,MACF,CAEKF,EAAGK,KAAK,CAACH,GAEH1D,EAAQ8D,OAAO,EACxB9D,EAAQ8D,OAAO,CAACJ,EAAKE,GAFrBL,EAAOC,EAAGO,SAAS,GAIvB,CA1BI,CAAE,eAAe/D,CAAM,GACzBA,CAAAA,EAAQgE,SAAS,CAAG,EAAG,EAGzBR,EAAKP,EAAQgB,SAAS,CAACjE,GAyCvBwD,EAAGU,OAAO,CAjBV,SAAoBN,CAAG,EACrB,IAAIO,EAEJ,GAAI,CACFA,EAAMhB,EAAGM,EAAMG,EACjB,CAAE,MAAOF,EAAK,CACZC,EAAQD,EAAKE,GACb,MACF,CAEAP,QAAQC,OAAO,CAACa,GACbC,IAAI,CAACd,GACLe,KAAK,CAAC,SAAiBX,CAAG,EACzBC,EAAQD,EAAKE,EACf,EACJ,EAGF,EAGF,C,mCC1CA,IAuVMU,EAjCWC,EAAMC,EAw+BLD,EAAME,EA9xCpBC,EAAiB,4BAOjBC,EAAW,EAAI,EAIfC,EAAU,qBACVC,EAAW,iBACXC,EAAU,mBACVC,EAAU,gBACVC,EAAW,iBACXC,EAAU,oBAEVC,EAAS,eACTC,EAAY,kBACZC,EAAY,kBACZC,EAAa,mBACbC,EAAY,kBACZC,EAAS,eACTC,EAAY,kBACZC,EAAY,kBACZC,EAAa,mBAEbC,EAAiB,uBACjBC,EAAc,oBAYdC,EAAe,mDACfC,EAAgB,QAChBC,EAAe,MACfC,EAAa,mGASbC,EAAe,WAGfC,EAAe,8BAGfC,EAAW,mBAGXC,EAAiB,CAAC,CACtBA,CAAAA,CAAc,CAjCG,wBAiCS,CAAGA,CAAc,CAhC1B,wBAgCsC,CACvDA,CAAc,CAhCA,qBAgCS,CAAGA,CAAc,CA/BzB,sBA+BmC,CAClDA,CAAc,CA/BC,sBA+BS,CAAGA,CAAc,CA9B1B,sBA8BoC,CACnDA,CAAc,CA9BQ,6BA8BS,CAAGA,CAAc,CA7BhC,uBA6B2C,CAC3DA,CAAc,CA7BE,uBA6BS,CAAG,GAC5BA,CAAc,CAACxB,EAAQ,CAAGwB,CAAc,CAACvB,EAAS,CAClDuB,CAAc,CAACT,EAAe,CAAGS,CAAc,CAACtB,EAAQ,CACxDsB,CAAc,CAACR,EAAY,CAAGQ,CAAc,CAACrB,EAAQ,CACrDqB,CAAc,CAACpB,EAAS,CAAGoB,CAAc,CAACnB,EAAQ,CAClDmB,CAAc,CAAClB,EAAO,CAAGkB,CAAc,CAACjB,EAAU,CAClDiB,CAAc,CAAChB,EAAU,CAAGgB,CAAc,CAACd,EAAU,CACrDc,CAAc,CAACb,EAAO,CAAGa,CAAc,CAACZ,EAAU,CAClDY,CAAc,CAACV,EAAW,CAAG,GAG7B,IAAIW,EAAa,AAAiB,UAAjB,OAAOC,QAAsBA,QAAUA,OAAO5J,MAAM,GAAKA,QAAU4J,OAGhFC,EAAW,AAAe,UAAf,OAAOC,MAAoBA,MAAQA,KAAK9J,MAAM,GAAKA,QAAU8J,KAGxEC,EAAOJ,GAAcE,GAAYG,SAAS,iBAG1CC,EAAc,AAA8B/J,GAAW,CAACA,EAAQgK,QAAQ,EAAIhK,EAG5EiK,EAAaF,GAA4CzD,GAAU,CAACA,EAAO0D,QAAQ,EAAI1D,EAMvF4D,EAAcC,AAHEF,GAAcA,EAAWjK,OAAO,GAAK+J,GAGtBN,EAAWW,OAAO,CAGjDC,EAAY,WACd,GAAI,CACF,OAAOH,GAAeA,EAAYI,OAAO,CAAC,OAC5C,CAAE,MAAOC,EAAG,CAAC,CACf,IAGIC,EAAmBH,GAAYA,EAASI,YAAY,CA+BxD,SAASC,EAASC,CAAK,CAAEC,CAAQ,EAK/B,IAJA,IAAIC,EAAQ,GACRC,EAASH,EAAQA,EAAMG,MAAM,CAAG,EAChCC,EAASC,MAAMF,GAEZ,EAAED,EAAQC,GACfC,CAAM,CAACF,EAAM,CAAGD,EAASD,CAAK,CAACE,EAAM,CAAEA,EAAOF,GAEhD,OAAOI,CACT,CAsGA,SAASE,EAAUtD,CAAI,EACrB,OAAO,SAAS1H,CAAK,EACnB,OAAO0H,EAAK1H,EACd,CACF,CAqBA,SAASiL,EAAajL,CAAK,EAGzB,IAAI8K,EAAS,GACb,GAAI9K,AAAS,MAATA,GAAiB,AAAyB,YAAzB,OAAOA,EAAMc,QAAQ,CACxC,GAAI,CACFgK,EAAS,CAAC,CAAE9K,CAAAA,EAAQ,EAAC,CACvB,CAAE,MAAOsK,EAAG,CAAC,CAEf,OAAOQ,CACT,CASA,SAASI,EAAWC,CAAG,EACrB,IAAIP,EAAQ,GACRE,EAASC,MAAMI,EAAIC,IAAI,EAK3B,OAHAD,EAAIE,OAAO,CAAC,SAASrL,CAAK,CAAEsL,CAAG,EAC7BR,CAAM,CAAC,EAAEF,EAAM,CAAG,CAACU,EAAKtL,EAAM,AAChC,GACO8K,CACT,CAuBA,SAASS,EAAWC,CAAG,EACrB,IAAIZ,EAAQ,GACRE,EAASC,MAAMS,EAAIJ,IAAI,EAK3B,OAHAI,EAAIH,OAAO,CAAC,SAASrL,CAAK,EACxB8K,CAAM,CAAC,EAAEF,EAAM,CAAG5K,CACpB,GACO8K,CACT,CAGA,IAAIW,EAAaV,MAAMW,SAAS,CAC5BC,EAAY9B,SAAS6B,SAAS,CAC9BE,EAAc/L,OAAO6L,SAAS,CAG9BG,EAAajC,CAAI,CAAC,qBAAqB,CAG3C,IAAIkC,EAEKrE,CADHA,EAAM,SAASsE,IAAI,CAACF,GAAcA,EAAWG,IAAI,EAAIH,EAAWG,IAAI,CAACC,QAAQ,EAAI,KACvE,iBAAmBxE,EAAO,GAItCyE,EAAeP,EAAU7K,QAAQ,CAGjCqL,GAAiBP,EAAYO,cAAc,CAO3CC,GAAiBR,EAAY9K,QAAQ,CAGrCuL,GAAaC,OAAO,IACtBJ,EAAaK,IAAI,CAACJ,IAAgBhL,OAAO,CAxTxB,sBAwTuC,QACvDA,OAAO,CAAC,yDAA0D,SAAW,KAI5EqL,GAAS5C,EAAK4C,MAAM,CACpBC,GAAa7C,EAAK6C,UAAU,CAC5BC,GAAuBd,EAAYc,oBAAoB,CACvDC,GAASlB,EAAWkB,MAAM,CAC1BC,GAAmBJ,GAASA,GAAOK,kBAAkB,CAAGC,KAAAA,EAG5D,IAAIC,IAhEarF,EAgEQ7H,OAAOmM,IAAI,CAhEbrE,EAgEe9H,OA/D7B,SAASmN,CAAG,EACjB,OAAOtF,EAAKC,EAAUqF,GACxB,GA8DEC,GAAYC,KAAKC,GAAG,CAGpBC,GAAWC,GAAUzD,EAAM,YAC3B0D,GAAMD,GAAUzD,EAAM,OACtBpD,GAAU6G,GAAUzD,EAAM,WAC1BrF,GAAM8I,GAAUzD,EAAM,OACtB2D,GAAUF,GAAUzD,EAAM,WAC1B4D,GAAeH,GAAUxN,OAAQ,UAGjC4N,GAAqBC,GAASN,IAC9BO,GAAgBD,GAASJ,IACzBM,GAAoBF,GAASlH,IAC7BqH,GAAgBH,GAASnJ,IACzBuJ,GAAoBJ,GAASH,IAG7BQ,GAAcvB,GAASA,GAAOd,SAAS,CAAGoB,KAAAA,EAC1CkB,GAAgBD,GAAcA,GAAYE,OAAO,CAAGnB,KAAAA,EACpDoB,GAAiBH,GAAcA,GAAYjN,QAAQ,CAAGgM,KAAAA,EAS1D,SAASqB,GAAK7I,CAAO,EACnB,IAAIsF,EAAQ,GACRC,EAASvF,EAAUA,EAAQuF,MAAM,CAAG,EAGxC,IADA,IAAI,CAACuD,KAAK,GACH,EAAExD,EAAQC,GAAQ,CACvB,IAAIwD,EAAQ/I,CAAO,CAACsF,EAAM,CAC1B,IAAI,CAACY,GAAG,CAAC6C,CAAK,CAAC,EAAE,CAAEA,CAAK,CAAC,EAAE,CAC7B,CACF,CAyFA,SAASC,GAAUhJ,CAAO,EACxB,IAAIsF,EAAQ,GACRC,EAASvF,EAAUA,EAAQuF,MAAM,CAAG,EAGxC,IADA,IAAI,CAACuD,KAAK,GACH,EAAExD,EAAQC,GAAQ,CACvB,IAAIwD,EAAQ/I,CAAO,CAACsF,EAAM,CAC1B,IAAI,CAACY,GAAG,CAAC6C,CAAK,CAAC,EAAE,CAAEA,CAAK,CAAC,EAAE,CAC7B,CACF,CAtBAF,GAAKzC,SAAS,CAAC0C,KAAK,CAnEpB,WACE,IAAI,CAACG,QAAQ,CAAGf,GAAeA,GAAa,MAAQ,CAAC,CACvD,EAkEAW,GAAKzC,SAAS,CAAC,MAAS,CAtDxB,SAAoBJ,CAAG,EACrB,OAAO,IAAI,CAAC7F,GAAG,CAAC6F,IAAQ,OAAO,IAAI,CAACiD,QAAQ,CAACjD,EAAI,AACnD,EAqDA6C,GAAKzC,SAAS,CAAC7F,GAAG,CA1ClB,SAAiByF,CAAG,EAClB,IAAIkD,EAAO,IAAI,CAACD,QAAQ,CACxB,GAAIf,GAAc,CAChB,IAAI1C,EAAS0D,CAAI,CAAClD,EAAI,CACtB,OAAOR,IAAWjD,EAAiBiF,KAAAA,EAAYhC,CACjD,CACA,OAAOqB,GAAeI,IAAI,CAACiC,EAAMlD,GAAOkD,CAAI,CAAClD,EAAI,CAAGwB,KAAAA,CACtD,EAoCAqB,GAAKzC,SAAS,CAACjG,GAAG,CAzBlB,SAAiB6F,CAAG,EAClB,IAAIkD,EAAO,IAAI,CAACD,QAAQ,CACxB,OAAOf,GAAegB,AAAc1B,KAAAA,IAAd0B,CAAI,CAAClD,EAAI,CAAiBa,GAAeI,IAAI,CAACiC,EAAMlD,EAC5E,EAuBA6C,GAAKzC,SAAS,CAACF,GAAG,CAXlB,SAAiBF,CAAG,CAAEtL,CAAK,EAGzB,OADAwO,AADW,IAAI,CAACD,QAAQ,AACpB,CAACjD,EAAI,CAAG,AAACkC,IAAgBxN,AAAU8M,KAAAA,IAAV9M,EAAuB6H,EAAiB7H,EAC9D,IAAI,AACb,EAgIA,SAASyO,GAASnJ,CAAO,EACvB,IAAIsF,EAAQ,GACRC,EAASvF,EAAUA,EAAQuF,MAAM,CAAG,EAGxC,IADA,IAAI,CAACuD,KAAK,GACH,EAAExD,EAAQC,GAAQ,CACvB,IAAIwD,EAAQ/I,CAAO,CAACsF,EAAM,CAC1B,IAAI,CAACY,GAAG,CAAC6C,CAAK,CAAC,EAAE,CAAEA,CAAK,CAAC,EAAE,CAC7B,CACF,CAtBAC,GAAU5C,SAAS,CAAC0C,KAAK,CAjFzB,WACE,IAAI,CAACG,QAAQ,CAAG,EAAE,AACpB,EAgFAD,GAAU5C,SAAS,CAAC,MAAS,CArE7B,SAAyBJ,CAAG,EAC1B,IAAIkD,EAAO,IAAI,CAACD,QAAQ,CACpB3D,EAAQ8D,GAAaF,EAAMlD,SAE/B,CAAIV,CAAAA,EAAQ,KAIRA,GADY4D,EAAK3D,MAAM,CAAG,EAE5B2D,EAAKG,GAAG,GAERhC,GAAOJ,IAAI,CAACiC,EAAM5D,EAAO,GAEpB,GACT,EAwDA0D,GAAU5C,SAAS,CAAC7F,GAAG,CA7CvB,SAAsByF,CAAG,EACvB,IAAIkD,EAAO,IAAI,CAACD,QAAQ,CACpB3D,EAAQ8D,GAAaF,EAAMlD,GAE/B,OAAOV,EAAQ,EAAIkC,KAAAA,EAAY0B,CAAI,CAAC5D,EAAM,CAAC,EAAE,AAC/C,EAyCA0D,GAAU5C,SAAS,CAACjG,GAAG,CA9BvB,SAAsB6F,CAAG,EACvB,OAAOoD,GAAa,IAAI,CAACH,QAAQ,CAAEjD,GAAO,EAC5C,EA6BAgD,GAAU5C,SAAS,CAACF,GAAG,CAjBvB,SAAsBF,CAAG,CAAEtL,CAAK,EAC9B,IAAIwO,EAAO,IAAI,CAACD,QAAQ,CACpB3D,EAAQ8D,GAAaF,EAAMlD,GAO/B,OALIV,EAAQ,EACV4D,EAAKI,IAAI,CAAC,CAACtD,EAAKtL,EAAM,EAEtBwO,CAAI,CAAC5D,EAAM,CAAC,EAAE,CAAG5K,EAEZ,IAAI,AACb,EA+GA,SAAS6O,GAAStL,CAAM,EACtB,IAAIqH,EAAQ,GACRC,EAAStH,EAASA,EAAOsH,MAAM,CAAG,EAGtC,IADA,IAAI,CAAC0D,QAAQ,CAAG,IAAIE,GACb,EAAE7D,EAAQC,GACf,IAAI,CAAC3F,GAAG,CAAC3B,CAAM,CAACqH,EAAM,CAE1B,CAtBA6D,GAAS/C,SAAS,CAAC0C,KAAK,CA/DxB,WACE,IAAI,CAACG,QAAQ,CAAG,CACd,KAAQ,IAAIJ,GACZ,IAAO,GAAKb,CAAAA,IAAOgB,EAAQ,EAC3B,OAAU,IAAIH,EAChB,CACF,EA0DAM,GAAS/C,SAAS,CAAC,MAAS,CA/C5B,SAAwBJ,CAAG,EACzB,OAAOwD,GAAW,IAAI,CAAExD,GAAK,MAAS,CAACA,EACzC,EA8CAmD,GAAS/C,SAAS,CAAC7F,GAAG,CAnCtB,SAAqByF,CAAG,EACtB,OAAOwD,GAAW,IAAI,CAAExD,GAAKzF,GAAG,CAACyF,EACnC,EAkCAmD,GAAS/C,SAAS,CAACjG,GAAG,CAvBtB,SAAqB6F,CAAG,EACtB,OAAOwD,GAAW,IAAI,CAAExD,GAAK7F,GAAG,CAAC6F,EACnC,EAsBAmD,GAAS/C,SAAS,CAACF,GAAG,CAVtB,SAAqBF,CAAG,CAAEtL,CAAK,EAE7B,OADA8O,GAAW,IAAI,CAAExD,GAAKE,GAAG,CAACF,EAAKtL,GACxB,IAAI,AACb,EAkEA,SAAS+O,GAAMzJ,CAAO,EACpB,IAAI,CAACiJ,QAAQ,CAAG,IAAID,GAAUhJ,EAChC,CAZAuJ,GAASnD,SAAS,CAACxG,GAAG,CAAG2J,GAASnD,SAAS,CAACkD,IAAI,CAnBhD,SAAqB5O,CAAK,EAExB,OADA,IAAI,CAACuO,QAAQ,CAAC/C,GAAG,CAACxL,EAAO6H,GAClB,IAAI,AACb,EAiBAgH,GAASnD,SAAS,CAACjG,GAAG,CANtB,SAAqBzF,CAAK,EACxB,OAAO,IAAI,CAACuO,QAAQ,CAAC9I,GAAG,CAACzF,EAC3B,CA4FA+O,CAAAA,GAAMrD,SAAS,CAAC0C,KAAK,CApErB,WACE,IAAI,CAACG,QAAQ,CAAG,IAAID,EACtB,EAmEAS,GAAMrD,SAAS,CAAC,MAAS,CAxDzB,SAAqBJ,CAAG,EACtB,OAAO,IAAI,CAACiD,QAAQ,CAAC,MAAS,CAACjD,EACjC,EAuDAyD,GAAMrD,SAAS,CAAC7F,GAAG,CA5CnB,SAAkByF,CAAG,EACnB,OAAO,IAAI,CAACiD,QAAQ,CAAC1I,GAAG,CAACyF,EAC3B,EA2CAyD,GAAMrD,SAAS,CAACjG,GAAG,CAhCnB,SAAkB6F,CAAG,EACnB,OAAO,IAAI,CAACiD,QAAQ,CAAC9I,GAAG,CAAC6F,EAC3B,EA+BAyD,GAAMrD,SAAS,CAACF,GAAG,CAnBnB,SAAkBF,CAAG,CAAEtL,CAAK,EAC1B,IAAIgP,EAAQ,IAAI,CAACT,QAAQ,CACzB,GAAIS,aAAiBV,GAAW,CAC9B,IAAIW,EAAQD,EAAMT,QAAQ,CAC1B,GAAI,CAACjB,IAAQ2B,EAAMpE,MAAM,CAAGqE,IAE1B,OADAD,EAAML,IAAI,CAAC,CAACtD,EAAKtL,EAAM,EAChB,IAAI,CAEbgP,EAAQ,IAAI,CAACT,QAAQ,CAAG,IAAIE,GAASQ,EACvC,CAEA,OADAD,EAAMxD,GAAG,CAACF,EAAKtL,GACR,IAAI,AACb,EA4CA,SAAS0O,GAAahE,CAAK,CAAEY,CAAG,EAE9B,IADA,IAAIT,EAASH,EAAMG,MAAM,CAClBA,KACL,GAAIsE,GAAGzE,CAAK,CAACG,EAAO,CAAC,EAAE,CAAES,GACvB,OAAOT,EAGX,OAAO,EACT,CAUA,IAAIuE,GAAWC,AAyiBf,SAAwBC,CAAQ,CAAEC,CAAS,EACzC,OAAO,SAASC,CAAU,CAAE7E,CAAQ,EAClC,GAAI6E,AAAc,MAAdA,EACF,OAAOA,EAET,GAAI,CAACC,GAAYD,GACf,OAAOF,EAASE,EAAY7E,GAM9B,IAJA,IAAIE,EAAS2E,EAAW3E,MAAM,CAC1BD,EAAQ2E,EAAY1E,EAAS,GAC7B6E,EAAW7P,OAAO2P,GAEdD,CAAAA,EAAY3E,IAAU,EAAEA,EAAQC,CAAK,GACvCF,AAA+C,KAA/CA,EAAS+E,CAAQ,CAAC9E,EAAM,CAAEA,EAAO8E,KAIvC,OAAOF,CACT,CACF,EAngBA,SAAoBG,CAAM,CAAEhF,CAAQ,EAClC,OAAOgF,GAAUC,GAAQD,EAAQhF,EAAUqB,GAC7C,GAZI4D,GAAUC,AAshBd,SAAuBN,CAAS,EAC9B,OAAO,SAASI,CAAM,CAAEhF,CAAQ,CAAEmF,CAAQ,EAMxC,IALA,IAAIlF,EAAQ,GACR8E,EAAW7P,OAAO8P,GAClBI,EAAQD,EAASH,GACjB9E,EAASkF,EAAMlF,MAAM,CAElBA,KAAU,CACf,IAAIS,EAAMyE,CAAK,CAACR,EAAY1E,EAAS,EAAED,EAAM,CAC7C,GAAID,AAA2C,KAA3CA,EAAS+E,CAAQ,CAACpE,EAAI,CAAEA,EAAKoE,GAC/B,KAEJ,CACA,OAAOC,CACT,CACF,IA/gBA,SAASK,GAAQL,CAAM,CAAEM,CAAI,EAC3BA,EAAOC,GAAMD,EAAMN,GAAU,CAACM,EAAK,CAAGE,AAwYxC,SAAkBnQ,CAAK,EACrB,OAAOoQ,GAAQpQ,GAASA,EAAQqQ,GAAarQ,EAC/C,EA1YiDiQ,GAK/C,IAHA,IAAIrF,EAAQ,EACRC,EAASoF,EAAKpF,MAAM,CAEjB8E,AAAU,MAAVA,GAAkB/E,EAAQC,GAC/B8E,EAASA,CAAM,CAACW,GAAML,CAAI,CAACrF,IAAQ,EAAE,CAEvC,OAAO,AAACA,GAASA,GAASC,EAAU8E,EAAS7C,KAAAA,CAC/C,CAqBA,SAASyD,GAAUZ,CAAM,CAAErE,CAAG,EAC5B,OAAOqE,AAAU,MAAVA,GAAkBrE,KAAOzL,OAAO8P,EACzC,CAiBA,SAASa,GAAYxQ,CAAK,CAAEyQ,CAAK,CAAEC,CAAU,CAAEC,CAAO,CAAEC,CAAK,SAC3D,AAAI5Q,IAAUyQ,IAGVzQ,AAAS,MAATA,GAAiByQ,AAAS,MAATA,GAAkB,CAACI,GAAS7Q,IAAW8Q,GAAaL,EAAK,EAGvEM,AAkBT,SAAyBpB,CAAM,CAAEc,CAAK,CAAEO,CAAS,CAAEN,CAAU,CAAEC,CAAO,CAAEC,CAAK,EAC3E,IAAIK,EAAWb,GAAQT,GACnBuB,EAAWd,GAAQK,GACnBU,EAASnJ,EACToJ,EAASpJ,CAET,EAACiJ,GAEHE,CAAAA,EAASA,AADTA,CAAAA,EAASE,GAAO1B,EAAM,GACH5H,EAAUQ,EAAY4I,CAAK,EAE5C,CAACD,GAEHE,CAAAA,EAASA,AADTA,CAAAA,EAASC,GAAOZ,EAAK,GACF1I,EAAUQ,EAAY6I,CAAK,EAEhD,IAAIE,EAAWH,GAAU5I,GAAa,CAAC0C,EAAa0E,GAChD4B,EAAWH,GAAU7I,GAAa,CAAC0C,EAAawF,GAChDe,EAAYL,GAAUC,EAE1B,GAAII,GAAa,CAACF,EAEhB,OADAV,GAAUA,CAAAA,EAAQ,IAAI7B,EAAI,EACnB,AAACkC,GAAYzG,GAAamF,GAC7B8B,GAAY9B,EAAQc,EAAOO,EAAWN,EAAYC,EAASC,GAC3Dc,AA6gBR,SAAoB/B,CAAM,CAAEc,CAAK,CAAEkB,CAAG,CAAEX,CAAS,CAAEN,CAAU,CAAEC,CAAO,CAAEC,CAAK,EAC3E,OAAQe,GACN,KAAK5I,EACH,GAAI,AAAC4G,EAAOiC,UAAU,EAAInB,EAAMmB,UAAU,EACrCjC,EAAOkC,UAAU,EAAIpB,EAAMoB,UAAU,CACxC,MAEFlC,EAASA,EAAOmC,MAAM,CACtBrB,EAAQA,EAAMqB,MAAM,AAEtB,MAAKhJ,EACH,GAAI,AAAC6G,EAAOiC,UAAU,EAAInB,EAAMmB,UAAU,EACtC,CAACZ,EAAU,IAAIvE,GAAWkD,GAAS,IAAIlD,GAAWgE,IACpD,MAEF,MAAO,EAET,MAAKxI,EACL,KAAKC,EACL,KAAKI,EAGH,OAAO6G,GAAG,CAACQ,EAAQ,CAACc,EAEtB,MAAKtI,EACH,OAAOwH,EAAO9K,IAAI,EAAI4L,EAAM5L,IAAI,EAAI8K,EAAOoC,OAAO,EAAItB,EAAMsB,OAAO,AAErE,MAAKtJ,EACL,KAAKE,EAIH,OAAOgH,GAAWc,EAAQ,EAE5B,MAAKpI,EACH,IAAI2J,EAAU9G,CAEhB,MAAKxC,EACH,IAAIuJ,EAAYtB,AArlDK,EAqlDLA,EAGhB,GAFAqB,GAAYA,CAAAA,EAAUzG,CAAS,EAE3BoE,EAAOvE,IAAI,EAAIqF,EAAMrF,IAAI,EAAI,CAAC6G,EAChC,MAGF,IAAIC,EAAUtB,EAAM/K,GAAG,CAAC8J,GACxB,GAAIuC,EACF,OAAOA,GAAWzB,EAEpBE,GAjmDuB,EAomDvBC,EAAMpF,GAAG,CAACmE,EAAQc,GAClB,IAAI3F,EAAS2G,GAAYO,EAAQrC,GAASqC,EAAQvB,GAAQO,EAAWN,EAAYC,EAASC,GAE1F,OADAA,EAAM,MAAS,CAACjB,GACT7E,CAET,MAAKlC,EACH,GAAIoF,GACF,OAAOA,GAAczB,IAAI,CAACoD,IAAW3B,GAAczB,IAAI,CAACkE,EAE9D,CACA,MAAO,EACT,EA5kBmBd,EAAQc,EAAOU,EAAQH,EAAWN,EAAYC,EAASC,GAExE,GAAI,CAAED,CAAAA,AApiCmB,EAoiCnBA,CAA6B,EAAI,CACrC,IAAIwB,EAAeb,GAAYnF,GAAeI,IAAI,CAACoD,EAAQ,eACvDyC,EAAeb,GAAYpF,GAAeI,IAAI,CAACkE,EAAO,eAE1D,GAAI0B,GAAgBC,EAAc,CAChC,IAAIC,EAAeF,EAAexC,EAAO3P,KAAK,GAAK2P,EAC/C2C,EAAeF,EAAe3B,EAAMzQ,KAAK,GAAKyQ,EAGlD,OADAG,GAAUA,CAAAA,EAAQ,IAAI7B,EAAI,EACnBiC,EAAUqB,EAAcC,EAAc5B,EAAYC,EAASC,EACpE,CACF,OACA,EAAKY,IAGLZ,GAAUA,CAAAA,EAAQ,IAAI7B,EAAI,EACnBwD,AA0kBT,SAAsB5C,CAAM,CAAEc,CAAK,CAAEO,CAAS,CAAEN,CAAU,CAAEC,CAAO,CAAEC,CAAK,EACxE,IAAIqB,EAAYtB,AA/nDS,EA+nDTA,EACZ6B,EAAWxG,GAAK2D,GAChB8C,EAAYD,EAAS3H,MAAM,CAI/B,GAAI4H,GAFYC,AADD1G,GAAKyE,GACK5F,MAAM,EAED,CAACoH,EAC7B,MAAO,GAGT,IADA,IAAIrH,EAAQ6H,EACL7H,KAAS,CACd,IAAIU,EAAMkH,CAAQ,CAAC5H,EAAM,CACzB,GAAI,CAAEqH,CAAAA,EAAY3G,KAAOmF,EAAQtE,GAAeI,IAAI,CAACkE,EAAOnF,EAAG,EAC7D,MAAO,EAEX,CAEA,IAAI4G,EAAUtB,EAAM/K,GAAG,CAAC8J,GACxB,GAAIuC,GAAWtB,EAAM/K,GAAG,CAAC4K,GACvB,OAAOyB,GAAWzB,EAEpB,IAAI3F,EAAS,GACb8F,EAAMpF,GAAG,CAACmE,EAAQc,GAClBG,EAAMpF,GAAG,CAACiF,EAAOd,GAGjB,IADA,IAAIgD,EAAWV,EACR,EAAErH,EAAQ6H,GAAW,CAE1B,IAAIG,EAAWjD,CAAM,CADrBrE,EAAMkH,CAAQ,CAAC5H,EAAM,CACK,CACtBiI,EAAWpC,CAAK,CAACnF,EAAI,CAEzB,GAAIoF,EACF,IAAIoC,EAAWb,EACXvB,EAAWmC,EAAUD,EAAUtH,EAAKmF,EAAOd,EAAQiB,GACnDF,EAAWkC,EAAUC,EAAUvH,EAAKqE,EAAQc,EAAOG,GAGzD,GAAI,CAAEkC,CAAAA,AAAahG,KAAAA,IAAbgG,EACGF,IAAaC,GAAY7B,EAAU4B,EAAUC,EAAUnC,EAAYC,EAASC,GAC7EkC,CAAO,EACR,CACLhI,EAAS,GACT,KACF,CACA6H,GAAaA,CAAAA,EAAWrH,AAAO,eAAPA,CAAmB,CAC7C,CACA,GAAIR,GAAU,CAAC6H,EAAU,CACvB,IAAII,EAAUpD,EAAOqD,WAAW,CAC5BC,EAAUxC,EAAMuC,WAAW,CAG3BD,GAAWE,GACV,gBAAiBtD,GAAU,gBAAiBc,GAC7C,CAAE,CAAkB,YAAlB,OAAOsC,GAAyBA,aAAmBA,GACnD,AAAkB,YAAlB,OAAOE,GAAyBA,aAAmBA,CAAM,GAC7DnI,CAAAA,EAAS,EAAI,CAEjB,CAGA,OAFA8F,EAAM,MAAS,CAACjB,GAChBiB,EAAM,MAAS,CAACH,GACT3F,CACT,EAxoBsB6E,EAAQc,EAAOO,EAAWN,EAAYC,EAASC,GACrE,EA3DyB5Q,EAAOyQ,EAAOD,GAAaE,EAAYC,EAASC,GAF9D5Q,GAAUA,GAASyQ,GAAUA,EAGxC,CAqJA,SAASyC,GAAalT,CAAK,QAGzB,AAAI,AAAgB,YAAhB,OAAOA,EACFA,EAELA,AAAS,MAATA,EACKmT,GAEL,AAAgB,UAAhB,OAAOnT,EACFoQ,GAAQpQ,GACXoT,AAqER,SAA6BnD,CAAI,CAAEoD,CAAQ,SACzC,AAAInD,GAAMD,IAASqD,GAAmBD,GAC7BE,GAAwBjD,GAAML,GAAOoD,GAEvC,SAAS1D,CAAM,EACpB,IAAIiD,EAAW/M,AA2tCnB,SAAa8J,CAAM,CAAEM,CAAI,CAAEuD,CAAY,EACrC,IAAI1I,EAAS6E,AAAU,MAAVA,EAAiB7C,KAAAA,EAAYkD,GAAQL,EAAQM,GAC1D,OAAOnF,AAAWgC,KAAAA,IAAXhC,EAAuB0I,EAAe1I,CAC/C,EA9tCuB6E,EAAQM,GAC3B,OAAO,AAAC2C,AAAa9F,KAAAA,IAAb8F,GAA0BA,IAAaS,EAC3CI,AAwvCR,SAAe9D,CAAM,CAAEM,CAAI,EACzB,OAAON,AAAU,MAAVA,GAAkB+D,AAvsB3B,SAAiB/D,CAAM,CAAEM,CAAI,CAAE0D,CAAO,EACpC1D,EAAOC,GAAMD,EAAMN,GAAU,CAACM,EAAK,CA/c5BG,GADSpQ,EAgd+BiQ,GA/cvBjQ,EAAQqQ,GAAarQ,GAqd7C,IAJA,IAldgBA,EAkdZ8K,EACAF,EAAQ,GACRC,EAASoF,EAAKpF,MAAM,CAEjB,EAAED,EAAQC,GAAQ,CACvB,IAAIS,EAAMgF,GAAML,CAAI,CAACrF,EAAM,EAC3B,GAAI,CAAEE,CAAAA,EAAS6E,AAAU,MAAVA,GAAkBgE,EAAQhE,EAAQrE,EAAG,EAClD,MAEFqE,EAASA,CAAM,CAACrE,EAAI,AACtB,CACA,GAAIR,EACF,OAAOA,EAET,IAAID,EAAS8E,EAASA,EAAO9E,MAAM,CAAG,EACtC,MAAO,CAAC,CAACA,GAAU+I,GAAS/I,IAAWgJ,GAAQvI,EAAKT,IACjDuF,CAAAA,GAAQT,IAAWmE,GAAYnE,EAAM,CAC1C,EAmrBmCA,EAAQM,EAAMM,GACjD,EA1vCcZ,EAAQM,GACdO,GAAY6C,EAAUT,EAAU9F,KAAAA,EAAWiH,EACjD,CACF,EA/E4B/T,CAAK,CAAC,EAAE,CAAEA,CAAK,CAAC,EAAE,EACtCgU,AAkDR,SAAqBC,CAAM,EACzB,IAAIC,EAAYC,AAqgBlB,SAAsBxE,CAAM,EAI1B,IAHA,IAAI7E,EAASkB,GAAK2D,GACd9E,EAASC,EAAOD,MAAM,CAEnBA,KAAU,CACf,IAAIS,EAAMR,CAAM,CAACD,EAAO,CACpB7K,EAAQ2P,CAAM,CAACrE,EAAI,AAEvBR,CAAAA,CAAM,CAACD,EAAO,CAAG,CAACS,EAAKtL,EAAOsT,GAAmBtT,GAAO,AAC1D,CACA,OAAO8K,CACT,EAhhB+BmJ,UAC7B,AAAIC,AAAoB,GAApBA,EAAUrJ,MAAM,EAASqJ,CAAS,CAAC,EAAE,CAAC,EAAE,CACnCX,GAAwBW,CAAS,CAAC,EAAE,CAAC,EAAE,CAAEA,CAAS,CAAC,EAAE,CAAC,EAAE,EAE1D,SAASvE,CAAM,EACpB,OAAOA,IAAWsE,GAAUG,AAnJhC,SAAqBzE,CAAM,CAAEsE,CAAM,CAAEC,CAAS,CAAExD,CAAU,EACxD,IAAI9F,EAAQsJ,EAAUrJ,MAAM,CACxBA,EAASD,EACTyJ,EAAe,KAEnB,GAAI1E,AAAU,MAAVA,EACF,MAAO,CAAC9E,EAGV,IADA8E,EAAS9P,OAAO8P,GACT/E,KAAS,CACd,IAAI4D,EAAO0F,CAAS,CAACtJ,EAAM,CAC3B,GAAI,AAACyJ,GAAgB7F,CAAI,CAAC,EAAE,CACpBA,CAAI,CAAC,EAAE,GAAKmB,CAAM,CAACnB,CAAI,CAAC,EAAE,CAAC,CAC3B,CAAEA,CAAAA,CAAI,CAAC,EAAE,GAAImB,CAAK,EAExB,MAAO,EAEX,CACA,KAAO,EAAE/E,EAAQC,GAAQ,CAEvB,IAAIS,EAAMkD,AADVA,CAAAA,EAAO0F,CAAS,CAACtJ,EAAM,AAAD,CACR,CAAC,EAAE,CACbgI,EAAWjD,CAAM,CAACrE,EAAI,CACtB+H,EAAW7E,CAAI,CAAC,EAAE,CAEtB,GAAI6F,GAAgB7F,CAAI,CAAC,EAAE,CACzB,IAAIoE,AAAa9F,KAAAA,IAAb8F,GAA0B,CAAEtH,CAAAA,KAAOqE,CAAK,EAC1C,MAAO,EACT,KACK,CACL,IAAIiB,EAAQ,IAAI7B,GAChB,GAAI2B,EACF,IAAI5F,EAAS4F,EAAWkC,EAAUS,EAAU/H,EAAKqE,EAAQsE,EAAQrD,GAEnE,GAAI,CAAE9F,CAAAA,AAAWgC,KAAAA,IAAXhC,EACE0F,GAAY6C,EAAUT,EAAUlC,EAAYqD,EAA+CnD,GAC3F9F,CAAK,EAEX,MAAO,EAEX,CACF,CACA,MAAO,EACT,EAyG4C6E,EAAQsE,EAAQC,EAC1D,CACF,EA1DoBlU,GAEXsU,AA+4CT,SAAkBrE,CAAI,MA72EA3E,EA4kCI2E,EAkyCxB,OAAOC,GAAMD,IA92EO3E,EA82EcgF,GAAML,GA72EjC,SAASN,CAAM,EACpB,OAAOA,AAAU,MAAVA,EAAiB7C,KAAAA,EAAY6C,CAAM,CAACrE,EAAI,AACjD,IAykCwB2E,EAkyC0CA,EAjyC3D,SAASN,CAAM,EACpB,OAAOK,GAAQL,EAAQM,EACzB,EAgyCF,EAj5CkBjQ,EAClB,CA2KA,SAASmQ,GAASnQ,CAAK,EACrB,OAAOoQ,GAAQpQ,GAASA,EAAQqQ,GAAarQ,EAC/C,CAoJA,SAASyR,GAAY/G,CAAK,CAAE+F,CAAK,CAAEO,CAAS,CAAEN,CAAU,CAAEC,CAAO,CAAEC,CAAK,EACtE,IAAIqB,EAAYtB,AAj+CS,EAi+CTA,EACZ4D,EAAY7J,EAAMG,MAAM,CACxB2J,EAAY/D,EAAM5F,MAAM,CAE5B,GAAI0J,GAAaC,GAAa,CAAEvC,CAAAA,GAAauC,EAAYD,CAAQ,EAC/D,MAAO,GAGT,IAAIrC,EAAUtB,EAAM/K,GAAG,CAAC6E,GACxB,GAAIwH,GAAWtB,EAAM/K,GAAG,CAAC4K,GACvB,OAAOyB,GAAWzB,EAEpB,IAAI7F,EAAQ,GACRE,EAAS,GACT2J,EAAO,AAAC9D,AAh/Ce,EAg/CfA,EAAoC,IAAI9B,GAAW/B,KAAAA,EAM/D,IAJA8D,EAAMpF,GAAG,CAACd,EAAO+F,GACjBG,EAAMpF,GAAG,CAACiF,EAAO/F,GAGV,EAAEE,EAAQ2J,GAAW,CAC1B,IAAIG,EAAWhK,CAAK,CAACE,EAAM,CACvBiI,EAAWpC,CAAK,CAAC7F,EAAM,CAE3B,GAAI8F,EACF,IAAIoC,EAAWb,EACXvB,EAAWmC,EAAU6B,EAAU9J,EAAO6F,EAAO/F,EAAOkG,GACpDF,EAAWgE,EAAU7B,EAAUjI,EAAOF,EAAO+F,EAAOG,GAE1D,GAAIkC,AAAahG,KAAAA,IAAbgG,EAAwB,CAC1B,GAAIA,EACF,SAEFhI,EAAS,GACT,KACF,CAEA,GAAI2J,EACF,IAAI,CAACE,AA11CX,SAAmBjK,CAAK,CAAEkK,CAAS,EAIjC,IAHA,IAAIhK,EAAQ,GACRC,EAASH,EAAQA,EAAMG,MAAM,CAAG,EAE7B,EAAED,EAAQC,GACf,GAAI+J,EAAUlK,CAAK,CAACE,EAAM,CAAEA,EAAOF,GACjC,MAAO,GAGX,MAAO,EACT,EAg1CqB+F,EAAO,SAASoC,CAAQ,CAAEgC,CAAQ,EAC3C,GAAI,CAACJ,EAAKhP,GAAG,CAACoP,IACTH,CAAAA,IAAa7B,GAAY7B,EAAU0D,EAAU7B,EAAUnC,EAAYC,EAASC,EAAK,EACpF,OAAO6D,EAAKvP,GAAG,CAAC2P,EAEpB,GAAI,CACN/J,EAAS,GACT,KACF,OACK,GAAI,CACL4J,CAAAA,IAAa7B,GACX7B,EAAU0D,EAAU7B,EAAUnC,EAAYC,EAASC,EAAK,EACzD,CACL9F,EAAS,GACT,KACF,CACF,CAGA,OAFA8F,EAAM,MAAS,CAAClG,GAChBkG,EAAM,MAAS,CAACH,GACT3F,CACT,CA2KA,SAASgE,GAAW3D,CAAG,CAAEG,CAAG,EAC1B,IAAIkD,EAAOrD,EAAIoD,QAAQ,CACvB,OAAOuG,AAsLT,SAAmB9U,CAAK,EACtB,IAAI+U,EAAO,OAAO/U,EAClB,MAAO,AAAC+U,AAAQ,UAARA,GAAoBA,AAAQ,UAARA,GAAoBA,AAAQ,UAARA,GAAoBA,AAAQ,WAARA,EAC/D/U,AAAU,cAAVA,EACAA,AAAU,OAAVA,CACP,EA3LmBsL,GACbkD,CAAI,CAAC,AAAc,UAAd,OAAOlD,EAAkB,SAAW,OAAO,CAChDkD,EAAKrD,GAAG,AACd,CA8BA,SAASkC,GAAUsC,CAAM,CAAErE,CAAG,EAC5B,IAx+CgBqE,EAAQrE,EAm3BJtL,EAqnBhBA,GAx+CY2P,EAw+CKA,EAx+CGrE,EAw+CKA,EAv+CtBqE,AAAU,MAAVA,EAAiB7C,KAAAA,EAAY6C,CAAM,CAACrE,EAAI,EAw+C/C,MAAO0J,AArnBP,CAAI,EAACnE,GADe7Q,EAsnBAA,IArnBIiV,AAsxB1B,SAAkBvN,CAAI,EACpB,MAAO,CAAC,CAACoE,GAAeA,KAAcpE,CACxC,EAxxBmC1H,EAAK,GAI/BkV,AADO,CAACC,GAAWnV,IAAUiL,EAAajL,GAAUqM,GAAahD,CAAW,EACpE+L,IAAI,CAAC1H,GAAS1N,IAinBAA,EAAQ8M,KAAAA,CACvC,CASA,IAAIuE,GAjyBJ,SAAoBrR,CAAK,EACvB,OAAOoM,GAAeG,IAAI,CAACvM,EAC7B,EAmyBI,CAACoN,IAAYiE,GAAO,IAAIjE,GAAS,IAAIiI,YAAY,MAAQtM,GACxDuE,IAAO+D,GAAO,IAAI/D,KAAQjF,GAC1B7B,IAAW6K,GAAO7K,GAAQC,OAAO,KAAO+B,GACxCjE,IAAO8M,GAAO,IAAI9M,KAAQmE,GAC1B6E,IAAW8D,GAAO,IAAI9D,KAAY1E,CAAU,GAC/CwI,CAAAA,GAAS,SAASrR,CAAK,EACrB,IAAI8K,EAASsB,GAAeG,IAAI,CAACvM,GAC7BsV,EAAOxK,GAAUvC,EAAYvI,EAAMgT,WAAW,CAAGlG,KAAAA,EACjDyI,EAAaD,EAAO5H,GAAS4H,GAAQxI,KAAAA,EAEzC,GAAIyI,EACF,OAAQA,GACN,KAAK9H,GAAoB,OAAO1E,CAChC,MAAK4E,GAAe,OAAOtF,CAC3B,MAAKuF,GAAmB,OAAOpF,CAC/B,MAAKqF,GAAe,OAAOnF,CAC3B,MAAKoF,GAAmB,OAAOjF,CACjC,CAEF,OAAOiC,CACT,GAyCF,SAAS0K,GAAcxV,CAAK,EAC1B,OAAOoQ,GAAQpQ,IAAU8T,GAAY9T,IACnC,CAAC,CAAE4M,CAAAA,IAAoB5M,GAASA,CAAK,CAAC4M,GAAiB,AAAD,CAC1D,CAUA,SAASiH,GAAQ7T,CAAK,CAAE6K,CAAM,EAE5B,MAAO,CAAC,CADRA,CAAAA,EAASA,AAAU,MAAVA,EAh0DY,iBAg0DwBA,CAAK,GAE/C,CAAgB,UAAhB,OAAO7K,GAAqBsJ,EAAS8L,IAAI,CAACpV,EAAK,GAC/CA,EAAQ,IAAMA,EAAQ,GAAK,GAAKA,EAAQ6K,CAC7C,CAYA,SAAS4K,GAAezV,CAAK,CAAE4K,CAAK,CAAE+E,CAAM,EAC1C,GAAI,CAACkB,GAASlB,GACZ,MAAO,GAET,IAAIoF,EAAO,OAAOnK,QAClB,AAAImK,CAAAA,AAAQ,UAARA,IACKtF,CAAAA,GAAYE,IAAWkE,GAAQjJ,EAAO+E,EAAO9E,MAAM,GACnDkK,AAAQ,UAARA,GAAoBnK,KAAS+E,CAAM,GAEnCR,GAAGQ,CAAM,CAAC/E,EAAM,CAAE5K,EAG7B,CAUA,SAASkQ,GAAMlQ,CAAK,CAAE2P,CAAM,EAC1B,GAAIS,GAAQpQ,GACV,MAAO,GAET,IAAI+U,EAAO,OAAO/U,QAClB,EAAI+U,CAAAA,AAAQ,UAARA,GAAoBA,AAAQ,UAARA,GAAoBA,AAAQ,WAARA,GACxC/U,AAAS,MAATA,GAAiB0V,GAAS1V,EAAK,GAG5BiJ,EAAcmM,IAAI,CAACpV,IAAU,CAACgJ,EAAaoM,IAAI,CAACpV,IACpD2P,AAAU,MAAVA,GAAkB3P,KAASH,OAAO8P,EACvC,CAiDA,SAAS2D,GAAmBtT,CAAK,EAC/B,OAAOA,GAAUA,GAAS,CAAC6Q,GAAS7Q,EACtC,CAWA,SAASuT,GAAwBjI,CAAG,CAAE+H,CAAQ,EAC5C,OAAO,SAAS1D,CAAM,SACpB,AAAc,MAAVA,GAGGA,CAAM,CAACrE,EAAI,GAAK+H,GACpBA,CAAAA,AAAavG,KAAAA,IAAbuG,GAA2B/H,KAAOzL,OAAO8P,EAAO,CACrD,CACF,CASA,IAAIU,GAAesF,GAAQ,SAASC,CAAM,EACxCA,EAAS9U,AA8dX,SAAkBd,CAAK,EACrB,OAAOA,AAAS,MAATA,EAAgB,GAAK6V,AA7mC9B,SAAsB7V,CAAK,EAEzB,GAAI,AAAgB,UAAhB,OAAOA,EACT,OAAOA,EAET,GAAI0V,GAAS1V,GACX,OAAOkO,GAAiBA,GAAe3B,IAAI,CAACvM,GAAS,GAEvD,IAAI8K,EAAU9K,EAAQ,GACtB,MAAO,AAAC8K,AAAU,KAAVA,GAAiB,AAAC,EAAI9K,GAAU,CAAC8H,EAAY,KAAOgD,CAC9D,EAmmC2C9K,EAC3C,EAheoB4V,GAElB,IAAI9K,EAAS,EAAE,CAOf,OANI5B,EAAakM,IAAI,CAACQ,IACpB9K,EAAO8D,IAAI,CAAC,IAEdgH,EAAOzU,OAAO,CAACgI,EAAY,SAAS2M,CAAK,CAAEC,CAAM,CAAEC,CAAK,CAAEJ,CAAM,EAC9D9K,EAAO8D,IAAI,CAACoH,EAAQJ,EAAOzU,OAAO,CAACiI,EAAc,MAAS2M,GAAUD,EACtE,GACOhL,CACT,GASA,SAASwF,GAAMtQ,CAAK,EAClB,GAAI,AAAgB,UAAhB,OAAOA,GAAqB0V,GAAS1V,GACvC,OAAOA,EAET,IAAI8K,EAAU9K,EAAQ,GACtB,MAAO,AAAC8K,AAAU,KAAVA,GAAiB,AAAC,EAAI9K,GAAU,CAAC8H,EAAY,KAAOgD,CAC9D,CASA,SAAS4C,GAAShG,CAAI,EACpB,GAAIA,AAAQ,MAARA,EAAc,CAChB,GAAI,CACF,OAAOwE,EAAaK,IAAI,CAAC7E,EAC3B,CAAE,MAAO4C,EAAG,CAAC,CACb,GAAI,CACF,OAAQ5C,EAAO,EACjB,CAAE,MAAO4C,EAAG,CAAC,CACf,CACA,MAAO,EACT,CAoCA,IAAI2L,IA3vBcvO,EA2vBI,SAAS8H,CAAU,CAAE0G,CAAS,EAClD,GAAI1G,AAAc,MAAdA,EACF,MAAO,EAAE,CAEX,IApyBmBA,EAAY0G,EAAWC,EACtCvL,EAzDW4E,EAAY7E,EACvBC,EACAE,EA01BAD,EAASqL,EAAUrL,MAAM,CAM7B,OALIA,EAAS,GAAK4K,GAAejG,EAAY0G,CAAS,CAAC,EAAE,CAAEA,CAAS,CAAC,EAAE,EACrEA,EAAY,EAAE,CACLrL,EAAS,GAAK4K,GAAeS,CAAS,CAAC,EAAE,CAAEA,CAAS,CAAC,EAAE,CAAEA,CAAS,CAAC,EAAE,GAC9EA,CAAAA,EAAY,CAACA,CAAS,CAAC,EAAE,CAAC,AAAD,EAxyBR1G,EA0yBAA,EA1yBY0G,EA0yBAE,AAtpCjC,SAASA,EAAY1L,CAAK,CAAE2L,CAAK,CAAEzB,CAAS,CAAE0B,CAAQ,CAAExL,CAAM,EAC5D,IAAIF,EAAQ,GACRC,EAASH,EAAMG,MAAM,CAKzB,IAHA+J,GAAcA,CAAAA,EAAYY,EAAY,EACtC1K,GAAWA,CAAAA,EAAS,EAAE,AAAD,EAEd,EAAEF,EAAQC,GAAQ,CACvB,IAAI7K,EAAQ0K,CAAK,CAACE,EAAM,AACpByL,CAAAA,EAAQ,GAAKzB,EAAU5U,GACrBqW,EAAQ,EAEVD,EAAYpW,EAAOqW,EAAQ,EAAGzB,EAAW0B,EAAUxL,IAEnDyL,AA/vBR,SAAmB7L,CAAK,CAAEnH,CAAM,EAK9B,IAJA,IAAIqH,EAAQ,GACRC,EAAStH,EAAOsH,MAAM,CACtB2L,EAAS9L,EAAMG,MAAM,CAElB,EAAED,EAAQC,GACfH,CAAK,CAAC8L,EAAS5L,EAAM,CAAGrH,CAAM,CAACqH,EAAM,CAEvC,OAAOF,CACT,EAsvBkBI,EAAQ9K,GAEX,CAACsW,GACVxL,CAAAA,CAAM,CAACA,EAAOD,MAAM,CAAC,CAAG7K,CAAI,CAEhC,CACA,OAAO8K,CACT,EAioC6CoL,EAAW,GA1yBZC,EA0yBgB,EAAE,CAzyBxDvL,EAAQ,GACZsL,EAAYzL,EAASyL,EAAUrL,MAAM,CAAGqL,EAAY,CAAC/C,GAAS,CAAEnI,EAAUkI,KASnEuD,AAhjCT,SAAoB/L,CAAK,CAAEgM,CAAQ,EACjC,IAAI7L,EAASH,EAAMG,MAAM,CAGzB,IADAH,EAAMiM,IAAI,CAACD,GACJ7L,KACLH,CAAK,CAACG,EAAO,CAAGH,CAAK,CAACG,EAAO,CAAC7K,KAAK,CAErC,OAAO0K,CACT,GAq+BiB8E,EA4DMA,EA5DM7E,EA4DM,SAAS3K,CAAK,CAAEsL,CAAG,CAAEkE,CAAU,EAI9D,MAAO,CAAE,SAHM/E,EAASyL,EAAW,SAASvL,CAAQ,EAClD,OAAOA,EAAS3K,EAClB,GAC+B,MAAS,EAAE4K,EAAO,MAAS5K,CAAM,CAClE,EAhEI4K,EAAQ,GACRE,EAAS2E,GAAYD,GAAczE,MAAMyE,EAAW3E,MAAM,EAAI,EAAE,CAEpEuE,GAASI,EAAY,SAASxP,CAAK,CAAEsL,CAAG,CAAEkE,CAAU,EAClD1E,CAAM,CAAC,EAAEF,EAAM,CAAGD,EAAS3K,EAAOsL,EAAKkE,EACzC,GACO1E,GA4DmB,SAAS6E,CAAM,CAAEc,CAAK,EAC9C,OAAOmG,AAiIX,SAAyBjH,CAAM,CAAEc,CAAK,CAAE0F,CAAM,EAO5C,IANA,IAAIvL,EAAQ,GACRiM,EAAclH,EAAOmH,QAAQ,CAC7BC,EAActG,EAAMqG,QAAQ,CAC5BjM,EAASgM,EAAYhM,MAAM,CAC3BmM,EAAeb,EAAOtL,MAAM,CAEzB,EAAED,EAAQC,GAAQ,CACvB,IAAIC,EAASmM,AApDjB,SAA0BjX,CAAK,CAAEyQ,CAAK,EACpC,GAAIzQ,IAAUyQ,EAAO,CACnB,IAAIyG,EAAelX,AAAU8M,KAAAA,IAAV9M,EACfmX,EAAYnX,AAAU,OAAVA,EACZoX,EAAiBpX,GAAUA,EAC3BqX,EAAc3B,GAAS1V,GAEvBsX,EAAe7G,AAAU3D,KAAAA,IAAV2D,EACf8G,EAAY9G,AAAU,OAAVA,EACZ+G,EAAiB/G,GAAUA,EAC3BgH,EAAc/B,GAASjF,GAE3B,GAAI,AAAC,CAAC8G,GAAa,CAACE,GAAe,CAACJ,GAAerX,EAAQyQ,GACtD4G,GAAeC,GAAgBE,GAAkB,CAACD,GAAa,CAACE,GAChEN,GAAaG,GAAgBE,GAC7B,CAACN,GAAgBM,GAClB,CAACJ,EACH,OAAO,EAET,GAAI,AAAC,CAACD,GAAa,CAACE,GAAe,CAACI,GAAezX,EAAQyQ,GACtDgH,GAAeP,GAAgBE,GAAkB,CAACD,GAAa,CAACE,GAChEE,GAAaL,GAAgBE,GAC7B,CAACE,GAAgBF,GAClB,CAACI,EACH,OAAO,EAEX,CACA,OAAO,CACT,EAwBkCX,CAAW,CAACjM,EAAM,CAAEmM,CAAW,CAACnM,EAAM,EACpE,GAAIE,EAAQ,CACV,GAAIF,GAASoM,EACX,OAAOlM,EAGT,OAAOA,EAAU4M,CAAAA,AAAS,QADdvB,CAAM,CAACvL,EAAM,CACU,GAAK,EAC1C,CACF,CAQA,OAAO+E,EAAO/E,KAAK,CAAG6F,EAAM7F,KAAK,AACnC,EA1J2B+E,EAAQc,EAAO0F,EACxC,EA8xBF,EArwBEvO,EAAQqF,GAAUrF,AAAUkF,KAAAA,IAAVlF,EAAuBF,EAAKmD,MAAM,CAAG,EAAKjD,EAAO,GAC5D,WAML,IALA,IAAI+P,EAAOrV,UACPsI,EAAQ,GACRC,EAASoC,GAAU0K,EAAK9M,MAAM,CAAGjD,EAAO,GACxC8C,EAAQK,MAAMF,GAEX,EAAED,EAAQC,GACfH,CAAK,CAACE,EAAM,CAAG+M,CAAI,CAAC/P,EAAQgD,EAAM,CAEpCA,EAAQ,GAER,IADA,IAAIgN,EAAY7M,MAAMnD,EAAQ,GACvB,EAAEgD,EAAQhD,GACfgQ,CAAS,CAAChN,EAAM,CAAG+M,CAAI,CAAC/M,EAAM,CAGhC,OADAgN,CAAS,CAAChQ,EAAM,CAAG8C,EACZmN,AAzrCX,SAAenQ,CAAI,CAAEoQ,CAAO,CAAEH,CAAI,EAChC,OAAQA,EAAK9M,MAAM,EACjB,KAAK,EAAG,OAAOnD,EAAK6E,IAAI,CAACuL,EACzB,MAAK,EAAG,OAAOpQ,EAAK6E,IAAI,CAACuL,EAASH,CAAI,CAAC,EAAE,CACzC,MAAK,EAAG,OAAOjQ,EAAK6E,IAAI,CAACuL,EAASH,CAAI,CAAC,EAAE,CAAEA,CAAI,CAAC,EAAE,CAClD,MAAK,EAAG,OAAOjQ,EAAK6E,IAAI,CAACuL,EAASH,CAAI,CAAC,EAAE,CAAEA,CAAI,CAAC,EAAE,CAAEA,CAAI,CAAC,EAAE,CAC7D,CACA,OAAOjQ,EAAKmQ,KAAK,CAACC,EAASH,EAC7B,EAirCiBjQ,EAAM,IAAI,CAAEkQ,EAC3B,GAkyBF,SAASjC,GAAQjO,CAAI,CAAEqQ,CAAQ,EAC7B,GAAI,AAAe,YAAf,OAAOrQ,GAAuBqQ,GAAY,AAAmB,YAAnB,OAAOA,EACnD,MAAM,AAAIC,UAvlEQ,uBAylEpB,IAAIC,EAAW,WACb,IAAIN,EAAOrV,UACPgJ,EAAMyM,EAAWA,EAASF,KAAK,CAAC,IAAI,CAAEF,GAAQA,CAAI,CAAC,EAAE,CACrD3I,EAAQiJ,EAASjJ,KAAK,CAE1B,GAAIA,EAAMvJ,GAAG,CAAC6F,GACZ,OAAO0D,EAAMnJ,GAAG,CAACyF,GAEnB,IAAIR,EAASpD,EAAKmQ,KAAK,CAAC,IAAI,CAAEF,GAE9B,OADAM,EAASjJ,KAAK,CAAGA,EAAMxD,GAAG,CAACF,EAAKR,GACzBA,CACT,EAEA,OADAmN,EAASjJ,KAAK,CAAG,GAAK2G,CAAAA,GAAQuC,KAAK,EAAIzJ,EAAO,EACvCwJ,CACT,CAqCA,SAAS9I,GAAGnP,CAAK,CAAEyQ,CAAK,EACtB,OAAOzQ,IAAUyQ,GAAUzQ,GAAUA,GAASyQ,GAAUA,CAC1D,CAoBA,SAASqD,GAAY9T,CAAK,EAExB,OAAOmY,AAmFT,SAA2BnY,CAAK,EAC9B,OAAO8Q,GAAa9Q,IAAUyP,GAAYzP,EAC5C,EArF2BA,IAAUmM,GAAeI,IAAI,CAACvM,EAAO,WAC3D,EAAC0M,GAAqBH,IAAI,CAACvM,EAAO,WAAaoM,GAAeG,IAAI,CAACvM,IAAU+H,CAAM,CACxF,CA5DA4N,GAAQuC,KAAK,CAAGzJ,GAqFhB,IAAI2B,GAAUrF,MAAMqF,OAAO,CA2B3B,SAASX,GAAYzP,CAAK,EACxB,OAAOA,AAAS,MAATA,GAAiB4T,GAAS5T,EAAM6K,MAAM,GAAK,CAACsK,GAAWnV,EAChE,CAgDA,SAASmV,GAAWnV,CAAK,EAGvB,IAAI2R,EAAMd,GAAS7Q,GAASoM,GAAeG,IAAI,CAACvM,GAAS,GACzD,OAAO2R,GAAOvJ,GAAWuJ,AA5vEd,8BA4vEcA,CAC3B,CA4BA,SAASiC,GAAS5T,CAAK,EACrB,MAAO,AAAgB,UAAhB,OAAOA,GACZA,EAAQ,IAAMA,EAAQ,GAAK,GAAKA,GApyEb,gBAqyEvB,CA2BA,SAAS6Q,GAAS7Q,CAAK,EACrB,IAAI+U,EAAO,OAAO/U,EAClB,MAAO,CAAC,CAACA,GAAU+U,CAAAA,AAAQ,UAARA,GAAoBA,AAAQ,YAARA,CAAiB,CAC1D,CA0BA,SAASjE,GAAa9Q,CAAK,EACzB,MAAO,CAAC,CAACA,GAAS,AAAgB,UAAhB,OAAOA,CAC3B,CAmBA,SAAS0V,GAAS1V,CAAK,EACrB,MAAO,AAAgB,UAAhB,OAAOA,GACX8Q,GAAa9Q,IAAUoM,GAAeG,IAAI,CAACvM,IAAU4I,CAC1D,CAmBA,IAAI4B,GAAeD,EAAmBS,EAAUT,GAxwChD,SAA0BvK,CAAK,EAC7B,OAAO8Q,GAAa9Q,IAClB4T,GAAS5T,EAAM6K,MAAM,GAAK,CAAC,CAACtB,CAAc,CAAC6C,GAAeG,IAAI,CAACvM,GAAO,AAC1E,EAw3CA,SAASgM,GAAK2D,CAAM,EAClB,OAAOF,GAAYE,GAAUyI,AAjrD/B,SAAuBpY,CAAK,CAAEqY,CAAS,EAGrC,IAAIvN,EAAS,AAACsF,GAAQpQ,IAAU8T,GAAY9T,GACxCsY,AAhnBN,SAAmBC,CAAC,CAAE5N,CAAQ,EAI5B,IAHA,IAAIC,EAAQ,GACRE,EAASC,MAAMwN,GAEZ,EAAE3N,EAAQ2N,GACfzN,CAAM,CAACF,EAAM,CAAGD,EAASC,GAE3B,OAAOE,CACT,EAwmBgB9K,EAAM6K,MAAM,CAAE2N,QACxB,EAAE,CAEF3N,EAASC,EAAOD,MAAM,CACtB4N,EAAc,CAAC,CAAC5N,EAEpB,IAAK,IAAIS,KAAOtL,EACImM,GAAeI,IAAI,CAACvM,EAAOsL,IACzC,CAAEmN,CAAAA,GAAgBnN,CAAAA,AAAO,UAAPA,GAAmBuI,GAAQvI,EAAKT,EAAM,CAAC,GAC3DC,EAAO8D,IAAI,CAACtD,GAGhB,OAAOR,CACT,EAgqD6C6E,GAAU+I,AAx1CvD,SAAkB/I,CAAM,EACtB,GAAI,CAACgJ,AA8uBP,SAAqB3Y,CAAK,EACxB,IAAIsV,EAAOtV,GAASA,EAAMgT,WAAW,CAGrC,OAAOhT,IAFK,CAAgB,YAAf,OAAOsV,GAAsBA,EAAK5J,SAAS,EAAKE,CAAU,CAGzE,EAnvBmB+D,GACf,OAAO5C,GAAW4C,GAEpB,IAAI7E,EAAS,EAAE,CACf,IAAK,IAAIQ,KAAOzL,OAAO8P,GACjBxD,GAAeI,IAAI,CAACoD,EAAQrE,IAAQA,AAAO,eAAPA,GACtCR,EAAO8D,IAAI,CAACtD,GAGhB,OAAOR,CACT,EA60CgE6E,EAChE,CAkBA,SAASwD,GAASnT,CAAK,EACrB,OAAOA,CACT,CA4BAqG,EAAOtG,OAAO,CAAGkW,E,wBCrkFjB5P,EAAOtG,OAAO,CAAG,EAAjB,M,wBCAA,IAAI6Y,EAAiB,EAAQ,MAE7B7Y,CAAAA,EAAQqH,SAAS,CAAG,SAASjE,CAAO,EAElC,OAAO,IAAIyV,EADI7Y,EAAQ8Y,QAAQ,CAAC1V,GACI,CAChC2V,QAAS3V,GAAYA,CAAAA,EAAQ2V,OAAO,EAAI3V,EAAQ4V,OAAO,GAAKC,GAAO,EACnEC,MAAO9V,GAAWA,EAAQ8V,KAAK,CAC/BC,aAAc/V,GAAWA,EAAQ+V,YAAY,AACjD,EACF,EAEAnZ,EAAQ8Y,QAAQ,CAAG,SAAS1V,CAAO,EACjC,GAAIA,aAAmB4H,MACrB,MAAO,EAAE,CAACoO,MAAM,CAAChW,GAGnB,IAAIoD,EAAO,CACTwS,QAAS,GACTK,OAAQ,EACRC,WAAY,IACZC,WAAYN,IACZ7R,UAAW,EACb,EACA,IAAK,IAAImE,KAAOnI,EACdoD,CAAI,CAAC+E,EAAI,CAAGnI,CAAO,CAACmI,EAAI,CAG1B,GAAI/E,EAAK8S,UAAU,CAAG9S,EAAK+S,UAAU,CACnC,MAAM,AAAInV,MAAM,yCAIlB,IAAK,IADD0U,EAAW,EAAE,CACRU,EAAI,EAAGA,EAAIhT,EAAKwS,OAAO,CAAEQ,IAChCV,EAASjK,IAAI,CAAC,IAAI,CAAC4K,aAAa,CAACD,EAAGhT,IAYtC,OATIpD,GAAWA,EAAQ2V,OAAO,EAAI,CAACD,EAAShO,MAAM,EAChDgO,EAASjK,IAAI,CAAC,IAAI,CAAC4K,aAAa,CAACD,EAAGhT,IAItCsS,EAASlC,IAAI,CAAC,SAAS8C,CAAC,CAACC,CAAC,EACxB,OAAOD,EAAIC,CACb,GAEOb,CACT,EAEA9Y,EAAQyZ,aAAa,CAAG,SAASnS,CAAO,CAAEd,CAAI,EAK5C,IAAIoT,EAAUzM,KAAK0M,KAAK,CAACC,AAJZ,CAACtT,EAAKY,SAAS,CACvB+F,KAAK2M,MAAM,GAAK,EACjB,GAE8B3M,KAAKC,GAAG,CAAC5G,EAAK8S,UAAU,CAAE,GAAKnM,KAAK4M,GAAG,CAACvT,EAAK6S,MAAM,CAAE/R,IAGvF,OAFAsS,EAAUzM,KAAK6M,GAAG,CAACJ,EAASpT,EAAK+S,UAAU,CAG7C,EAEAvZ,EAAQia,IAAI,CAAG,SAASC,CAAG,CAAE9W,CAAO,CAAE+W,CAAO,EAM3C,GALI/W,aAAmB4H,QACrBmP,EAAU/W,EACVA,EAAU,MAGR,CAAC+W,EAEH,IAAK,IAAI5O,KADT4O,EAAU,EAAE,CACID,EACU,YAApB,OAAOA,CAAG,CAAC3O,EAAI,EACjB4O,EAAQtL,IAAI,CAACtD,GAKnB,IAAK,IAAIiO,EAAI,EAAGA,EAAIW,EAAQrP,MAAM,CAAE0O,IAAK,CACvC,IAAIY,EAAWD,CAAO,CAACX,EAAE,CACrBa,EAAWH,CAAG,CAACE,EAAO,AAE1BF,CAAAA,CAAG,CAACE,EAAO,CAAG,UAAsBC,CAAQ,EAC1C,IAAIzT,EAAW5G,EAAQqH,SAAS,CAACjE,GAC7BwU,EAAW5M,MAAMW,SAAS,CAAC2O,KAAK,CAAC9N,IAAI,CAACjK,UAAW,GACjDgY,EAAW3C,EAAKhJ,GAAG,GAEvBgJ,EAAK/I,IAAI,CAAC,SAAS/H,CAAG,EACpB,IAAIF,EAAGK,KAAK,CAACH,GAGTA,GACFvE,CAAAA,SAAS,CAAC,EAAE,CAAGqE,EAAGO,SAAS,EAAC,EAE9BoT,EAASzC,KAAK,CAAC,IAAI,CAAEvV,UACvB,GAEAqE,EAAGU,OAAO,CAAC,WACT+S,EAASvC,KAAK,CAACoC,EAAKtC,EACtB,EACF,GAAE4C,IAAI,CAACN,EAAKG,GACZH,CAAG,CAACE,EAAO,CAAChX,OAAO,CAAGA,CACxB,CACF,C,oBCnGA,SAASyV,EAAeC,CAAQ,CAAE1V,CAAO,EAEhB,WAAnB,OAAOA,GACTA,CAAAA,EAAU,CAAE2V,QAAS3V,CAAQ,GAG/B,IAAI,CAACqX,iBAAiB,CAAGjZ,KAAKkZ,KAAK,CAAClZ,KAAKC,SAAS,CAACqX,IACnD,IAAI,CAAC6B,SAAS,CAAG7B,EACjB,IAAI,CAAC8B,QAAQ,CAAGxX,GAAW,CAAC,EAC5B,IAAI,CAACyX,aAAa,CAAGzX,GAAWA,EAAQ+V,YAAY,EAAIF,IACxD,IAAI,CAAC6B,GAAG,CAAG,KACX,IAAI,CAACC,OAAO,CAAG,EAAE,CACjB,IAAI,CAACC,SAAS,CAAG,EACjB,IAAI,CAACC,iBAAiB,CAAG,KACzB,IAAI,CAACC,mBAAmB,CAAG,KAC3B,IAAI,CAACC,QAAQ,CAAG,KAChB,IAAI,CAACC,eAAe,CAAG,KACvB,IAAI,CAACC,MAAM,CAAG,KAEV,IAAI,CAACT,QAAQ,CAAC7B,OAAO,EACvB,KAAI,CAACuC,eAAe,CAAG,IAAI,CAACX,SAAS,CAACL,KAAK,CAAC,EAAC,CAEjD,CACAhU,EAAOtG,OAAO,CAAG6Y,EAEjBA,EAAelN,SAAS,CAAC4P,KAAK,CAAG,WAC/B,IAAI,CAACP,SAAS,CAAG,EACjB,IAAI,CAACL,SAAS,CAAG,IAAI,CAACF,iBAAiB,CAACH,KAAK,CAAC,EAChD,EAEAzB,EAAelN,SAAS,CAAC6P,IAAI,CAAG,WAC1B,IAAI,CAACL,QAAQ,EACfM,aAAa,IAAI,CAACN,QAAQ,EAExB,IAAI,CAACE,MAAM,EACbI,aAAa,IAAI,CAACJ,MAAM,EAG1B,IAAI,CAACV,SAAS,CAAS,EAAE,CACzB,IAAI,CAACW,eAAe,CAAG,IACzB,EAEAzC,EAAelN,SAAS,CAAC1E,KAAK,CAAG,SAASH,CAAG,EAK3C,GAJI,IAAI,CAACqU,QAAQ,EACfM,aAAa,IAAI,CAACN,QAAQ,EAGxB,CAACrU,EACH,MAAO,GAET,IAAI4U,EAAc,IAAIC,OAAOC,OAAO,GACpC,GAAI9U,GAAO4U,EAAc,IAAI,CAACN,eAAe,EAAI,IAAI,CAACP,aAAa,CAGjE,OAFA,IAAI,CAACE,OAAO,CAAClM,IAAI,CAAC/H,GAClB,IAAI,CAACiU,OAAO,CAACc,OAAO,CAAC,AAAIzX,MAAM,oCACxB,GAGT,IAAI,CAAC2W,OAAO,CAAClM,IAAI,CAAC/H,GAElB,IAAI8S,EAAU,IAAI,CAACe,SAAS,CAACmB,KAAK,GAClC,GAAIlC,AAAY7M,KAAAA,IAAZ6M,EAAuB,CACzB,IAAI,IAAI,CAAC0B,eAAe,CAKtB,MAAO,GAHP,IAAI,CAACP,OAAO,CAACnO,MAAM,CAAC,EAAG,IAAI,CAACmO,OAAO,CAACjQ,MAAM,CAAG,GAC7C8O,EAAU,IAAI,CAAC0B,eAAe,CAAChB,KAAK,CAAC,GAIzC,CAEA,IAAI1Q,EAAO,IAAI,CAqBf,OApBA,IAAI,CAACyR,MAAM,CAAGU,WAAW,WACvBnS,EAAKoR,SAAS,GAEVpR,EAAKsR,mBAAmB,GAC1BtR,EAAKuR,QAAQ,CAAGY,WAAW,WACzBnS,EAAKsR,mBAAmB,CAACtR,EAAKoR,SAAS,CACzC,EAAGpR,EAAKqR,iBAAiB,EAErBrR,EAAKgR,QAAQ,CAAC1B,KAAK,EACnBtP,EAAKuR,QAAQ,CAACjC,KAAK,IAIzBtP,EAAKkR,GAAG,CAAClR,EAAKoR,SAAS,CACzB,EAAGpB,GAEC,IAAI,CAACgB,QAAQ,CAAC1B,KAAK,EACnB,IAAI,CAACmC,MAAM,CAACnC,KAAK,GAGd,EACT,EAEAL,EAAelN,SAAS,CAACrE,OAAO,CAAG,SAASf,CAAE,CAAEyV,CAAU,EACxD,IAAI,CAAClB,GAAG,CAAGvU,EAEPyV,IACEA,EAAWpC,OAAO,EACpB,KAAI,CAACqB,iBAAiB,CAAGe,EAAWpC,OAAO,AAAD,EAExCoC,EAAWC,EAAE,EACf,KAAI,CAACf,mBAAmB,CAAGc,EAAWC,EAAE,AAAD,GAI3C,IAAIrS,EAAO,IAAI,AACX,KAAI,CAACsR,mBAAmB,EAC1B,KAAI,CAACC,QAAQ,CAAGY,WAAW,WACzBnS,EAAKsR,mBAAmB,EAC1B,EAAGtR,EAAKqR,iBAAiB,GAG3B,IAAI,CAACG,eAAe,CAAG,IAAIO,OAAOC,OAAO,GAEzC,IAAI,CAACd,GAAG,CAAC,IAAI,CAACE,SAAS,CACzB,EAEAnC,EAAelN,SAAS,CAACuQ,GAAG,CAAG,SAAS3V,CAAE,EACxC4V,QAAQC,GAAG,CAAC,4CACZ,IAAI,CAAC9U,OAAO,CAACf,EACf,EAEAsS,EAAelN,SAAS,CAAC9D,KAAK,CAAG,SAAStB,CAAE,EAC1C4V,QAAQC,GAAG,CAAC,8CACZ,IAAI,CAAC9U,OAAO,CAACf,EACf,EAEAsS,EAAelN,SAAS,CAAC9D,KAAK,CAAGgR,EAAelN,SAAS,CAACuQ,GAAG,CAE7DrD,EAAelN,SAAS,CAAC0Q,MAAM,CAAG,WAChC,OAAO,IAAI,CAACtB,OAAO,AACrB,EAEAlC,EAAelN,SAAS,CAAC2Q,QAAQ,CAAG,WAClC,OAAO,IAAI,CAACtB,SAAS,AACvB,EAEAnC,EAAelN,SAAS,CAACxE,SAAS,CAAG,WACnC,GAAI,AAAwB,IAAxB,IAAI,CAAC4T,OAAO,CAACjQ,MAAM,CACrB,OAAO,KAOT,IAAK,IAJDyR,EAAS,CAAC,EACVpV,EAAY,KACZqV,EAAiB,EAEZhD,EAAI,EAAGA,EAAI,IAAI,CAACuB,OAAO,CAACjQ,MAAM,CAAE0O,IAAK,CAC5C,IAAIiD,EAAQ,IAAI,CAAC1B,OAAO,CAACvB,EAAE,CACvBxH,EAAUyK,EAAMzK,OAAO,CACvB0K,EAAQ,AAACH,CAAAA,CAAM,CAACvK,EAAQ,EAAI,GAAK,CAErCuK,CAAAA,CAAM,CAACvK,EAAQ,CAAG0K,EAEdA,GAASF,IACXrV,EAAYsV,EACZD,EAAiBE,EAErB,CAEA,OAAOvV,CACT,C,wBC9JA,IA61PQwV,EASIC,EAt2PRC,EAAY,EAAQ,OAGpBC,EAAUD,EAAUE,MAAM,CAAEC,EAAUH,EAAUI,MAAM,CAAEC,EAAQL,EAAUM,IAAI,CAG9EC,EAAQP,EAAUQ,KAAK,CAAC,OAAU,EAAKR,CAAAA,EAAUQ,KAAK,CAAC,OAAU,CAAG,CAAC,EAEzED,CAAAA,EAAME,KAAK,CAAG,AAAC,WAoCX,SAASA,EAAMC,CAAU,EACrB,GAAIA,EACA,IAAK,IAAItR,EAAOnM,OAAOmM,IAAI,CAACsR,GAAa/D,EAAI,EAAGA,EAAIvN,EAAKnB,MAAM,CAAE,EAAE0O,EACpC,MAAvB+D,CAAU,CAACtR,CAAI,CAACuN,EAAE,CAAC,EACnB,KAAI,CAACvN,CAAI,CAACuN,EAAE,CAAC,CAAG+D,CAAU,CAACtR,CAAI,CAACuN,EAAE,CAAC,AAAD,CAClD,CAqoJA,OA7nJA8D,EAAM3R,SAAS,CAAC6R,SAAS,CAAG,KAQ5BF,EAAM3R,SAAS,CAAC8R,OAAO,CAAG,KAQ1BH,EAAM3R,SAAS,CAAC+R,UAAU,CAAG,EAQ7BJ,EAAM3R,SAAS,CAAC9B,IAAI,CAAG,KAQvByT,EAAM3R,SAAS,CAACgS,YAAY,CAAG,GAQ/BL,EAAM3R,SAAS,CAACiS,SAAS,CAAG,GAQ5BN,EAAM3R,SAAS,CAACkS,uBAAuB,CAAG,GAQ1CP,EAAM3R,SAAS,CAACmS,uBAAuB,CAAG,GAQ1CR,EAAM3R,SAAS,CAACoS,OAAO,CAAG,KAQ1BT,EAAM3R,SAAS,CAACqS,UAAU,CAAG,GAQ7BV,EAAM3R,SAAS,CAACsS,aAAa,CAAG,GAQhCX,EAAM3R,SAAS,CAACuS,IAAI,CAAG,KAQvBZ,EAAM3R,SAAS,CAACwS,WAAW,CAAG,KAQ9Bb,EAAM3R,SAAS,CAACyS,SAAS,CAAG,KAQ5Bd,EAAM3R,SAAS,CAAC0S,iBAAiB,CAAG,GAQpCf,EAAM3R,SAAS,CAAC2S,iBAAiB,CAAG,GAQpChB,EAAM3R,SAAS,CAAC4S,sBAAsB,CAAG,GAQzCjB,EAAM3R,SAAS,CAAC6S,mBAAmB,CAAG,GAQtClB,EAAM3R,SAAS,CAAC8S,kBAAkB,CAAG,GAQrCnB,EAAM3R,SAAS,CAAC+S,oBAAoB,CAAG,EAUvCpB,EAAM5Y,MAAM,CAAG,SAAgB6Y,CAAU,EACrC,OAAO,IAAID,EAAMC,EACrB,EAWAD,EAAMqB,MAAM,CAAG,SAAgB3M,CAAO,CAAE4M,CAAM,EA2C1C,MA1CI,CAACA,GACDA,CAAAA,EAAS5B,EAAQtY,MAAM,EAAC,EACL,MAAnBsN,EAAQyL,OAAO,EAAY3d,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,YAC/DoL,EAAMT,MAAM,CAACC,QAAQ,CAACiC,SAAS,CAACF,MAAM,CAAC3M,EAAQyL,OAAO,CAAEmB,EAAOE,MAAM,CAAwB,IAAIC,IAAI,IAAIC,MAAM,GAC1F,MAArBhN,EAAQwL,SAAS,EAAY1d,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,cACjEoL,EAAMT,MAAM,CAACC,QAAQ,CAACiC,SAAS,CAACF,MAAM,CAAC3M,EAAQwL,SAAS,CAAEoB,EAAOE,MAAM,CAAwB,IAAIC,IAAI,IAAIC,MAAM,GAC9F,MAAnBhN,EAAQ+L,OAAO,EAAYje,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,YAC/DoL,EAAME,KAAK,CAAC2B,OAAO,CAACN,MAAM,CAAC3M,EAAQ+L,OAAO,CAAEa,EAAOE,MAAM,CAAwB,IAAIC,IAAI,IAAIC,MAAM,GAC7E,MAAtBhN,EAAQgM,UAAU,EAAYle,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,eAClE4M,EAAOE,MAAM,CAAwB,IAAIjJ,MAAM,CAAC7D,EAAQgM,UAAU,EACzC,MAAzBhM,EAAQiM,aAAa,EAAYne,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,kBACrE4M,EAAOE,MAAM,CAAwB,IAAIjJ,MAAM,CAAC7D,EAAQiM,aAAa,EACrD,MAAhBjM,EAAQkM,IAAI,EAAYpe,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,SAC5DoL,EAAME,KAAK,CAAC4B,IAAI,CAACP,MAAM,CAAC3M,EAAQkM,IAAI,CAAEU,EAAOE,MAAM,CAAyB,IAAIC,IAAI,IAAIC,MAAM,GACxE,MAAtBhN,EAAQ0L,UAAU,EAAY5d,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,eAClE4M,EAAOE,MAAM,CAAyB,IAAIK,MAAM,CAACnN,EAAQ0L,UAAU,EACnD,MAAhB1L,EAAQnI,IAAI,EAAY/J,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,SAC5DoL,EAAME,KAAK,CAAC8B,IAAI,CAACT,MAAM,CAAC3M,EAAQnI,IAAI,CAAE+U,EAAOE,MAAM,CAAyB,KAAKC,IAAI,IAAIC,MAAM,GACxE,MAAvBhN,EAAQmM,WAAW,EAAYre,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,gBACnEoL,EAAME,KAAK,CAAC+B,WAAW,CAACV,MAAM,CAAC3M,EAAQmM,WAAW,CAAES,EAAOE,MAAM,CAAyB,KAAKC,IAAI,IAAIC,MAAM,GACxF,MAArBhN,EAAQ4L,SAAS,EAAY9d,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,cACjE4M,EAAOE,MAAM,CAAyB,KAAKjJ,MAAM,CAAC7D,EAAQ4L,SAAS,EACtC,MAA7B5L,EAAQqM,iBAAiB,EAAYve,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,sBACzE4M,EAAOE,MAAM,CAAyB,KAAKQ,IAAI,CAACtN,EAAQqM,iBAAiB,EAC5C,MAA7BrM,EAAQsM,iBAAiB,EAAYxe,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,sBACzE4M,EAAOE,MAAM,CAAyB,KAAKQ,IAAI,CAACtN,EAAQsM,iBAAiB,EACvC,MAAlCtM,EAAQuM,sBAAsB,EAAYze,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,2BAC9E4M,EAAOE,MAAM,CAAyB,KAAKQ,IAAI,CAACtN,EAAQuM,sBAAsB,EAC/C,MAA/BvM,EAAQwM,mBAAmB,EAAY1e,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,wBAC3E4M,EAAOE,MAAM,CAAyB,KAAKQ,IAAI,CAACtN,EAAQwM,mBAAmB,EAC7C,MAA9BxM,EAAQyM,kBAAkB,EAAY3e,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,uBAC1E4M,EAAOE,MAAM,CAAyB,KAAKQ,IAAI,CAACtN,EAAQyM,kBAAkB,EACrD,MAArBzM,EAAQoM,SAAS,EAAYte,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,cACjEoL,EAAME,KAAK,CAACiC,aAAa,CAACZ,MAAM,CAAC3M,EAAQoM,SAAS,CAAEQ,EAAOE,MAAM,CAAyB,KAAKC,IAAI,IAAIC,MAAM,GAC1E,MAAnChN,EAAQ6L,uBAAuB,EAAY/d,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,4BAC/E4M,EAAOE,MAAM,CAAyB,KAAKjJ,MAAM,CAAC7D,EAAQ6L,uBAAuB,EAC9C,MAAnC7L,EAAQ8L,uBAAuB,EAAYhe,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,4BAC/E4M,EAAOE,MAAM,CAAyB,KAAKjJ,MAAM,CAAC7D,EAAQ8L,uBAAuB,EACjD,MAAhC9L,EAAQ0M,oBAAoB,EAAY5e,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,yBAC5E4M,EAAOE,MAAM,CAAyB,KAAKU,MAAM,CAACxN,EAAQ0M,oBAAoB,EACtD,MAAxB1M,EAAQ2L,YAAY,EAAY7d,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,iBACpE4M,EAAOE,MAAM,CAAyB,KAAKQ,IAAI,CAACtN,EAAQ2L,YAAY,EACjEiB,CACX,EAWAtB,EAAMmC,eAAe,CAAG,SAAyBzN,CAAO,CAAE4M,CAAM,EAC5D,OAAO,IAAI,CAACD,MAAM,CAAC3M,EAAS4M,GAAQI,MAAM,EAC9C,EAaA1B,EAAMoC,MAAM,CAAG,SAAgBC,CAAM,CAAE7U,CAAM,EACrC,CAAE6U,CAAAA,aAAkB7C,CAAM,GAC1B6C,CAAAA,EAAS7C,EAAQpY,MAAM,CAACib,EAAM,EAElC,IADA,IAAIC,EAAM9U,AAAWiC,KAAAA,IAAXjC,EAAuB6U,EAAOE,GAAG,CAAGF,EAAOG,GAAG,CAAGhV,EAAQkH,EAAU,IAAIoL,EAAME,KAAK,CACrFqC,EAAOG,GAAG,CAAGF,GAAK,CACrB,IAAIhO,EAAM+N,EAAOb,MAAM,GACvB,OAAQlN,IAAQ,GAChB,KAAK,EACDI,EAAQwL,SAAS,CAAGJ,EAAMT,MAAM,CAACC,QAAQ,CAACiC,SAAS,CAACa,MAAM,CAACC,EAAQA,EAAOb,MAAM,IAChF,KACJ,MAAK,EACD9M,EAAQyL,OAAO,CAAGL,EAAMT,MAAM,CAACC,QAAQ,CAACiC,SAAS,CAACa,MAAM,CAACC,EAAQA,EAAOb,MAAM,IAC9E,KACJ,MAAK,GACD9M,EAAQ0L,UAAU,CAAGiC,EAAOR,MAAM,GAClC,KACJ,MAAK,GACDnN,EAAQnI,IAAI,CAAGuT,EAAME,KAAK,CAAC8B,IAAI,CAACM,MAAM,CAACC,EAAQA,EAAOb,MAAM,IAC5D,KACJ,MAAK,GACD9M,EAAQ2L,YAAY,CAAGgC,EAAOL,IAAI,GAClC,KACJ,MAAK,GACDtN,EAAQ4L,SAAS,CAAG+B,EAAO9J,MAAM,GACjC,KACJ,MAAK,GACD7D,EAAQ6L,uBAAuB,CAAG8B,EAAO9J,MAAM,GAC/C,KACJ,MAAK,GACD7D,EAAQ8L,uBAAuB,CAAG6B,EAAO9J,MAAM,GAC/C,KACJ,MAAK,EACD7D,EAAQ+L,OAAO,CAAGX,EAAME,KAAK,CAAC2B,OAAO,CAACS,MAAM,CAACC,EAAQA,EAAOb,MAAM,IAClE,KACJ,MAAK,EACD9M,EAAQgM,UAAU,CAAG2B,EAAO9J,MAAM,GAClC,KACJ,MAAK,EACD7D,EAAQiM,aAAa,CAAG0B,EAAO9J,MAAM,GACrC,KACJ,MAAK,GACD7D,EAAQkM,IAAI,CAAGd,EAAME,KAAK,CAAC4B,IAAI,CAACQ,MAAM,CAACC,EAAQA,EAAOb,MAAM,IAC5D,KACJ,MAAK,GACD9M,EAAQmM,WAAW,CAAGf,EAAME,KAAK,CAAC+B,WAAW,CAACK,MAAM,CAACC,EAAQA,EAAOb,MAAM,IAC1E,KACJ,MAAK,GACD9M,EAAQoM,SAAS,CAAGhB,EAAME,KAAK,CAACiC,aAAa,CAACG,MAAM,CAACC,EAAQA,EAAOb,MAAM,IAC1E,KACJ,MAAK,GACD9M,EAAQqM,iBAAiB,CAAGsB,EAAOL,IAAI,GACvC,KACJ,MAAK,GACDtN,EAAQsM,iBAAiB,CAAGqB,EAAOL,IAAI,GACvC,KACJ,MAAK,GACDtN,EAAQuM,sBAAsB,CAAGoB,EAAOL,IAAI,GAC5C,KACJ,MAAK,GACDtN,EAAQwM,mBAAmB,CAAGmB,EAAOL,IAAI,GACzC,KACJ,MAAK,GACDtN,EAAQyM,kBAAkB,CAAGkB,EAAOL,IAAI,GACxC,KACJ,MAAK,GACDtN,EAAQ0M,oBAAoB,CAAGiB,EAAOH,MAAM,GAC5C,KACJ,SACIG,EAAOI,QAAQ,CAACnO,AAAM,EAANA,EAEpB,CACJ,CACA,OAAOI,CACX,EAYAsL,EAAM0C,eAAe,CAAG,SAAyBL,CAAM,EAGnD,MAFI,CAAEA,CAAAA,aAAkB7C,CAAM,GAC1B6C,CAAAA,EAAS,IAAI7C,EAAQ6C,EAAM,EACxB,IAAI,CAACD,MAAM,CAACC,EAAQA,EAAOb,MAAM,GAC5C,EAUAxB,EAAM2C,MAAM,CAAG,SAAgBjO,CAAO,EAClC,GAAI,AAAmB,UAAnB,OAAOA,GAAwBA,AAAY,OAAZA,EAC/B,MAAO,kBACX,GAAIA,AAAqB,MAArBA,EAAQwL,SAAS,EAAYxL,EAAQ5F,cAAc,CAAC,aAAc,CAClE,IAAIqQ,EAAQW,EAAMT,MAAM,CAACC,QAAQ,CAACiC,SAAS,CAACoB,MAAM,CAACjO,EAAQwL,SAAS,EACpE,GAAIf,EACA,MAAO,aAAeA,CAC9B,CACA,GAAIzK,AAAmB,MAAnBA,EAAQyL,OAAO,EAAYzL,EAAQ5F,cAAc,CAAC,WAAY,CAC9D,IAAIqQ,EAAQW,EAAMT,MAAM,CAACC,QAAQ,CAACiC,SAAS,CAACoB,MAAM,CAACjO,EAAQyL,OAAO,EAClE,GAAIhB,EACA,MAAO,WAAaA,CAC5B,CACA,GAAIzK,AAAsB,MAAtBA,EAAQ0L,UAAU,EAAY1L,EAAQ5F,cAAc,CAAC,eACjD,CAAC8Q,EAAMgD,SAAS,CAAClO,EAAQ0L,UAAU,GAAK,CAAE1L,CAAAA,EAAQ0L,UAAU,EAAIR,EAAMgD,SAAS,CAAClO,EAAQ0L,UAAU,CAACyC,GAAG,GAAKjD,EAAMgD,SAAS,CAAClO,EAAQ0L,UAAU,CAAC0C,IAAI,GAClJ,MAAO,oCACf,GAAIpO,AAAgB,MAAhBA,EAAQnI,IAAI,EAAYmI,EAAQ5F,cAAc,CAAC,QAAS,CACxD,IAAIqQ,EAAQW,EAAME,KAAK,CAAC8B,IAAI,CAACa,MAAM,CAACjO,EAAQnI,IAAI,EAChD,GAAI4S,EACA,MAAO,QAAUA,CACzB,CACA,GAAIzK,AAAwB,MAAxBA,EAAQ2L,YAAY,EAAY3L,EAAQ5F,cAAc,CAAC,iBACnD,AAAgC,WAAhC,OAAO4F,EAAQ2L,YAAY,CAC3B,MAAO,iCACf,GAAI3L,AAAqB,MAArBA,EAAQ4L,SAAS,EAAY5L,EAAQ5F,cAAc,CAAC,cAChD,CAAC8Q,EAAMmD,QAAQ,CAACrO,EAAQ4L,SAAS,EACjC,MAAO,6BACf,GAAI5L,AAAmC,MAAnCA,EAAQ6L,uBAAuB,EAAY7L,EAAQ5F,cAAc,CAAC,4BAC9D,CAAC8Q,EAAMmD,QAAQ,CAACrO,EAAQ6L,uBAAuB,EAC/C,MAAO,2CACf,GAAI7L,AAAmC,MAAnCA,EAAQ8L,uBAAuB,EAAY9L,EAAQ5F,cAAc,CAAC,4BAC9D,CAAC8Q,EAAMmD,QAAQ,CAACrO,EAAQ8L,uBAAuB,EAC/C,MAAO,2CACf,GAAI9L,AAAmB,MAAnBA,EAAQ+L,OAAO,EAAY/L,EAAQ5F,cAAc,CAAC,WAAY,CAC9D,IAAIqQ,EAAQW,EAAME,KAAK,CAAC2B,OAAO,CAACgB,MAAM,CAACjO,EAAQ+L,OAAO,EACtD,GAAItB,EACA,MAAO,WAAaA,CAC5B,CACA,GAAIzK,AAAsB,MAAtBA,EAAQgM,UAAU,EAAYhM,EAAQ5F,cAAc,CAAC,eACjD,CAAC8Q,EAAMmD,QAAQ,CAACrO,EAAQgM,UAAU,EAClC,MAAO,8BACf,GAAIhM,AAAyB,MAAzBA,EAAQiM,aAAa,EAAYjM,EAAQ5F,cAAc,CAAC,kBACpD,CAAC8Q,EAAMmD,QAAQ,CAACrO,EAAQiM,aAAa,EACrC,MAAO,iCACf,GAAIjM,AAAgB,MAAhBA,EAAQkM,IAAI,EAAYlM,EAAQ5F,cAAc,CAAC,QAAS,CACxD,IAAIqQ,EAAQW,EAAME,KAAK,CAAC4B,IAAI,CAACe,MAAM,CAACjO,EAAQkM,IAAI,EAChD,GAAIzB,EACA,MAAO,QAAUA,CACzB,CACA,GAAIzK,AAAuB,MAAvBA,EAAQmM,WAAW,EAAYnM,EAAQ5F,cAAc,CAAC,eAAgB,CACtE,IAAIqQ,EAAQW,EAAME,KAAK,CAAC+B,WAAW,CAACY,MAAM,CAACjO,EAAQmM,WAAW,EAC9D,GAAI1B,EACA,MAAO,eAAiBA,CAChC,CACA,GAAIzK,AAAqB,MAArBA,EAAQoM,SAAS,EAAYpM,EAAQ5F,cAAc,CAAC,aAAc,CAClE,IAAIqQ,EAAQW,EAAME,KAAK,CAACiC,aAAa,CAACU,MAAM,CAACjO,EAAQoM,SAAS,EAC9D,GAAI3B,EACA,MAAO,aAAeA,CAC9B,QACA,AAAIzK,AAA6B,MAA7BA,EAAQqM,iBAAiB,EAAYrM,EAAQ5F,cAAc,CAAC,sBACxD,AAAqC,WAArC,OAAO4F,EAAQqM,iBAAiB,CACzB,sCACXrM,AAA6B,MAA7BA,EAAQsM,iBAAiB,EAAYtM,EAAQ5F,cAAc,CAAC,sBACxD,AAAqC,WAArC,OAAO4F,EAAQsM,iBAAiB,CACzB,sCACXtM,AAAkC,MAAlCA,EAAQuM,sBAAsB,EAAYvM,EAAQ5F,cAAc,CAAC,2BAC7D,AAA0C,WAA1C,OAAO4F,EAAQuM,sBAAsB,CAC9B,2CACXvM,AAA+B,MAA/BA,EAAQwM,mBAAmB,EAAYxM,EAAQ5F,cAAc,CAAC,wBAC1D,AAAuC,WAAvC,OAAO4F,EAAQwM,mBAAmB,CAC3B,wCACXxM,AAA8B,MAA9BA,EAAQyM,kBAAkB,EAAYzM,EAAQ5F,cAAc,CAAC,uBACzD,AAAsC,WAAtC,OAAO4F,EAAQyM,kBAAkB,CAC1B,uCACXzM,AAAgC,MAAhCA,EAAQ0M,oBAAoB,EAAY1M,EAAQ5F,cAAc,CAAC,yBAC3D,AAAwC,UAAxC,OAAO4F,EAAQ0M,oBAAoB,CAC5B,wCACR,IACX,EAWApB,EAAMgD,QAAQ,CAAG,SAAkBtO,CAAO,CAAE5O,CAAO,EAC3C,CAACA,GACDA,CAAAA,EAAU,CAAC,GACf,IAAIwM,EAAS,CAAC,EAkEd,OAjEIxM,EAAQmd,QAAQ,GAChB3Q,EAAO6N,OAAO,CAAG,KACjB7N,EAAO4N,SAAS,CAAG,KACnB5N,EAAOmO,OAAO,CAAG,KACjBnO,EAAOoO,UAAU,CAAG,GACpBpO,EAAOqO,aAAa,CAAG,GACvBrO,EAAOsO,IAAI,CAAG,KACdtO,EAAO8N,UAAU,CAAG,EACpB9N,EAAO/F,IAAI,CAAG,KACd+F,EAAOuO,WAAW,CAAG,KACrBvO,EAAOgO,SAAS,CAAG,GACnBhO,EAAOyO,iBAAiB,CAAG,GAC3BzO,EAAO0O,iBAAiB,CAAG,GAC3B1O,EAAO2O,sBAAsB,CAAG,GAChC3O,EAAO4O,mBAAmB,CAAG,GAC7B5O,EAAO6O,kBAAkB,CAAG,GAC5B7O,EAAOwO,SAAS,CAAG,KACnBxO,EAAOiO,uBAAuB,CAAG,GACjCjO,EAAOkO,uBAAuB,CAAG,GACjClO,EAAO8O,oBAAoB,CAAG,EAC9B9O,EAAO+N,YAAY,CAAG,IAEH,MAAnB3L,EAAQyL,OAAO,EAAYzL,EAAQ5F,cAAc,CAAC,YAClDwD,CAAAA,EAAO6N,OAAO,CAAGL,EAAMT,MAAM,CAACC,QAAQ,CAACiC,SAAS,CAACyB,QAAQ,CAACtO,EAAQyL,OAAO,CAAEra,EAAO,EAC7D,MAArB4O,EAAQwL,SAAS,EAAYxL,EAAQ5F,cAAc,CAAC,cACpDwD,CAAAA,EAAO4N,SAAS,CAAGJ,EAAMT,MAAM,CAACC,QAAQ,CAACiC,SAAS,CAACyB,QAAQ,CAACtO,EAAQwL,SAAS,CAAEpa,EAAO,EACnE,MAAnB4O,EAAQ+L,OAAO,EAAY/L,EAAQ5F,cAAc,CAAC,YAClDwD,CAAAA,EAAOmO,OAAO,CAAGX,EAAME,KAAK,CAAC2B,OAAO,CAACqB,QAAQ,CAACtO,EAAQ+L,OAAO,CAAE3a,EAAO,EAChD,MAAtB4O,EAAQgM,UAAU,EAAYhM,EAAQ5F,cAAc,CAAC,eACrDwD,CAAAA,EAAOoO,UAAU,CAAGhM,EAAQgM,UAAU,AAAD,EACZ,MAAzBhM,EAAQiM,aAAa,EAAYjM,EAAQ5F,cAAc,CAAC,kBACxDwD,CAAAA,EAAOqO,aAAa,CAAGjM,EAAQiM,aAAa,AAAD,EAC3B,MAAhBjM,EAAQkM,IAAI,EAAYlM,EAAQ5F,cAAc,CAAC,SAC/CwD,CAAAA,EAAOsO,IAAI,CAAGd,EAAME,KAAK,CAAC4B,IAAI,CAACoB,QAAQ,CAACtO,EAAQkM,IAAI,CAAE9a,EAAO,EACvC,MAAtB4O,EAAQ0L,UAAU,EAAY1L,EAAQ5F,cAAc,CAAC,gBACjD,AAA8B,UAA9B,OAAO4F,EAAQ0L,UAAU,CACzB9N,EAAO8N,UAAU,CAAGta,EAAQod,KAAK,GAAK/H,OAASA,OAAOzG,EAAQ0L,UAAU,EAAI1L,EAAQ0L,UAAU,CAE9F9N,EAAO8N,UAAU,CAAGta,EAAQod,KAAK,GAAK/H,OAASyE,EAAMuD,IAAI,CAAC9U,SAAS,CAAC5K,QAAQ,CAACyL,IAAI,CAACwF,EAAQ0L,UAAU,EAAIta,EAAQod,KAAK,GAAKE,OAAS,IAAIxD,EAAMyD,QAAQ,CAAC3O,EAAQ0L,UAAU,CAACyC,GAAG,GAAK,EAAGnO,EAAQ0L,UAAU,CAAC0C,IAAI,GAAK,GAAGQ,QAAQ,CAAC,IAAQ5O,EAAQ0L,UAAU,EAC1O,MAAhB1L,EAAQnI,IAAI,EAAYmI,EAAQ5F,cAAc,CAAC,SAC/CwD,CAAAA,EAAO/F,IAAI,CAAGuT,EAAME,KAAK,CAAC8B,IAAI,CAACkB,QAAQ,CAACtO,EAAQnI,IAAI,CAAEzG,EAAO,EACtC,MAAvB4O,EAAQmM,WAAW,EAAYnM,EAAQ5F,cAAc,CAAC,gBACtDwD,CAAAA,EAAOuO,WAAW,CAAGf,EAAME,KAAK,CAAC+B,WAAW,CAACiB,QAAQ,CAACtO,EAAQmM,WAAW,CAAE/a,EAAO,EAC7D,MAArB4O,EAAQ4L,SAAS,EAAY5L,EAAQ5F,cAAc,CAAC,cACpDwD,CAAAA,EAAOgO,SAAS,CAAG5L,EAAQ4L,SAAS,AAAD,EACN,MAA7B5L,EAAQqM,iBAAiB,EAAYrM,EAAQ5F,cAAc,CAAC,sBAC5DwD,CAAAA,EAAOyO,iBAAiB,CAAGrM,EAAQqM,iBAAiB,AAAD,EACtB,MAA7BrM,EAAQsM,iBAAiB,EAAYtM,EAAQ5F,cAAc,CAAC,sBAC5DwD,CAAAA,EAAO0O,iBAAiB,CAAGtM,EAAQsM,iBAAiB,AAAD,EACjB,MAAlCtM,EAAQuM,sBAAsB,EAAYvM,EAAQ5F,cAAc,CAAC,2BACjEwD,CAAAA,EAAO2O,sBAAsB,CAAGvM,EAAQuM,sBAAsB,AAAD,EAC9B,MAA/BvM,EAAQwM,mBAAmB,EAAYxM,EAAQ5F,cAAc,CAAC,wBAC9DwD,CAAAA,EAAO4O,mBAAmB,CAAGxM,EAAQwM,mBAAmB,AAAD,EACzB,MAA9BxM,EAAQyM,kBAAkB,EAAYzM,EAAQ5F,cAAc,CAAC,uBAC7DwD,CAAAA,EAAO6O,kBAAkB,CAAGzM,EAAQyM,kBAAkB,AAAD,EAChC,MAArBzM,EAAQoM,SAAS,EAAYpM,EAAQ5F,cAAc,CAAC,cACpDwD,CAAAA,EAAOwO,SAAS,CAAGhB,EAAME,KAAK,CAACiC,aAAa,CAACe,QAAQ,CAACtO,EAAQoM,SAAS,CAAEhb,EAAO,EAC7C,MAAnC4O,EAAQ6L,uBAAuB,EAAY7L,EAAQ5F,cAAc,CAAC,4BAClEwD,CAAAA,EAAOiO,uBAAuB,CAAG7L,EAAQ6L,uBAAuB,AAAD,EAC5B,MAAnC7L,EAAQ8L,uBAAuB,EAAY9L,EAAQ5F,cAAc,CAAC,4BAClEwD,CAAAA,EAAOkO,uBAAuB,CAAG9L,EAAQ8L,uBAAuB,AAAD,EAC/B,MAAhC9L,EAAQ0M,oBAAoB,EAAY1M,EAAQ5F,cAAc,CAAC,yBAC/DwD,CAAAA,EAAO8O,oBAAoB,CAAGtb,EAAQyd,IAAI,EAAI,CAACC,SAAS9O,EAAQ0M,oBAAoB,EAAIjG,OAAOzG,EAAQ0M,oBAAoB,EAAI1M,EAAQ0M,oBAAoB,AAAD,EAClI,MAAxB1M,EAAQ2L,YAAY,EAAY3L,EAAQ5F,cAAc,CAAC,iBACvDwD,CAAAA,EAAO+N,YAAY,CAAG3L,EAAQ2L,YAAY,AAAD,EACtC/N,CACX,EASA0N,EAAM3R,SAAS,CAACoV,MAAM,CAAG,WACrB,OAAO,IAAI,CAAC9N,WAAW,CAACqN,QAAQ,CAAC,IAAI,CAAEzD,EAAUM,IAAI,CAAC6D,aAAa,CACvE,EAEA1D,EAAM+B,WAAW,CAAG,AAAC,eA8MT4B,EAAiBzd,EA5LzB,SAAS6b,EAAY9B,CAAU,EAC3B,GAAIA,EACA,IAAK,IAAItR,EAAOnM,OAAOmM,IAAI,CAACsR,GAAa/D,EAAI,EAAGA,EAAIvN,EAAKnB,MAAM,CAAE,EAAE0O,EACpC,MAAvB+D,CAAU,CAACtR,CAAI,CAACuN,EAAE,CAAC,EACnB,KAAI,CAACvN,CAAI,CAACuN,EAAE,CAAC,CAAG+D,CAAU,CAACtR,CAAI,CAACuN,EAAE,CAAC,AAAD,CAClD,CA8LA,OAtLA6F,EAAY1T,SAAS,CAACuV,KAAK,CAAG,EAQ9B7B,EAAY1T,SAAS,CAACwV,QAAQ,CAAG,EAUjC9B,EAAY3a,MAAM,CAAG,SAAgB6Y,CAAU,EAC3C,OAAO,IAAI8B,EAAY9B,EAC3B,EAWA8B,EAAYV,MAAM,CAAG,SAAgB3M,CAAO,CAAE4M,CAAM,EAOhD,MANI,CAACA,GACDA,CAAAA,EAAS5B,EAAQtY,MAAM,EAAC,EACP,MAAjBsN,EAAQkP,KAAK,EAAYphB,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,UAC7D4M,EAAOE,MAAM,CAAwB,GAAGsC,KAAK,CAACpP,EAAQkP,KAAK,EACvC,MAApBlP,EAAQmP,QAAQ,EAAYrhB,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,aAChE4M,EAAOE,MAAM,CAAwB,IAAIuC,KAAK,CAACrP,EAAQmP,QAAQ,EAC5DvC,CACX,EAWAS,EAAYI,eAAe,CAAG,SAAyBzN,CAAO,CAAE4M,CAAM,EAClE,OAAO,IAAI,CAACD,MAAM,CAAC3M,EAAS4M,GAAQI,MAAM,EAC9C,EAaAK,EAAYK,MAAM,CAAG,SAAgBC,CAAM,CAAE7U,CAAM,EAC3C,CAAE6U,CAAAA,aAAkB7C,CAAM,GAC1B6C,CAAAA,EAAS7C,EAAQpY,MAAM,CAACib,EAAM,EAElC,IADA,IAAIC,EAAM9U,AAAWiC,KAAAA,IAAXjC,EAAuB6U,EAAOE,GAAG,CAAGF,EAAOG,GAAG,CAAGhV,EAAQkH,EAAU,IAAIoL,EAAME,KAAK,CAAC+B,WAAW,CACjGM,EAAOG,GAAG,CAAGF,GAAK,CACrB,IAAIhO,EAAM+N,EAAOb,MAAM,GACvB,OAAQlN,IAAQ,GAChB,KAAK,EACDI,EAAQkP,KAAK,CAAGvB,EAAOyB,KAAK,GAC5B,KACJ,MAAK,EACDpP,EAAQmP,QAAQ,CAAGxB,EAAO0B,KAAK,GAC/B,KACJ,SACI1B,EAAOI,QAAQ,CAACnO,AAAM,EAANA,EAEpB,CACJ,CACA,OAAOI,CACX,EAYAqN,EAAYW,eAAe,CAAG,SAAyBL,CAAM,EAGzD,MAFI,CAAEA,CAAAA,aAAkB7C,CAAM,GAC1B6C,CAAAA,EAAS,IAAI7C,EAAQ6C,EAAM,EACxB,IAAI,CAACD,MAAM,CAACC,EAAQA,EAAOb,MAAM,GAC5C,EAUAO,EAAYY,MAAM,CAAG,SAAgBjO,CAAO,EACxC,GAAI,AAAmB,UAAnB,OAAOA,GAAwBA,AAAY,OAAZA,EAC/B,MAAO,kBACX,GAAIA,AAAiB,MAAjBA,EAAQkP,KAAK,EAAYlP,EAAQ5F,cAAc,CAAC,SAChD,OAAQ4F,EAAQkP,KAAK,EACrB,QACI,MAAO,4BACX,MAAK,EACL,KAAK,EACL,KAAK,EAEL,QACJ,AAAIlP,AAAoB,MAApBA,EAAQmP,QAAQ,EAAYnP,EAAQ5F,cAAc,CAAC,aAC/C,CAAC8Q,EAAMgD,SAAS,CAAClO,EAAQmP,QAAQ,GAAK,CAAEnP,CAAAA,EAAQmP,QAAQ,EAAIjE,EAAMgD,SAAS,CAAClO,EAAQmP,QAAQ,CAAChB,GAAG,GAAKjD,EAAMgD,SAAS,CAAClO,EAAQmP,QAAQ,CAACf,IAAI,GACnI,kCACR,IACX,EAWAf,EAAYiB,QAAQ,CAAG,SAAkBtO,CAAO,CAAE5O,CAAO,EACjD,CAACA,GACDA,CAAAA,EAAU,CAAC,GACf,IAAIwM,EAAS,CAAC,EAYd,OAXIxM,EAAQmd,QAAQ,GAChB3Q,EAAOsR,KAAK,CAAG9d,EAAQke,KAAK,GAAK7I,OAAS,UAAY,EACtD7I,EAAOuR,QAAQ,CAAG,GAED,MAAjBnP,EAAQkP,KAAK,EAAYlP,EAAQ5F,cAAc,CAAC,UAChDwD,CAAAA,EAAOsR,KAAK,CAAG9d,EAAQke,KAAK,GAAK7I,OAAS2E,EAAME,KAAK,CAAC+B,WAAW,CAACkC,KAAK,CAACvP,EAAQkP,KAAK,CAAC,CAAGlP,EAAQkP,KAAK,AAAD,EACjF,MAApBlP,EAAQmP,QAAQ,EAAYnP,EAAQ5F,cAAc,CAAC,cAC/C,AAA4B,UAA5B,OAAO4F,EAAQmP,QAAQ,CACvBvR,EAAOuR,QAAQ,CAAG/d,EAAQod,KAAK,GAAK/H,OAASA,OAAOzG,EAAQmP,QAAQ,EAAInP,EAAQmP,QAAQ,CAExFvR,EAAOuR,QAAQ,CAAG/d,EAAQod,KAAK,GAAK/H,OAASyE,EAAMuD,IAAI,CAAC9U,SAAS,CAAC5K,QAAQ,CAACyL,IAAI,CAACwF,EAAQmP,QAAQ,EAAI/d,EAAQod,KAAK,GAAKE,OAAS,IAAIxD,EAAMyD,QAAQ,CAAC3O,EAAQmP,QAAQ,CAAChB,GAAG,GAAK,EAAGnO,EAAQmP,QAAQ,CAACf,IAAI,GAAK,GAAGQ,QAAQ,GAAK5O,EAAQmP,QAAQ,EACzOvR,CACX,EASAyP,EAAY1T,SAAS,CAACoV,MAAM,CAAG,WAC3B,OAAO,IAAI,CAAC9N,WAAW,CAACqN,QAAQ,CAAC,IAAI,CAAEzD,EAAUM,IAAI,CAAC6D,aAAa,CACvE,EAUA3B,EAAYkC,KAAK,EAEb/d,CADqBA,EAAS1D,OAAO4E,MAAM,CAAvCuc,EAAa,CAAC,GACZ,CAACA,CAAU,CAAC,EAAE,CAAG,UAAU,CAAG,EACpCzd,CAAM,CAACyd,CAAU,CAAC,EAAE,CAAG,SAAS,CAAG,EACnCzd,CAAM,CAACyd,CAAU,CAAC,EAAE,CAAG,UAAU,CAAG,EAC7Bzd,GAGJ6b,CACX,IAEA/B,EAAM2B,OAAO,CAAG,AAAC,WAkBb,SAASA,EAAQ1B,CAAU,EAEvB,GADA,IAAI,CAACiE,aAAa,CAAG,CAAC,EAClBjE,EACA,IAAK,IAAItR,EAAOnM,OAAOmM,IAAI,CAACsR,GAAa/D,EAAI,EAAGA,EAAIvN,EAAKnB,MAAM,CAAE,EAAE0O,EACpC,MAAvB+D,CAAU,CAACtR,CAAI,CAACuN,EAAE,CAAC,EACnB,KAAI,CAACvN,CAAI,CAACuN,EAAE,CAAC,CAAG+D,CAAU,CAACtR,CAAI,CAACuN,EAAE,CAAC,AAAD,CAClD,CAoLA,OA5KAyF,EAAQtT,SAAS,CAAC6V,aAAa,CAAGtE,EAAMuE,WAAW,CAQnDxC,EAAQtT,SAAS,CAACtL,aAAa,CAAG,GAUlC4e,EAAQva,MAAM,CAAG,SAAgB6Y,CAAU,EACvC,OAAO,IAAI0B,EAAQ1B,EACvB,EAWA0B,EAAQN,MAAM,CAAG,SAAgB3M,CAAO,CAAE4M,CAAM,EAK5C,GAJI,CAACA,GACDA,CAAAA,EAAS5B,EAAQtY,MAAM,EAAC,EACC,MAAzBsN,EAAQ3R,aAAa,EAAYP,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,kBACrE4M,EAAOE,MAAM,CAAwB,IAAIjJ,MAAM,CAAC7D,EAAQ3R,aAAa,EACrE2R,AAAyB,MAAzBA,EAAQwP,aAAa,EAAY1hB,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,iBACrE,IAAK,IAAI/F,EAAOnM,OAAOmM,IAAI,CAAC+F,EAAQwP,aAAa,EAAGhI,EAAI,EAAGA,EAAIvN,EAAKnB,MAAM,CAAE,EAAE0O,EAC1EoF,EAAOE,MAAM,CAAwB,IAAIC,IAAI,GAAGD,MAAM,CAAwB,IAAIjJ,MAAM,CAAC5J,CAAI,CAACuN,EAAE,EAAEsF,MAAM,CAAwB,IAAIjJ,MAAM,CAAC7D,EAAQwP,aAAa,CAACvV,CAAI,CAACuN,EAAE,CAAC,EAAEwF,MAAM,GACzL,OAAOJ,CACX,EAWAK,EAAQQ,eAAe,CAAG,SAAyBzN,CAAO,CAAE4M,CAAM,EAC9D,OAAO,IAAI,CAACD,MAAM,CAAC3M,EAAS4M,GAAQI,MAAM,EAC9C,EAaAC,EAAQS,MAAM,CAAG,SAAgBC,CAAM,CAAE7U,CAAM,EACvC,CAAE6U,CAAAA,aAAkB7C,CAAM,GAC1B6C,CAAAA,EAAS7C,EAAQpY,MAAM,CAACib,EAAM,EAElC,IADA,IAAwGpU,EAApGqU,EAAM9U,AAAWiC,KAAAA,IAAXjC,EAAuB6U,EAAOE,GAAG,CAAGF,EAAOG,GAAG,CAAGhV,EAAQkH,EAAU,IAAIoL,EAAME,KAAK,CAAC2B,OAAO,CAC7FU,EAAOG,GAAG,CAAGF,GAAK,CACrB,IAAIhO,EAAM+N,EAAOb,MAAM,GACvB,OAAQlN,IAAQ,GAChB,KAAK,EACD+N,EAAO+B,IAAI,GAAG5B,GAAG,GACb9N,EAAQwP,aAAa,GAAKtE,EAAMuE,WAAW,EAC3CzP,CAAAA,EAAQwP,aAAa,CAAG,CAAC,GAC7BjW,EAAMoU,EAAO9J,MAAM,GACnB8J,EAAOG,GAAG,GACV9N,EAAQwP,aAAa,CAACjW,EAAI,CAAGoU,EAAO9J,MAAM,GAC1C,KACJ,MAAK,EACD7D,EAAQ3R,aAAa,CAAGsf,EAAO9J,MAAM,GACrC,KACJ,SACI8J,EAAOI,QAAQ,CAACnO,AAAM,EAANA,EAEpB,CACJ,CACA,OAAOI,CACX,EAYAiN,EAAQe,eAAe,CAAG,SAAyBL,CAAM,EAGrD,MAFI,CAAEA,CAAAA,aAAkB7C,CAAM,GAC1B6C,CAAAA,EAAS,IAAI7C,EAAQ6C,EAAM,EACxB,IAAI,CAACD,MAAM,CAACC,EAAQA,EAAOb,MAAM,GAC5C,EAUAG,EAAQgB,MAAM,CAAG,SAAgBjO,CAAO,EACpC,GAAI,AAAmB,UAAnB,OAAOA,GAAwBA,AAAY,OAAZA,EAC/B,MAAO,kBACX,GAAIA,AAAyB,MAAzBA,EAAQwP,aAAa,EAAYxP,EAAQ5F,cAAc,CAAC,iBAAkB,CAC1E,GAAI,CAAC8Q,EAAMpM,QAAQ,CAACkB,EAAQwP,aAAa,EACrC,MAAO,iCAEX,IAAK,IADDjW,EAAMzL,OAAOmM,IAAI,CAAC+F,EAAQwP,aAAa,EAClChI,EAAI,EAAGA,EAAIjO,EAAIT,MAAM,CAAE,EAAE0O,EAC9B,GAAI,CAAC0D,EAAMmD,QAAQ,CAACrO,EAAQwP,aAAa,CAACjW,CAAG,CAACiO,EAAE,CAAC,EAC7C,MAAO,0CACnB,QACA,AAAIxH,AAAyB,MAAzBA,EAAQ3R,aAAa,EAAY2R,EAAQ5F,cAAc,CAAC,kBACpD,CAAC8Q,EAAMmD,QAAQ,CAACrO,EAAQ3R,aAAa,EAC9B,iCACR,IACX,EAWA4e,EAAQqB,QAAQ,CAAG,SAAkBtO,CAAO,CAAE5O,CAAO,EAC7C,CAACA,GACDA,CAAAA,EAAU,CAAC,GACf,IAOIue,EAPA/R,EAAS,CAAC,EAQd,GAPIxM,CAAAA,EAAQwe,OAAO,EAAIxe,EAAQmd,QAAQ,AAAD,GAClC3Q,CAAAA,EAAO4R,aAAa,CAAG,CAAC,GACxBpe,EAAQmd,QAAQ,EAChB3Q,CAAAA,EAAOvP,aAAa,CAAG,EAAC,EACC,MAAzB2R,EAAQ3R,aAAa,EAAY2R,EAAQ5F,cAAc,CAAC,kBACxDwD,CAAAA,EAAOvP,aAAa,CAAG2R,EAAQ3R,aAAa,AAAD,EAE3C2R,EAAQwP,aAAa,EAAI,AAACG,CAAAA,EAAQ7hB,OAAOmM,IAAI,CAAC+F,EAAQwP,aAAa,GAAG1W,MAAM,CAAE,CAC9E8E,EAAO4R,aAAa,CAAG,CAAC,EACxB,IAAK,IAAIK,EAAI,EAAGA,EAAIF,EAAM7W,MAAM,CAAE,EAAE+W,EAChCjS,EAAO4R,aAAa,CAACG,CAAK,CAACE,EAAE,CAAC,CAAG7P,EAAQwP,aAAa,CAACG,CAAK,CAACE,EAAE,CAAC,AACxE,CACA,OAAOjS,CACX,EASAqP,EAAQtT,SAAS,CAACoV,MAAM,CAAG,WACvB,OAAO,IAAI,CAAC9N,WAAW,CAACqN,QAAQ,CAAC,IAAI,CAAEzD,EAAUM,IAAI,CAAC6D,aAAa,CACvE,EAEO/B,CACX,IAEA3B,EAAMlZ,KAAK,CAAG,AAAC,WAoBX,SAASA,EAAMmZ,CAAU,EAErB,GADA,IAAI,CAACuE,QAAQ,CAAG,EAAE,CACdvE,EACA,IAAK,IAAItR,EAAOnM,OAAOmM,IAAI,CAACsR,GAAa/D,EAAI,EAAGA,EAAIvN,EAAKnB,MAAM,CAAE,EAAE0O,EACpC,MAAvB+D,CAAU,CAACtR,CAAI,CAACuN,EAAE,CAAC,EACnB,KAAI,CAACvN,CAAI,CAACuN,EAAE,CAAC,CAAG+D,CAAU,CAACtR,CAAI,CAACuN,EAAE,CAAC,AAAD,CAClD,CA2NA,OAnNApV,EAAMuH,SAAS,CAACqG,OAAO,CAAG,GAQ1B5N,EAAMuH,SAAS,CAACmW,QAAQ,CAAG5E,EAAM6E,UAAU,CAQ3C3d,EAAMuH,SAAS,CAACqW,MAAM,CAAG,EAQzB5d,EAAMuH,SAAS,CAACkV,IAAI,CAAG,GAUvBzc,EAAMM,MAAM,CAAG,SAAgB6Y,CAAU,EACrC,OAAO,IAAInZ,EAAMmZ,EACrB,EAWAnZ,EAAMua,MAAM,CAAG,SAAgB3M,CAAO,CAAE4M,CAAM,EAK1C,GAJI,CAACA,GACDA,CAAAA,EAAS5B,EAAQtY,MAAM,EAAC,EACL,MAAnBsN,EAAQA,OAAO,EAAYlS,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,YAC/D4M,EAAOE,MAAM,CAAwB,IAAIjJ,MAAM,CAAC7D,EAAQA,OAAO,EAC/DA,AAAoB,MAApBA,EAAQ8P,QAAQ,EAAY9P,EAAQ8P,QAAQ,CAAChX,MAAM,CACnD,IAAK,IAAI0O,EAAI,EAAGA,EAAIxH,EAAQ8P,QAAQ,CAAChX,MAAM,CAAE,EAAE0O,EAC3C4D,EAAME,KAAK,CAAC2E,QAAQ,CAACtD,MAAM,CAAC3M,EAAQ8P,QAAQ,CAACtI,EAAE,CAAEoF,EAAOE,MAAM,CAAwB,IAAIC,IAAI,IAAIC,MAAM,GAKhH,OAJsB,MAAlBhN,EAAQgQ,MAAM,EAAYliB,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,WAC9D4M,EAAOE,MAAM,CAAwB,IAAIK,MAAM,CAACnN,EAAQgQ,MAAM,EAC9C,MAAhBhQ,EAAQ6O,IAAI,EAAY/gB,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,SAC5D4M,EAAOE,MAAM,CAAwB,IAAIjJ,MAAM,CAAC7D,EAAQ6O,IAAI,EACzDjC,CACX,EAWAxa,EAAMqb,eAAe,CAAG,SAAyBzN,CAAO,CAAE4M,CAAM,EAC5D,OAAO,IAAI,CAACD,MAAM,CAAC3M,EAAS4M,GAAQI,MAAM,EAC9C,EAaA5a,EAAMsb,MAAM,CAAG,SAAgBC,CAAM,CAAE7U,CAAM,EACrC,CAAE6U,CAAAA,aAAkB7C,CAAM,GAC1B6C,CAAAA,EAAS7C,EAAQpY,MAAM,CAACib,EAAM,EAElC,IADA,IAAIC,EAAM9U,AAAWiC,KAAAA,IAAXjC,EAAuB6U,EAAOE,GAAG,CAAGF,EAAOG,GAAG,CAAGhV,EAAQkH,EAAU,IAAIoL,EAAME,KAAK,CAAClZ,KAAK,CAC3Fub,EAAOG,GAAG,CAAGF,GAAK,CACrB,IAAIhO,EAAM+N,EAAOb,MAAM,GACvB,OAAQlN,IAAQ,GAChB,KAAK,EACDI,EAAQA,OAAO,CAAG2N,EAAO9J,MAAM,GAC/B,KACJ,MAAK,EACG,CAAE7D,CAAAA,EAAQ8P,QAAQ,EAAI9P,EAAQ8P,QAAQ,CAAChX,MAAM,AAAD,GAC5CkH,CAAAA,EAAQ8P,QAAQ,CAAG,EAAE,AAAD,EACxB9P,EAAQ8P,QAAQ,CAACjT,IAAI,CAACuO,EAAME,KAAK,CAAC2E,QAAQ,CAACvC,MAAM,CAACC,EAAQA,EAAOb,MAAM,KACvE,KACJ,MAAK,EACD9M,EAAQgQ,MAAM,CAAGrC,EAAOR,MAAM,GAC9B,KACJ,MAAK,EACDnN,EAAQ6O,IAAI,CAAGlB,EAAO9J,MAAM,GAC5B,KACJ,SACI8J,EAAOI,QAAQ,CAACnO,AAAM,EAANA,EAEpB,CACJ,CACA,OAAOI,CACX,EAYA5N,EAAM4b,eAAe,CAAG,SAAyBL,CAAM,EAGnD,MAFI,CAAEA,CAAAA,aAAkB7C,CAAM,GAC1B6C,CAAAA,EAAS,IAAI7C,EAAQ6C,EAAM,EACxB,IAAI,CAACD,MAAM,CAACC,EAAQA,EAAOb,MAAM,GAC5C,EAUA1a,EAAM6b,MAAM,CAAG,SAAgBjO,CAAO,EAClC,GAAI,AAAmB,UAAnB,OAAOA,GAAwBA,AAAY,OAAZA,EAC/B,MAAO,kBACX,GAAIA,AAAmB,MAAnBA,EAAQA,OAAO,EAAYA,EAAQ5F,cAAc,CAAC,YAC9C,CAAC8Q,EAAMmD,QAAQ,CAACrO,EAAQA,OAAO,EAC/B,MAAO,2BACf,GAAIA,AAAoB,MAApBA,EAAQ8P,QAAQ,EAAY9P,EAAQ5F,cAAc,CAAC,YAAa,CAChE,GAAI,CAACpB,MAAMqF,OAAO,CAAC2B,EAAQ8P,QAAQ,EAC/B,MAAO,2BACX,IAAK,IAAItI,EAAI,EAAGA,EAAIxH,EAAQ8P,QAAQ,CAAChX,MAAM,CAAE,EAAE0O,EAAG,CAC9C,IAAIiD,EAAQW,EAAME,KAAK,CAAC2E,QAAQ,CAAChC,MAAM,CAACjO,EAAQ8P,QAAQ,CAACtI,EAAE,EAC3D,GAAIiD,EACA,MAAO,YAAcA,CAC7B,CACJ,QACA,AAAIzK,AAAkB,MAAlBA,EAAQgQ,MAAM,EAAYhQ,EAAQ5F,cAAc,CAAC,WAC7C,CAAC8Q,EAAMgD,SAAS,CAAClO,EAAQgQ,MAAM,GAAK,CAAEhQ,CAAAA,EAAQgQ,MAAM,EAAI9E,EAAMgD,SAAS,CAAClO,EAAQgQ,MAAM,CAAC7B,GAAG,GAAKjD,EAAMgD,SAAS,CAAClO,EAAQgQ,MAAM,CAAC5B,IAAI,GAC3H,gCACXpO,AAAgB,MAAhBA,EAAQ6O,IAAI,EAAY7O,EAAQ5F,cAAc,CAAC,SAC3C,CAAC8Q,EAAMmD,QAAQ,CAACrO,EAAQ6O,IAAI,EACrB,wBACR,IACX,EAWAzc,EAAMkc,QAAQ,CAAG,SAAkBtO,CAAO,CAAE5O,CAAO,EAC3C,CAACA,GACDA,CAAAA,EAAU,CAAC,GACf,IAAIwM,EAAS,CAAC,EAUd,GATIxM,CAAAA,EAAQ8e,MAAM,EAAI9e,EAAQmd,QAAQ,AAAD,GACjC3Q,CAAAA,EAAOkS,QAAQ,CAAG,EAAE,AAAD,EACnB1e,EAAQmd,QAAQ,GAChB3Q,EAAOoC,OAAO,CAAG,GACjBpC,EAAOoS,MAAM,CAAG,EAChBpS,EAAOiR,IAAI,CAAG,IAEK,MAAnB7O,EAAQA,OAAO,EAAYA,EAAQ5F,cAAc,CAAC,YAClDwD,CAAAA,EAAOoC,OAAO,CAAGA,EAAQA,OAAO,AAAD,EAC/BA,EAAQ8P,QAAQ,EAAI9P,EAAQ8P,QAAQ,CAAChX,MAAM,CAAE,CAC7C8E,EAAOkS,QAAQ,CAAG,EAAE,CACpB,IAAK,IAAID,EAAI,EAAGA,EAAI7P,EAAQ8P,QAAQ,CAAChX,MAAM,CAAE,EAAE+W,EAC3CjS,EAAOkS,QAAQ,CAACD,EAAE,CAAGzE,EAAME,KAAK,CAAC2E,QAAQ,CAAC3B,QAAQ,CAACtO,EAAQ8P,QAAQ,CAACD,EAAE,CAAEze,EAChF,CAQA,OAPsB,MAAlB4O,EAAQgQ,MAAM,EAAYhQ,EAAQ5F,cAAc,CAAC,YAC7C,AAA0B,UAA1B,OAAO4F,EAAQgQ,MAAM,CACrBpS,EAAOoS,MAAM,CAAG5e,EAAQod,KAAK,GAAK/H,OAASA,OAAOzG,EAAQgQ,MAAM,EAAIhQ,EAAQgQ,MAAM,CAElFpS,EAAOoS,MAAM,CAAG5e,EAAQod,KAAK,GAAK/H,OAASyE,EAAMuD,IAAI,CAAC9U,SAAS,CAAC5K,QAAQ,CAACyL,IAAI,CAACwF,EAAQgQ,MAAM,EAAI5e,EAAQod,KAAK,GAAKE,OAAS,IAAIxD,EAAMyD,QAAQ,CAAC3O,EAAQgQ,MAAM,CAAC7B,GAAG,GAAK,EAAGnO,EAAQgQ,MAAM,CAAC5B,IAAI,GAAK,GAAGQ,QAAQ,CAAC,IAAQ5O,EAAQgQ,MAAM,EACtN,MAAhBhQ,EAAQ6O,IAAI,EAAY7O,EAAQ5F,cAAc,CAAC,SAC/CwD,CAAAA,EAAOiR,IAAI,CAAG7O,EAAQ6O,IAAI,AAAD,EACtBjR,CACX,EASAxL,EAAMuH,SAAS,CAACoV,MAAM,CAAG,WACrB,OAAO,IAAI,CAAC9N,WAAW,CAACqN,QAAQ,CAAC,IAAI,CAAEzD,EAAUM,IAAI,CAAC6D,aAAa,CACvE,EAEO5c,CACX,IAEAkZ,EAAM4B,IAAI,CAAG,AAAC,eA+dF+B,EAAiBzd,EA3czB,SAAS0b,EAAK3B,CAAU,EAGpB,GAFA,IAAI,CAAC4E,cAAc,CAAG,CAAC,EACvB,IAAI,CAACC,eAAe,CAAG,CAAC,EACpB7E,EACA,IAAK,IAAItR,EAAOnM,OAAOmM,IAAI,CAACsR,GAAa/D,EAAI,EAAGA,EAAIvN,EAAKnB,MAAM,CAAE,EAAE0O,EACpC,MAAvB+D,CAAU,CAACtR,CAAI,CAACuN,EAAE,CAAC,EACnB,KAAI,CAACvN,CAAI,CAACuN,EAAE,CAAC,CAAG+D,CAAU,CAACtR,CAAI,CAACuN,EAAE,CAAC,AAAD,CAClD,CAkdA,OA1cA0F,EAAKvT,SAAS,CAACyO,MAAM,CAAG,EAQxB8E,EAAKvT,SAAS,CAACwW,cAAc,CAAGjF,EAAMuE,WAAW,CAQjDvC,EAAKvT,SAAS,CAACyW,eAAe,CAAGlF,EAAMuE,WAAW,CAQlDvC,EAAKvT,SAAS,CAAC0W,UAAU,CAAG,EAU5BnD,EAAKxa,MAAM,CAAG,SAAgB6Y,CAAU,EACpC,OAAO,IAAI2B,EAAK3B,EACpB,EAWA2B,EAAKP,MAAM,CAAG,SAAgB3M,CAAO,CAAE4M,CAAM,EAKzC,GAJI,CAACA,GACDA,CAAAA,EAAS5B,EAAQtY,MAAM,EAAC,EACN,MAAlBsN,EAAQoI,MAAM,EAAYta,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,WAC9D4M,EAAOE,MAAM,CAAwB,GAAGsC,KAAK,CAACpP,EAAQoI,MAAM,EAC5DpI,AAA0B,MAA1BA,EAAQmQ,cAAc,EAAYriB,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,kBACtE,IAAK,IAAI/F,EAAOnM,OAAOmM,IAAI,CAAC+F,EAAQmQ,cAAc,EAAG3I,EAAI,EAAGA,EAAIvN,EAAKnB,MAAM,CAAE,EAAE0O,EAC3EoF,EAAOE,MAAM,CAAwB,IAAIC,IAAI,GAAGD,MAAM,CAAwB,IAAIjJ,MAAM,CAAC5J,CAAI,CAACuN,EAAE,EAChG4D,EAAME,KAAK,CAAC4B,IAAI,CAACoD,MAAM,CAAC3D,MAAM,CAAC3M,EAAQmQ,cAAc,CAAClW,CAAI,CAACuN,EAAE,CAAC,CAAEoF,EAAOE,MAAM,CAAwB,IAAIC,IAAI,IAAIC,MAAM,GAAGA,MAAM,GAExI,GAAIhN,AAA2B,MAA3BA,EAAQoQ,eAAe,EAAYtiB,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,mBACvE,IAAK,IAAI/F,EAAOnM,OAAOmM,IAAI,CAAC+F,EAAQoQ,eAAe,EAAG5I,EAAI,EAAGA,EAAIvN,EAAKnB,MAAM,CAAE,EAAE0O,EAC5EoF,EAAOE,MAAM,CAAwB,IAAIC,IAAI,GAAGD,MAAM,CAAwB,IAAIjJ,MAAM,CAAC5J,CAAI,CAACuN,EAAE,EAChG4D,EAAME,KAAK,CAAC4B,IAAI,CAACoD,MAAM,CAAC3D,MAAM,CAAC3M,EAAQoQ,eAAe,CAACnW,CAAI,CAACuN,EAAE,CAAC,CAAEoF,EAAOE,MAAM,CAAwB,IAAIC,IAAI,IAAIC,MAAM,GAAGA,MAAM,GAIzI,OAF0B,MAAtBhN,EAAQqQ,UAAU,EAAYviB,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,eAClE4M,EAAOE,MAAM,CAAwB,IAAIA,MAAM,CAAC9M,EAAQqQ,UAAU,EAC/DzD,CACX,EAWAM,EAAKO,eAAe,CAAG,SAAyBzN,CAAO,CAAE4M,CAAM,EAC3D,OAAO,IAAI,CAACD,MAAM,CAAC3M,EAAS4M,GAAQI,MAAM,EAC9C,EAaAE,EAAKQ,MAAM,CAAG,SAAgBC,CAAM,CAAE7U,CAAM,EACpC,CAAE6U,CAAAA,aAAkB7C,CAAM,GAC1B6C,CAAAA,EAAS7C,EAAQpY,MAAM,CAACib,EAAM,EAElC,IADA,IAAqGpU,EAAjGqU,EAAM9U,AAAWiC,KAAAA,IAAXjC,EAAuB6U,EAAOE,GAAG,CAAGF,EAAOG,GAAG,CAAGhV,EAAQkH,EAAU,IAAIoL,EAAME,KAAK,CAAC4B,IAAI,CAC1FS,EAAOG,GAAG,CAAGF,GAAK,CACrB,IAAIhO,EAAM+N,EAAOb,MAAM,GACvB,OAAQlN,IAAQ,GAChB,KAAK,EACDI,EAAQoI,MAAM,CAAGuF,EAAOyB,KAAK,GAC7B,KACJ,MAAK,EACDzB,EAAO+B,IAAI,GAAG5B,GAAG,GACb9N,EAAQmQ,cAAc,GAAKjF,EAAMuE,WAAW,EAC5CzP,CAAAA,EAAQmQ,cAAc,CAAG,CAAC,GAC9B5W,EAAMoU,EAAO9J,MAAM,GACnB8J,EAAOG,GAAG,GACV9N,EAAQmQ,cAAc,CAAC5W,EAAI,CAAG6R,EAAME,KAAK,CAAC4B,IAAI,CAACoD,MAAM,CAAC5C,MAAM,CAACC,EAAQA,EAAOb,MAAM,IAClF,KACJ,MAAK,EACDa,EAAO+B,IAAI,GAAG5B,GAAG,GACb9N,EAAQoQ,eAAe,GAAKlF,EAAMuE,WAAW,EAC7CzP,CAAAA,EAAQoQ,eAAe,CAAG,CAAC,GAC/B7W,EAAMoU,EAAO9J,MAAM,GACnB8J,EAAOG,GAAG,GACV9N,EAAQoQ,eAAe,CAAC7W,EAAI,CAAG6R,EAAME,KAAK,CAAC4B,IAAI,CAACoD,MAAM,CAAC5C,MAAM,CAACC,EAAQA,EAAOb,MAAM,IACnF,KACJ,MAAK,EACD9M,EAAQqQ,UAAU,CAAG1C,EAAOb,MAAM,GAClC,KACJ,SACIa,EAAOI,QAAQ,CAACnO,AAAM,EAANA,EAEpB,CACJ,CACA,OAAOI,CACX,EAYAkN,EAAKc,eAAe,CAAG,SAAyBL,CAAM,EAGlD,MAFI,CAAEA,CAAAA,aAAkB7C,CAAM,GAC1B6C,CAAAA,EAAS,IAAI7C,EAAQ6C,EAAM,EACxB,IAAI,CAACD,MAAM,CAACC,EAAQA,EAAOb,MAAM,GAC5C,EAUAI,EAAKe,MAAM,CAAG,SAAgBjO,CAAO,EACjC,GAAI,AAAmB,UAAnB,OAAOA,GAAwBA,AAAY,OAAZA,EAC/B,MAAO,kBACX,GAAIA,AAAkB,MAAlBA,EAAQoI,MAAM,EAAYpI,EAAQ5F,cAAc,CAAC,UACjD,OAAQ4F,EAAQoI,MAAM,EACtB,QACI,MAAO,6BACX,MAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EAEL,CACJ,GAAIpI,AAA0B,MAA1BA,EAAQmQ,cAAc,EAAYnQ,EAAQ5F,cAAc,CAAC,kBAAmB,CAC5E,GAAI,CAAC8Q,EAAMpM,QAAQ,CAACkB,EAAQmQ,cAAc,EACtC,MAAO,kCAEX,IAAK,IADD5W,EAAMzL,OAAOmM,IAAI,CAAC+F,EAAQmQ,cAAc,EACnC3I,EAAI,EAAGA,EAAIjO,EAAIT,MAAM,CAAE,EAAE0O,EAAG,CACjC,IAAIiD,EAAQW,EAAME,KAAK,CAAC4B,IAAI,CAACoD,MAAM,CAACrC,MAAM,CAACjO,EAAQmQ,cAAc,CAAC5W,CAAG,CAACiO,EAAE,CAAC,EACzE,GAAIiD,EACA,MAAO,kBAAoBA,CACnC,CACJ,CACA,GAAIzK,AAA2B,MAA3BA,EAAQoQ,eAAe,EAAYpQ,EAAQ5F,cAAc,CAAC,mBAAoB,CAC9E,GAAI,CAAC8Q,EAAMpM,QAAQ,CAACkB,EAAQoQ,eAAe,EACvC,MAAO,mCAEX,IAAK,IADD7W,EAAMzL,OAAOmM,IAAI,CAAC+F,EAAQoQ,eAAe,EACpC5I,EAAI,EAAGA,EAAIjO,EAAIT,MAAM,CAAE,EAAE0O,EAAG,CACjC,IAAIiD,EAAQW,EAAME,KAAK,CAAC4B,IAAI,CAACoD,MAAM,CAACrC,MAAM,CAACjO,EAAQoQ,eAAe,CAAC7W,CAAG,CAACiO,EAAE,CAAC,EAC1E,GAAIiD,EACA,MAAO,mBAAqBA,CACpC,CACJ,QACA,AAAIzK,AAAsB,MAAtBA,EAAQqQ,UAAU,EAAYrQ,EAAQ5F,cAAc,CAAC,eACjD,CAAC8Q,EAAMgD,SAAS,CAAClO,EAAQqQ,UAAU,EAC5B,+BACR,IACX,EAWAnD,EAAKoB,QAAQ,CAAG,SAAkBtO,CAAO,CAAE5O,CAAO,EAC1C,CAACA,GACDA,CAAAA,EAAU,CAAC,GACf,IAWIue,EAXA/R,EAAS,CAAC,EAYd,GAXIxM,CAAAA,EAAQwe,OAAO,EAAIxe,EAAQmd,QAAQ,AAAD,IAClC3Q,EAAOuS,cAAc,CAAG,CAAC,EACzBvS,EAAOwS,eAAe,CAAG,CAAC,GAE1Bhf,EAAQmd,QAAQ,GAChB3Q,EAAOwK,MAAM,CAAGhX,EAAQke,KAAK,GAAK7I,OAAS,UAAY,EACvD7I,EAAOyS,UAAU,CAAG,GAEF,MAAlBrQ,EAAQoI,MAAM,EAAYpI,EAAQ5F,cAAc,CAAC,WACjDwD,CAAAA,EAAOwK,MAAM,CAAGhX,EAAQke,KAAK,GAAK7I,OAAS2E,EAAME,KAAK,CAAC4B,IAAI,CAACqD,MAAM,CAACvQ,EAAQoI,MAAM,CAAC,CAAGpI,EAAQoI,MAAM,AAAD,EAElGpI,EAAQmQ,cAAc,EAAI,AAACR,CAAAA,EAAQ7hB,OAAOmM,IAAI,CAAC+F,EAAQmQ,cAAc,GAAGrX,MAAM,CAAE,CAChF8E,EAAOuS,cAAc,CAAG,CAAC,EACzB,IAAK,IAAIN,EAAI,EAAGA,EAAIF,EAAM7W,MAAM,CAAE,EAAE+W,EAChCjS,EAAOuS,cAAc,CAACR,CAAK,CAACE,EAAE,CAAC,CAAGzE,EAAME,KAAK,CAAC4B,IAAI,CAACoD,MAAM,CAAChC,QAAQ,CAACtO,EAAQmQ,cAAc,CAACR,CAAK,CAACE,EAAE,CAAC,CAAEze,EAC7G,CACA,GAAI4O,EAAQoQ,eAAe,EAAI,AAACT,CAAAA,EAAQ7hB,OAAOmM,IAAI,CAAC+F,EAAQoQ,eAAe,GAAGtX,MAAM,CAAE,CAClF8E,EAAOwS,eAAe,CAAG,CAAC,EAC1B,IAAK,IAAIP,EAAI,EAAGA,EAAIF,EAAM7W,MAAM,CAAE,EAAE+W,EAChCjS,EAAOwS,eAAe,CAACT,CAAK,CAACE,EAAE,CAAC,CAAGzE,EAAME,KAAK,CAAC4B,IAAI,CAACoD,MAAM,CAAChC,QAAQ,CAACtO,EAAQoQ,eAAe,CAACT,CAAK,CAACE,EAAE,CAAC,CAAEze,EAC/G,CAGA,OAF0B,MAAtB4O,EAAQqQ,UAAU,EAAYrQ,EAAQ5F,cAAc,CAAC,eACrDwD,CAAAA,EAAOyS,UAAU,CAAGrQ,EAAQqQ,UAAU,AAAD,EAClCzS,CACX,EASAsP,EAAKvT,SAAS,CAACoV,MAAM,CAAG,WACpB,OAAO,IAAI,CAAC9N,WAAW,CAACqN,QAAQ,CAAC,IAAI,CAAEzD,EAAUM,IAAI,CAAC6D,aAAa,CACvE,EAEA9B,EAAKoD,MAAM,CAAG,AAAC,WAiBX,SAASA,EAAO/E,CAAU,EAEtB,GADA,IAAI,CAACtd,KAAK,CAAG,EAAE,CACXsd,EACA,IAAK,IAAItR,EAAOnM,OAAOmM,IAAI,CAACsR,GAAa/D,EAAI,EAAGA,EAAIvN,EAAKnB,MAAM,CAAE,EAAE0O,EACpC,MAAvB+D,CAAU,CAACtR,CAAI,CAACuN,EAAE,CAAC,EACnB,KAAI,CAACvN,CAAI,CAACuN,EAAE,CAAC,CAAG+D,CAAU,CAACtR,CAAI,CAACuN,EAAE,CAAC,AAAD,CAClD,CA2JA,OAnJA8I,EAAO3W,SAAS,CAAC1L,KAAK,CAAGid,EAAM6E,UAAU,CAUzCO,EAAO5d,MAAM,CAAG,SAAgB6Y,CAAU,EACtC,OAAO,IAAI+E,EAAO/E,EACtB,EAWA+E,EAAO3D,MAAM,CAAG,SAAgB3M,CAAO,CAAE4M,CAAM,EAG3C,GAFI,CAACA,GACDA,CAAAA,EAAS5B,EAAQtY,MAAM,EAAC,EACxBsN,AAAiB,MAAjBA,EAAQ/R,KAAK,EAAY+R,EAAQ/R,KAAK,CAAC6K,MAAM,CAC7C,IAAK,IAAI0O,EAAI,EAAGA,EAAIxH,EAAQ/R,KAAK,CAAC6K,MAAM,CAAE,EAAE0O,EACxCoF,EAAOE,MAAM,CAAwB,IAAIjJ,MAAM,CAAC7D,EAAQ/R,KAAK,CAACuZ,EAAE,EACxE,OAAOoF,CACX,EAWA0D,EAAO7C,eAAe,CAAG,SAAyBzN,CAAO,CAAE4M,CAAM,EAC7D,OAAO,IAAI,CAACD,MAAM,CAAC3M,EAAS4M,GAAQI,MAAM,EAC9C,EAaAsD,EAAO5C,MAAM,CAAG,SAAgBC,CAAM,CAAE7U,CAAM,EACtC,CAAE6U,CAAAA,aAAkB7C,CAAM,GAC1B6C,CAAAA,EAAS7C,EAAQpY,MAAM,CAACib,EAAM,EAElC,IADA,IAAIC,EAAM9U,AAAWiC,KAAAA,IAAXjC,EAAuB6U,EAAOE,GAAG,CAAGF,EAAOG,GAAG,CAAGhV,EAAQkH,EAAU,IAAIoL,EAAME,KAAK,CAAC4B,IAAI,CAACoD,MAAM,CACjG3C,EAAOG,GAAG,CAAGF,GAAK,CACrB,IAAIhO,EAAM+N,EAAOb,MAAM,GACvB,GAAQlN,IAAQ,GACX,EACG,CAAEI,CAAAA,EAAQ/R,KAAK,EAAI+R,EAAQ/R,KAAK,CAAC6K,MAAM,AAAD,GACtCkH,CAAAA,EAAQ/R,KAAK,CAAG,EAAE,AAAD,EACrB+R,EAAQ/R,KAAK,CAAC4O,IAAI,CAAC8Q,EAAO9J,MAAM,SAGhC8J,EAAOI,QAAQ,CAACnO,AAAM,EAANA,EAGxB,CACA,OAAOI,CACX,EAYAsQ,EAAOtC,eAAe,CAAG,SAAyBL,CAAM,EAGpD,MAFI,CAAEA,CAAAA,aAAkB7C,CAAM,GAC1B6C,CAAAA,EAAS,IAAI7C,EAAQ6C,EAAM,EACxB,IAAI,CAACD,MAAM,CAACC,EAAQA,EAAOb,MAAM,GAC5C,EAUAwD,EAAOrC,MAAM,CAAG,SAAgBjO,CAAO,EACnC,GAAI,AAAmB,UAAnB,OAAOA,GAAwBA,AAAY,OAAZA,EAC/B,MAAO,kBACX,GAAIA,AAAiB,MAAjBA,EAAQ/R,KAAK,EAAY+R,EAAQ5F,cAAc,CAAC,SAAU,CAC1D,GAAI,CAACpB,MAAMqF,OAAO,CAAC2B,EAAQ/R,KAAK,EAC5B,MAAO,wBACX,IAAK,IAAIuZ,EAAI,EAAGA,EAAIxH,EAAQ/R,KAAK,CAAC6K,MAAM,CAAE,EAAE0O,EACxC,GAAI,CAAC0D,EAAMmD,QAAQ,CAACrO,EAAQ/R,KAAK,CAACuZ,EAAE,EAChC,MAAO,0BACnB,CACA,OAAO,IACX,EAWA8I,EAAOhC,QAAQ,CAAG,SAAkBtO,CAAO,CAAE5O,CAAO,EAC5C,CAACA,GACDA,CAAAA,EAAU,CAAC,GACf,IAAIwM,EAAS,CAAC,EAGd,GAFIxM,CAAAA,EAAQ8e,MAAM,EAAI9e,EAAQmd,QAAQ,AAAD,GACjC3Q,CAAAA,EAAO3P,KAAK,CAAG,EAAE,AAAD,EAChB+R,EAAQ/R,KAAK,EAAI+R,EAAQ/R,KAAK,CAAC6K,MAAM,CAAE,CACvC8E,EAAO3P,KAAK,CAAG,EAAE,CACjB,IAAK,IAAI4hB,EAAI,EAAGA,EAAI7P,EAAQ/R,KAAK,CAAC6K,MAAM,CAAE,EAAE+W,EACxCjS,EAAO3P,KAAK,CAAC4hB,EAAE,CAAG7P,EAAQ/R,KAAK,CAAC4hB,EAAE,AAC1C,CACA,OAAOjS,CACX,EASA0S,EAAO3W,SAAS,CAACoV,MAAM,CAAG,WACtB,OAAO,IAAI,CAAC9N,WAAW,CAACqN,QAAQ,CAAC,IAAI,CAAEzD,EAAUM,IAAI,CAAC6D,aAAa,CACvE,EAEOsB,CACX,IAiBApD,EAAKqD,MAAM,EAEP/e,CADqBA,EAAS1D,OAAO4E,MAAM,CAAvCuc,EAAa,CAAC,GACZ,CAACA,CAAU,CAAC,EAAE,CAAG,UAAU,CAAG,EACpCzd,CAAM,CAACyd,CAAU,CAAC,EAAE,CAAG,UAAU,CAAG,EACpCzd,CAAM,CAACyd,CAAU,CAAC,EAAE,CAAG,MAAM,CAAG,EAChCzd,CAAM,CAACyd,CAAU,CAAC,EAAE,CAAG,OAAO,CAAG,EACjCzd,CAAM,CAACyd,CAAU,CAAC,EAAE,CAAG,OAAO,CAAG,EACjCzd,CAAM,CAACyd,CAAU,CAAC,EAAE,CAAG,MAAM,CAAG,EAChCzd,CAAM,CAACyd,CAAU,CAAC,EAAE,CAAG,SAAS,CAAG,EACnCzd,CAAM,CAACyd,CAAU,CAAC,EAAE,CAAG,QAAQ,CAAG,EAClCzd,CAAM,CAACyd,CAAU,CAAC,EAAE,CAAG,UAAU,CAAG,EACpCzd,CAAM,CAACyd,CAAU,CAAC,EAAE,CAAG,QAAQ,CAAG,EAC3Bzd,GAGJ0b,CACX,IAEA5B,EAAM2E,QAAQ,CAAG,AAAC,WAkBd,SAASA,EAAS1E,CAAU,EACxB,GAAIA,EACA,IAAK,IAAItR,EAAOnM,OAAOmM,IAAI,CAACsR,GAAa/D,EAAI,EAAGA,EAAIvN,EAAKnB,MAAM,CAAE,EAAE0O,EACpC,MAAvB+D,CAAU,CAACtR,CAAI,CAACuN,EAAE,CAAC,EACnB,KAAI,CAACvN,CAAI,CAACuN,EAAE,CAAC,CAAG+D,CAAU,CAACtR,CAAI,CAACuN,EAAE,CAAC,AAAD,CAClD,CAqKA,OA7JAyI,EAAStW,SAAS,CAAC6W,IAAI,CAAG,EAQ1BP,EAAStW,SAAS,CAAC8W,MAAM,CAAG,EAU5BR,EAASvd,MAAM,CAAG,SAAgB6Y,CAAU,EACxC,OAAO,IAAI0E,EAAS1E,EACxB,EAWA0E,EAAStD,MAAM,CAAG,SAAgB3M,CAAO,CAAE4M,CAAM,EAO7C,MANI,CAACA,GACDA,CAAAA,EAAS5B,EAAQtY,MAAM,EAAC,EACR,MAAhBsN,EAAQwQ,IAAI,EAAY1iB,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,SAC5D4M,EAAOE,MAAM,CAAwB,GAAGA,MAAM,CAAC9M,EAAQwQ,IAAI,EACzC,MAAlBxQ,EAAQyQ,MAAM,EAAY3iB,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,WAC9D4M,EAAOE,MAAM,CAAwB,IAAIA,MAAM,CAAC9M,EAAQyQ,MAAM,EAC3D7D,CACX,EAWAqD,EAASxC,eAAe,CAAG,SAAyBzN,CAAO,CAAE4M,CAAM,EAC/D,OAAO,IAAI,CAACD,MAAM,CAAC3M,EAAS4M,GAAQI,MAAM,EAC9C,EAaAiD,EAASvC,MAAM,CAAG,SAAgBC,CAAM,CAAE7U,CAAM,EACxC,CAAE6U,CAAAA,aAAkB7C,CAAM,GAC1B6C,CAAAA,EAAS7C,EAAQpY,MAAM,CAACib,EAAM,EAElC,IADA,IAAIC,EAAM9U,AAAWiC,KAAAA,IAAXjC,EAAuB6U,EAAOE,GAAG,CAAGF,EAAOG,GAAG,CAAGhV,EAAQkH,EAAU,IAAIoL,EAAME,KAAK,CAAC2E,QAAQ,CAC9FtC,EAAOG,GAAG,CAAGF,GAAK,CACrB,IAAIhO,EAAM+N,EAAOb,MAAM,GACvB,OAAQlN,IAAQ,GAChB,KAAK,EACDI,EAAQwQ,IAAI,CAAG7C,EAAOb,MAAM,GAC5B,KACJ,MAAK,EACD9M,EAAQyQ,MAAM,CAAG9C,EAAOb,MAAM,GAC9B,KACJ,SACIa,EAAOI,QAAQ,CAACnO,AAAM,EAANA,EAEpB,CACJ,CACA,OAAOI,CACX,EAYAiQ,EAASjC,eAAe,CAAG,SAAyBL,CAAM,EAGtD,MAFI,CAAEA,CAAAA,aAAkB7C,CAAM,GAC1B6C,CAAAA,EAAS,IAAI7C,EAAQ6C,EAAM,EACxB,IAAI,CAACD,MAAM,CAACC,EAAQA,EAAOb,MAAM,GAC5C,EAUAmD,EAAShC,MAAM,CAAG,SAAgBjO,CAAO,QACrC,AAAI,AAAmB,UAAnB,OAAOA,GAAwBA,AAAY,OAAZA,EACxB,kBACPA,AAAgB,MAAhBA,EAAQwQ,IAAI,EAAYxQ,EAAQ5F,cAAc,CAAC,SAC3C,CAAC8Q,EAAMgD,SAAS,CAAClO,EAAQwQ,IAAI,EACtB,yBACXxQ,AAAkB,MAAlBA,EAAQyQ,MAAM,EAAYzQ,EAAQ5F,cAAc,CAAC,WAC7C,CAAC8Q,EAAMgD,SAAS,CAAClO,EAAQyQ,MAAM,EACxB,2BACR,IACX,EAWAR,EAAS3B,QAAQ,CAAG,SAAkBtO,CAAO,CAAE5O,CAAO,EAC9C,CAACA,GACDA,CAAAA,EAAU,CAAC,GACf,IAAIwM,EAAS,CAAC,EASd,OARIxM,EAAQmd,QAAQ,GAChB3Q,EAAO4S,IAAI,CAAG,EACd5S,EAAO6S,MAAM,CAAG,GAEA,MAAhBzQ,EAAQwQ,IAAI,EAAYxQ,EAAQ5F,cAAc,CAAC,SAC/CwD,CAAAA,EAAO4S,IAAI,CAAGxQ,EAAQwQ,IAAI,AAAD,EACP,MAAlBxQ,EAAQyQ,MAAM,EAAYzQ,EAAQ5F,cAAc,CAAC,WACjDwD,CAAAA,EAAO6S,MAAM,CAAGzQ,EAAQyQ,MAAM,AAAD,EAC1B7S,CACX,EASAqS,EAAStW,SAAS,CAACoV,MAAM,CAAG,WACxB,OAAO,IAAI,CAAC9N,WAAW,CAACqN,QAAQ,CAAC,IAAI,CAAEzD,EAAUM,IAAI,CAAC6D,aAAa,CACvE,EAEOiB,CACX,IAEA3E,EAAM8B,IAAI,CAAG,AAAC,eAoHNsD,EA1FJ,SAAStD,EAAK7B,CAAU,EAGpB,GAFA,IAAI,CAACd,KAAK,CAAG,EAAE,CACf,IAAI,CAACkG,KAAK,CAAG,EAAE,CACXpF,EACA,IAAK,IAAItR,EAAOnM,OAAOmM,IAAI,CAACsR,GAAa/D,EAAI,EAAGA,EAAIvN,EAAKnB,MAAM,CAAE,EAAE0O,EACpC,MAAvB+D,CAAU,CAACtR,CAAI,CAACuN,EAAE,CAAC,EACnB,KAAI,CAACvN,CAAI,CAACuN,EAAE,CAAC,CAAG+D,CAAU,CAACtR,CAAI,CAACuN,EAAE,CAAC,AAAD,CAClD,CAwXA,OAhXA4F,EAAKzT,SAAS,CAACiX,YAAY,CAAG,GAQ9BxD,EAAKzT,SAAS,CAACd,KAAK,CAAG,EAQvBuU,EAAKzT,SAAS,CAACkX,iBAAiB,CAAG,GAQnCzD,EAAKzT,SAAS,CAACqJ,IAAI,CAAG,GAQtBoK,EAAKzT,SAAS,CAAC5G,UAAU,CAAG,GAQ5Bqa,EAAKzT,SAAS,CAACwS,WAAW,CAAG,KAQ7BiB,EAAKzT,SAAS,CAAC6R,SAAS,CAAG,EAQ3B4B,EAAKzT,SAAS,CAAC8R,OAAO,CAAG,EAQzB2B,EAAKzT,SAAS,CAAC8Q,KAAK,CAAGS,EAAM6E,UAAU,CAQvC3C,EAAKzT,SAAS,CAACgX,KAAK,CAAGzF,EAAM6E,UAAU,CAWvCjiB,OAAOC,cAAc,CAACqf,EAAKzT,SAAS,CAAE,KAAM,CACxC7F,IAAKoX,EAAM4F,WAAW,CAACJ,EAAe,CAAC,eAAgB,QAAQ,EAC/DjX,IAAKyR,EAAM6F,WAAW,CAACL,EAC3B,GAUAtD,EAAK1a,MAAM,CAAG,SAAgB6Y,CAAU,EACpC,OAAO,IAAI6B,EAAK7B,EACpB,EAWA6B,EAAKT,MAAM,CAAG,SAAgB3M,CAAO,CAAE4M,CAAM,EAezC,GAdI,CAACA,GACDA,CAAAA,EAAS5B,EAAQtY,MAAM,EAAC,EACA,MAAxBsN,EAAQ4Q,YAAY,EAAY9iB,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,iBACpE4M,EAAOE,MAAM,CAAwB,IAAIjJ,MAAM,CAAC7D,EAAQ4Q,YAAY,EACnD,MAAjB5Q,EAAQnH,KAAK,EAAY/K,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,UAC7D4M,EAAOE,MAAM,CAAwB,IAAIA,MAAM,CAAC9M,EAAQnH,KAAK,EAC7C,MAAhBmH,EAAQgD,IAAI,EAAYlV,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,SAC5D4M,EAAOE,MAAM,CAAwB,IAAIjJ,MAAM,CAAC7D,EAAQgD,IAAI,EACrC,MAAvBhD,EAAQmM,WAAW,EAAYre,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,gBACnEoL,EAAME,KAAK,CAAC+B,WAAW,CAACV,MAAM,CAAC3M,EAAQmM,WAAW,CAAES,EAAOE,MAAM,CAAwB,IAAIC,IAAI,IAAIC,MAAM,GACtF,MAArBhN,EAAQwL,SAAS,EAAY1d,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,cACjE4M,EAAOE,MAAM,CAAwB,IAAIK,MAAM,CAACnN,EAAQwL,SAAS,EAC9C,MAAnBxL,EAAQyL,OAAO,EAAY3d,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,YAC/D4M,EAAOE,MAAM,CAAwB,IAAIK,MAAM,CAACnN,EAAQyL,OAAO,EAC/DzL,AAAiB,MAAjBA,EAAQyK,KAAK,EAAYzK,EAAQyK,KAAK,CAAC3R,MAAM,CAC7C,IAAK,IAAI0O,EAAI,EAAGA,EAAIxH,EAAQyK,KAAK,CAAC3R,MAAM,CAAE,EAAE0O,EACxC4D,EAAME,KAAK,CAAClZ,KAAK,CAACua,MAAM,CAAC3M,EAAQyK,KAAK,CAACjD,EAAE,CAAEoF,EAAOE,MAAM,CAAyB,IAAIC,IAAI,IAAIC,MAAM,GAC3G,GAAIhN,AAAiB,MAAjBA,EAAQ2Q,KAAK,EAAY3Q,EAAQ2Q,KAAK,CAAC7X,MAAM,CAC7C,IAAK,IAAI0O,EAAI,EAAGA,EAAIxH,EAAQ2Q,KAAK,CAAC7X,MAAM,CAAE,EAAE0O,EACxC4D,EAAME,KAAK,CAAC8B,IAAI,CAACT,MAAM,CAAC3M,EAAQ2Q,KAAK,CAACnJ,EAAE,CAAEoF,EAAOE,MAAM,CAAyB,IAAIC,IAAI,IAAIC,MAAM,GAK1G,OAJ0B,MAAtBhN,EAAQjN,UAAU,EAAYjF,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,eAClE4M,EAAOE,MAAM,CAAyB,KAAKjJ,MAAM,CAAC7D,EAAQjN,UAAU,EACvC,MAA7BiN,EAAQ6Q,iBAAiB,EAAY/iB,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,sBACzE4M,EAAOE,MAAM,CAAyB,KAAKjJ,MAAM,CAAC7D,EAAQ6Q,iBAAiB,EACxEjE,CACX,EAWAQ,EAAKK,eAAe,CAAG,SAAyBzN,CAAO,CAAE4M,CAAM,EAC3D,OAAO,IAAI,CAACD,MAAM,CAAC3M,EAAS4M,GAAQI,MAAM,EAC9C,EAaAI,EAAKM,MAAM,CAAG,SAAgBC,CAAM,CAAE7U,CAAM,EACpC,CAAE6U,CAAAA,aAAkB7C,CAAM,GAC1B6C,CAAAA,EAAS7C,EAAQpY,MAAM,CAACib,EAAM,EAElC,IADA,IAAIC,EAAM9U,AAAWiC,KAAAA,IAAXjC,EAAuB6U,EAAOE,GAAG,CAAGF,EAAOG,GAAG,CAAGhV,EAAQkH,EAAU,IAAIoL,EAAME,KAAK,CAAC8B,IAAI,CAC1FO,EAAOG,GAAG,CAAGF,GAAK,CACrB,IAAIhO,EAAM+N,EAAOb,MAAM,GACvB,OAAQlN,IAAQ,GAChB,KAAK,EACDI,EAAQ4Q,YAAY,CAAGjD,EAAO9J,MAAM,GACpC,KACJ,MAAK,EACD7D,EAAQnH,KAAK,CAAG8U,EAAOb,MAAM,GAC7B,KACJ,MAAK,GACD9M,EAAQ6Q,iBAAiB,CAAGlD,EAAO9J,MAAM,GACzC,KACJ,MAAK,EACD7D,EAAQgD,IAAI,CAAG2K,EAAO9J,MAAM,GAC5B,KACJ,MAAK,GACD7D,EAAQjN,UAAU,CAAG4a,EAAO9J,MAAM,GAClC,KACJ,MAAK,EACD7D,EAAQmM,WAAW,CAAGf,EAAME,KAAK,CAAC+B,WAAW,CAACK,MAAM,CAACC,EAAQA,EAAOb,MAAM,IAC1E,KACJ,MAAK,EACD9M,EAAQwL,SAAS,CAAGmC,EAAOR,MAAM,GACjC,KACJ,MAAK,EACDnN,EAAQyL,OAAO,CAAGkC,EAAOR,MAAM,GAC/B,KACJ,MAAK,GACG,CAAEnN,CAAAA,EAAQyK,KAAK,EAAIzK,EAAQyK,KAAK,CAAC3R,MAAM,AAAD,GACtCkH,CAAAA,EAAQyK,KAAK,CAAG,EAAE,AAAD,EACrBzK,EAAQyK,KAAK,CAAC5N,IAAI,CAACuO,EAAME,KAAK,CAAClZ,KAAK,CAACsb,MAAM,CAACC,EAAQA,EAAOb,MAAM,KACjE,KACJ,MAAK,GACG,CAAE9M,CAAAA,EAAQ2Q,KAAK,EAAI3Q,EAAQ2Q,KAAK,CAAC7X,MAAM,AAAD,GACtCkH,CAAAA,EAAQ2Q,KAAK,CAAG,EAAE,AAAD,EACrB3Q,EAAQ2Q,KAAK,CAAC9T,IAAI,CAACuO,EAAME,KAAK,CAAC8B,IAAI,CAACM,MAAM,CAACC,EAAQA,EAAOb,MAAM,KAChE,KACJ,SACIa,EAAOI,QAAQ,CAACnO,AAAM,EAANA,EAEpB,CACJ,CACA,OAAOI,CACX,EAYAoN,EAAKY,eAAe,CAAG,SAAyBL,CAAM,EAGlD,MAFI,CAAEA,CAAAA,aAAkB7C,CAAM,GAC1B6C,CAAAA,EAAS,IAAI7C,EAAQ6C,EAAM,EACxB,IAAI,CAACD,MAAM,CAACC,EAAQA,EAAOb,MAAM,GAC5C,EAUAM,EAAKa,MAAM,CAAG,SAAgBjO,CAAO,EACjC,GAAI,AAAmB,UAAnB,OAAOA,GAAwBA,AAAY,OAAZA,EAC/B,MAAO,kBACX,IAAIuL,EAAa,CAAC,EAClB,GAAIvL,AAAwB,MAAxBA,EAAQ4Q,YAAY,EAAY5Q,EAAQ5F,cAAc,CAAC,kBACvDmR,EAAWyF,EAAE,CAAG,EACZ,CAAC9F,EAAMmD,QAAQ,CAACrO,EAAQ4Q,YAAY,GACpC,MAAO,gCAEf,GAAI5Q,AAAiB,MAAjBA,EAAQnH,KAAK,EAAYmH,EAAQ5F,cAAc,CAAC,SAAU,CAC1D,GAAImR,AAAkB,IAAlBA,EAAWyF,EAAE,CACb,MAAO,sBAEX,GADAzF,EAAWyF,EAAE,CAAG,EACZ,CAAC9F,EAAMgD,SAAS,CAAClO,EAAQnH,KAAK,EAC9B,MAAO,yBACf,CACA,GAAImH,AAA6B,MAA7BA,EAAQ6Q,iBAAiB,EAAY7Q,EAAQ5F,cAAc,CAAC,sBACxD,CAAC8Q,EAAMmD,QAAQ,CAACrO,EAAQ6Q,iBAAiB,EACzC,MAAO,qCACf,GAAI7Q,AAAgB,MAAhBA,EAAQgD,IAAI,EAAYhD,EAAQ5F,cAAc,CAAC,SAC3C,CAAC8Q,EAAMmD,QAAQ,CAACrO,EAAQgD,IAAI,EAC5B,MAAO,wBACf,GAAIhD,AAAsB,MAAtBA,EAAQjN,UAAU,EAAYiN,EAAQ5F,cAAc,CAAC,eACjD,CAAC8Q,EAAMmD,QAAQ,CAACrO,EAAQjN,UAAU,EAClC,MAAO,8BACf,GAAIiN,AAAuB,MAAvBA,EAAQmM,WAAW,EAAYnM,EAAQ5F,cAAc,CAAC,eAAgB,CACtE,IAAIqQ,EAAQW,EAAME,KAAK,CAAC+B,WAAW,CAACY,MAAM,CAACjO,EAAQmM,WAAW,EAC9D,GAAI1B,EACA,MAAO,eAAiBA,CAChC,CACA,GAAIzK,AAAqB,MAArBA,EAAQwL,SAAS,EAAYxL,EAAQ5F,cAAc,CAAC,cAChD,CAAC8Q,EAAMgD,SAAS,CAAClO,EAAQwL,SAAS,GAAK,CAAExL,CAAAA,EAAQwL,SAAS,EAAIN,EAAMgD,SAAS,CAAClO,EAAQwL,SAAS,CAAC2C,GAAG,GAAKjD,EAAMgD,SAAS,CAAClO,EAAQwL,SAAS,CAAC4C,IAAI,GAC9I,MAAO,mCACf,GAAIpO,AAAmB,MAAnBA,EAAQyL,OAAO,EAAYzL,EAAQ5F,cAAc,CAAC,YAC9C,CAAC8Q,EAAMgD,SAAS,CAAClO,EAAQyL,OAAO,GAAK,CAAEzL,CAAAA,EAAQyL,OAAO,EAAIP,EAAMgD,SAAS,CAAClO,EAAQyL,OAAO,CAAC0C,GAAG,GAAKjD,EAAMgD,SAAS,CAAClO,EAAQyL,OAAO,CAAC2C,IAAI,GACtI,MAAO,iCACf,GAAIpO,AAAiB,MAAjBA,EAAQyK,KAAK,EAAYzK,EAAQ5F,cAAc,CAAC,SAAU,CAC1D,GAAI,CAACpB,MAAMqF,OAAO,CAAC2B,EAAQyK,KAAK,EAC5B,MAAO,wBACX,IAAK,IAAIjD,EAAI,EAAGA,EAAIxH,EAAQyK,KAAK,CAAC3R,MAAM,CAAE,EAAE0O,EAAG,CAC3C,IAAIiD,EAAQW,EAAME,KAAK,CAAClZ,KAAK,CAAC6b,MAAM,CAACjO,EAAQyK,KAAK,CAACjD,EAAE,EACrD,GAAIiD,EACA,MAAO,SAAWA,CAC1B,CACJ,CACA,GAAIzK,AAAiB,MAAjBA,EAAQ2Q,KAAK,EAAY3Q,EAAQ5F,cAAc,CAAC,SAAU,CAC1D,GAAI,CAACpB,MAAMqF,OAAO,CAAC2B,EAAQ2Q,KAAK,EAC5B,MAAO,wBACX,IAAK,IAAInJ,EAAI,EAAGA,EAAIxH,EAAQ2Q,KAAK,CAAC7X,MAAM,CAAE,EAAE0O,EAAG,CAC3C,IAAIiD,EAAQW,EAAME,KAAK,CAAC8B,IAAI,CAACa,MAAM,CAACjO,EAAQ2Q,KAAK,CAACnJ,EAAE,EACpD,GAAIiD,EACA,MAAO,SAAWA,CAC1B,CACJ,CACA,OAAO,IACX,EAWA2C,EAAKkB,QAAQ,CAAG,SAAkBtO,CAAO,CAAE5O,CAAO,EAC1C,CAACA,GACDA,CAAAA,EAAU,CAAC,GACf,IAAIwM,EAAS,CAAC,EAqCd,GApCIxM,CAAAA,EAAQ8e,MAAM,EAAI9e,EAAQmd,QAAQ,AAAD,IACjC3Q,EAAO6M,KAAK,CAAG,EAAE,CACjB7M,EAAO+S,KAAK,CAAG,EAAE,EAEjBvf,EAAQmd,QAAQ,GAChB3Q,EAAOoF,IAAI,CAAG,GACdpF,EAAOuO,WAAW,CAAG,KACrBvO,EAAO4N,SAAS,CAAG,EACnB5N,EAAO6N,OAAO,CAAG,EACjB7N,EAAO7K,UAAU,CAAG,GACpB6K,EAAOiT,iBAAiB,CAAG,IAEH,MAAxB7Q,EAAQ4Q,YAAY,EAAY5Q,EAAQ5F,cAAc,CAAC,kBACvDwD,EAAOgT,YAAY,CAAG5Q,EAAQ4Q,YAAY,CACtCxf,EAAQ6f,MAAM,EACdrT,CAAAA,EAAOoT,EAAE,CAAG,cAAa,GAEZ,MAAjBhR,EAAQnH,KAAK,EAAYmH,EAAQ5F,cAAc,CAAC,WAChDwD,EAAO/E,KAAK,CAAGmH,EAAQnH,KAAK,CACxBzH,EAAQ6f,MAAM,EACdrT,CAAAA,EAAOoT,EAAE,CAAG,OAAM,GAEN,MAAhBhR,EAAQgD,IAAI,EAAYhD,EAAQ5F,cAAc,CAAC,SAC/CwD,CAAAA,EAAOoF,IAAI,CAAGhD,EAAQgD,IAAI,AAAD,EACF,MAAvBhD,EAAQmM,WAAW,EAAYnM,EAAQ5F,cAAc,CAAC,gBACtDwD,CAAAA,EAAOuO,WAAW,CAAGf,EAAME,KAAK,CAAC+B,WAAW,CAACiB,QAAQ,CAACtO,EAAQmM,WAAW,CAAE/a,EAAO,EAC7D,MAArB4O,EAAQwL,SAAS,EAAYxL,EAAQ5F,cAAc,CAAC,eAChD,AAA6B,UAA7B,OAAO4F,EAAQwL,SAAS,CACxB5N,EAAO4N,SAAS,CAAGpa,EAAQod,KAAK,GAAK/H,OAASA,OAAOzG,EAAQwL,SAAS,EAAIxL,EAAQwL,SAAS,CAE3F5N,EAAO4N,SAAS,CAAGpa,EAAQod,KAAK,GAAK/H,OAASyE,EAAMuD,IAAI,CAAC9U,SAAS,CAAC5K,QAAQ,CAACyL,IAAI,CAACwF,EAAQwL,SAAS,EAAIpa,EAAQod,KAAK,GAAKE,OAAS,IAAIxD,EAAMyD,QAAQ,CAAC3O,EAAQwL,SAAS,CAAC2C,GAAG,GAAK,EAAGnO,EAAQwL,SAAS,CAAC4C,IAAI,GAAK,GAAGQ,QAAQ,CAAC,IAAQ5O,EAAQwL,SAAS,EAClO,MAAnBxL,EAAQyL,OAAO,EAAYzL,EAAQ5F,cAAc,CAAC,aAC9C,AAA2B,UAA3B,OAAO4F,EAAQyL,OAAO,CACtB7N,EAAO6N,OAAO,CAAGra,EAAQod,KAAK,GAAK/H,OAASA,OAAOzG,EAAQyL,OAAO,EAAIzL,EAAQyL,OAAO,CAErF7N,EAAO6N,OAAO,CAAGra,EAAQod,KAAK,GAAK/H,OAASyE,EAAMuD,IAAI,CAAC9U,SAAS,CAAC5K,QAAQ,CAACyL,IAAI,CAACwF,EAAQyL,OAAO,EAAIra,EAAQod,KAAK,GAAKE,OAAS,IAAIxD,EAAMyD,QAAQ,CAAC3O,EAAQyL,OAAO,CAAC0C,GAAG,GAAK,EAAGnO,EAAQyL,OAAO,CAAC2C,IAAI,GAAK,GAAGQ,QAAQ,CAAC,IAAQ5O,EAAQyL,OAAO,EAC3OzL,EAAQyK,KAAK,EAAIzK,EAAQyK,KAAK,CAAC3R,MAAM,CAAE,CACvC8E,EAAO6M,KAAK,CAAG,EAAE,CACjB,IAAK,IAAIoF,EAAI,EAAGA,EAAI7P,EAAQyK,KAAK,CAAC3R,MAAM,CAAE,EAAE+W,EACxCjS,EAAO6M,KAAK,CAACoF,EAAE,CAAGzE,EAAME,KAAK,CAAClZ,KAAK,CAACkc,QAAQ,CAACtO,EAAQyK,KAAK,CAACoF,EAAE,CAAEze,EACvE,CACA,GAAI4O,EAAQ2Q,KAAK,EAAI3Q,EAAQ2Q,KAAK,CAAC7X,MAAM,CAAE,CACvC8E,EAAO+S,KAAK,CAAG,EAAE,CACjB,IAAK,IAAId,EAAI,EAAGA,EAAI7P,EAAQ2Q,KAAK,CAAC7X,MAAM,CAAE,EAAE+W,EACxCjS,EAAO+S,KAAK,CAACd,EAAE,CAAGzE,EAAME,KAAK,CAAC8B,IAAI,CAACkB,QAAQ,CAACtO,EAAQ2Q,KAAK,CAACd,EAAE,CAAEze,EACtE,CAKA,OAJ0B,MAAtB4O,EAAQjN,UAAU,EAAYiN,EAAQ5F,cAAc,CAAC,eACrDwD,CAAAA,EAAO7K,UAAU,CAAGiN,EAAQjN,UAAU,AAAD,EACR,MAA7BiN,EAAQ6Q,iBAAiB,EAAY7Q,EAAQ5F,cAAc,CAAC,sBAC5DwD,CAAAA,EAAOiT,iBAAiB,CAAG7Q,EAAQ6Q,iBAAiB,AAAD,EAChDjT,CACX,EASAwP,EAAKzT,SAAS,CAACoV,MAAM,CAAG,WACpB,OAAO,IAAI,CAAC9N,WAAW,CAACqN,QAAQ,CAAC,IAAI,CAAEzD,EAAUM,IAAI,CAAC6D,aAAa,CACvE,EAEO5B,CACX,IAEA9B,EAAMiC,aAAa,CAAG,AAAC,eA8EfmD,EAxDJ,SAASnD,EAAchC,CAAU,EAC7B,GAAIA,EACA,IAAK,IAAItR,EAAOnM,OAAOmM,IAAI,CAACsR,GAAa/D,EAAI,EAAGA,EAAIvN,EAAKnB,MAAM,CAAE,EAAE0O,EACpC,MAAvB+D,CAAU,CAACtR,CAAI,CAACuN,EAAE,CAAC,EACnB,KAAI,CAACvN,CAAI,CAACuN,EAAE,CAAC,CAAG+D,CAAU,CAACtR,CAAI,CAACuN,EAAE,CAAC,AAAD,CAClD,CAi3EA,OAz2EA+F,EAAc5T,SAAS,CAACuX,QAAQ,CAAG,KAQnC3D,EAAc5T,SAAS,CAACwX,QAAQ,CAAG,KAQnC5D,EAAc5T,SAAS,CAACyX,KAAK,CAAG,KAQhC7D,EAAc5T,SAAS,CAAC0X,OAAO,CAAG,KAQlC9D,EAAc5T,SAAS,CAAC2X,KAAK,CAAG,KAQhC/D,EAAc5T,SAAS,CAAC4X,SAAS,CAAG,KAWpCzjB,OAAOC,cAAc,CAACwf,EAAc5T,SAAS,CAAE,OAAQ,CACnD7F,IAAKoX,EAAM4F,WAAW,CAACJ,EAAe,CAAC,WAAY,WAAY,QAAS,UAAW,QAAS,YAAY,EACxGjX,IAAKyR,EAAM6F,WAAW,CAACL,EAC3B,GAUAnD,EAAc7a,MAAM,CAAG,SAAgB6Y,CAAU,EAC7C,OAAO,IAAIgC,EAAchC,EAC7B,EAWAgC,EAAcZ,MAAM,CAAG,SAAgB3M,CAAO,CAAE4M,CAAM,EAelD,MAdI,CAACA,GACDA,CAAAA,EAAS5B,EAAQtY,MAAM,EAAC,EACJ,MAApBsN,EAAQkR,QAAQ,EAAYpjB,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,aAChEoL,EAAME,KAAK,CAACiC,aAAa,CAACiE,YAAY,CAAC7E,MAAM,CAAC3M,EAAQkR,QAAQ,CAAEtE,EAAOE,MAAM,CAAwB,IAAIC,IAAI,IAAIC,MAAM,GACnG,MAApBhN,EAAQmR,QAAQ,EAAYrjB,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,aAChEoL,EAAME,KAAK,CAACiC,aAAa,CAACkE,YAAY,CAAC9E,MAAM,CAAC3M,EAAQmR,QAAQ,CAAEvE,EAAOE,MAAM,CAAwB,IAAIC,IAAI,IAAIC,MAAM,GACtG,MAAjBhN,EAAQoR,KAAK,EAAYtjB,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,UAC7DoL,EAAME,KAAK,CAACiC,aAAa,CAACmE,SAAS,CAAC/E,MAAM,CAAC3M,EAAQoR,KAAK,CAAExE,EAAOE,MAAM,CAAwB,IAAIC,IAAI,IAAIC,MAAM,GAC9F,MAAnBhN,EAAQqR,OAAO,EAAYvjB,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,YAC/DoL,EAAME,KAAK,CAACiC,aAAa,CAACoE,WAAW,CAAChF,MAAM,CAAC3M,EAAQqR,OAAO,CAAEzE,EAAOE,MAAM,CAAwB,IAAIC,IAAI,IAAIC,MAAM,GACpG,MAAjBhN,EAAQsR,KAAK,EAAYxjB,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,UAC7DoL,EAAME,KAAK,CAACiC,aAAa,CAACqE,SAAS,CAACjF,MAAM,CAAC3M,EAAQsR,KAAK,CAAE1E,EAAOE,MAAM,CAAwB,IAAIC,IAAI,IAAIC,MAAM,GAC5F,MAArBhN,EAAQuR,SAAS,EAAYzjB,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,cACjEoL,EAAME,KAAK,CAACiC,aAAa,CAACsE,aAAa,CAAClF,MAAM,CAAC3M,EAAQuR,SAAS,CAAE3E,EAAOE,MAAM,CAAwB,IAAIC,IAAI,IAAIC,MAAM,GACtHJ,CACX,EAWAW,EAAcE,eAAe,CAAG,SAAyBzN,CAAO,CAAE4M,CAAM,EACpE,OAAO,IAAI,CAACD,MAAM,CAAC3M,EAAS4M,GAAQI,MAAM,EAC9C,EAaAO,EAAcG,MAAM,CAAG,SAAgBC,CAAM,CAAE7U,CAAM,EAC7C,CAAE6U,CAAAA,aAAkB7C,CAAM,GAC1B6C,CAAAA,EAAS7C,EAAQpY,MAAM,CAACib,EAAM,EAElC,IADA,IAAIC,EAAM9U,AAAWiC,KAAAA,IAAXjC,EAAuB6U,EAAOE,GAAG,CAAGF,EAAOG,GAAG,CAAGhV,EAAQkH,EAAU,IAAIoL,EAAME,KAAK,CAACiC,aAAa,CACnGI,EAAOG,GAAG,CAAGF,GAAK,CACrB,IAAIhO,EAAM+N,EAAOb,MAAM,GACvB,OAAQlN,IAAQ,GAChB,KAAK,EACDI,EAAQkR,QAAQ,CAAG9F,EAAME,KAAK,CAACiC,aAAa,CAACiE,YAAY,CAAC9D,MAAM,CAACC,EAAQA,EAAOb,MAAM,IACtF,KACJ,MAAK,EACD9M,EAAQmR,QAAQ,CAAG/F,EAAME,KAAK,CAACiC,aAAa,CAACkE,YAAY,CAAC/D,MAAM,CAACC,EAAQA,EAAOb,MAAM,IACtF,KACJ,MAAK,EACD9M,EAAQoR,KAAK,CAAGhG,EAAME,KAAK,CAACiC,aAAa,CAACmE,SAAS,CAAChE,MAAM,CAACC,EAAQA,EAAOb,MAAM,IAChF,KACJ,MAAK,EACD9M,EAAQqR,OAAO,CAAGjG,EAAME,KAAK,CAACiC,aAAa,CAACoE,WAAW,CAACjE,MAAM,CAACC,EAAQA,EAAOb,MAAM,IACpF,KACJ,MAAK,EACD9M,EAAQsR,KAAK,CAAGlG,EAAME,KAAK,CAACiC,aAAa,CAACqE,SAAS,CAAClE,MAAM,CAACC,EAAQA,EAAOb,MAAM,IAChF,KACJ,MAAK,EACD9M,EAAQuR,SAAS,CAAGnG,EAAME,KAAK,CAACiC,aAAa,CAACsE,aAAa,CAACnE,MAAM,CAACC,EAAQA,EAAOb,MAAM,IACxF,KACJ,SACIa,EAAOI,QAAQ,CAACnO,AAAM,EAANA,EAEpB,CACJ,CACA,OAAOI,CACX,EAYAuN,EAAcS,eAAe,CAAG,SAAyBL,CAAM,EAG3D,MAFI,CAAEA,CAAAA,aAAkB7C,CAAM,GAC1B6C,CAAAA,EAAS,IAAI7C,EAAQ6C,EAAM,EACxB,IAAI,CAACD,MAAM,CAACC,EAAQA,EAAOb,MAAM,GAC5C,EAUAS,EAAcU,MAAM,CAAG,SAAgBjO,CAAO,EAC1C,GAAI,AAAmB,UAAnB,OAAOA,GAAwBA,AAAY,OAAZA,EAC/B,MAAO,kBACX,IAAIuL,EAAa,CAAC,EAClB,GAAIvL,AAAoB,MAApBA,EAAQkR,QAAQ,EAAYlR,EAAQ5F,cAAc,CAAC,YAAa,CAChEmR,EAAW3c,IAAI,CAAG,EAEd,IAAI6b,EAAQW,EAAME,KAAK,CAACiC,aAAa,CAACiE,YAAY,CAACvD,MAAM,CAACjO,EAAQkR,QAAQ,EAC1E,GAAIzG,EACA,MAAO,YAAcA,CAEjC,CACA,GAAIzK,AAAoB,MAApBA,EAAQmR,QAAQ,EAAYnR,EAAQ5F,cAAc,CAAC,YAAa,CAChE,GAAImR,AAAoB,IAApBA,EAAW3c,IAAI,CACf,MAAO,uBACX2c,CAAAA,EAAW3c,IAAI,CAAG,EAEd,IAAI6b,EAAQW,EAAME,KAAK,CAACiC,aAAa,CAACkE,YAAY,CAACxD,MAAM,CAACjO,EAAQmR,QAAQ,EAC1E,GAAI1G,EACA,MAAO,YAAcA,CAEjC,CACA,GAAIzK,AAAiB,MAAjBA,EAAQoR,KAAK,EAAYpR,EAAQ5F,cAAc,CAAC,SAAU,CAC1D,GAAImR,AAAoB,IAApBA,EAAW3c,IAAI,CACf,MAAO,uBACX2c,CAAAA,EAAW3c,IAAI,CAAG,EAEd,IAAI6b,EAAQW,EAAME,KAAK,CAACiC,aAAa,CAACmE,SAAS,CAACzD,MAAM,CAACjO,EAAQoR,KAAK,EACpE,GAAI3G,EACA,MAAO,SAAWA,CAE9B,CACA,GAAIzK,AAAmB,MAAnBA,EAAQqR,OAAO,EAAYrR,EAAQ5F,cAAc,CAAC,WAAY,CAC9D,GAAImR,AAAoB,IAApBA,EAAW3c,IAAI,CACf,MAAO,uBACX2c,CAAAA,EAAW3c,IAAI,CAAG,EAEd,IAAI6b,EAAQW,EAAME,KAAK,CAACiC,aAAa,CAACoE,WAAW,CAAC1D,MAAM,CAACjO,EAAQqR,OAAO,EACxE,GAAI5G,EACA,MAAO,WAAaA,CAEhC,CACA,GAAIzK,AAAiB,MAAjBA,EAAQsR,KAAK,EAAYtR,EAAQ5F,cAAc,CAAC,SAAU,CAC1D,GAAImR,AAAoB,IAApBA,EAAW3c,IAAI,CACf,MAAO,uBACX2c,CAAAA,EAAW3c,IAAI,CAAG,EAEd,IAAI6b,EAAQW,EAAME,KAAK,CAACiC,aAAa,CAACqE,SAAS,CAAC3D,MAAM,CAACjO,EAAQsR,KAAK,EACpE,GAAI7G,EACA,MAAO,SAAWA,CAE9B,CACA,GAAIzK,AAAqB,MAArBA,EAAQuR,SAAS,EAAYvR,EAAQ5F,cAAc,CAAC,aAAc,CAClE,GAAImR,AAAoB,IAApBA,EAAW3c,IAAI,CACf,MAAO,uBACX2c,CAAAA,EAAW3c,IAAI,CAAG,EAEd,IAAI6b,EAAQW,EAAME,KAAK,CAACiC,aAAa,CAACsE,aAAa,CAAC5D,MAAM,CAACjO,EAAQuR,SAAS,EAC5E,GAAI9G,EACA,MAAO,aAAeA,CAElC,CACA,OAAO,IACX,EAWA8C,EAAce,QAAQ,CAAG,SAAkBtO,CAAO,CAAE5O,CAAO,EACnD,CAACA,GACDA,CAAAA,EAAU,CAAC,GACf,IAAIwM,EAAS,CAAC,EA+Bd,OA9BwB,MAApBoC,EAAQkR,QAAQ,EAAYlR,EAAQ5F,cAAc,CAAC,cACnDwD,EAAOsT,QAAQ,CAAG9F,EAAME,KAAK,CAACiC,aAAa,CAACiE,YAAY,CAAClD,QAAQ,CAACtO,EAAQkR,QAAQ,CAAE9f,GAChFA,EAAQ6f,MAAM,EACdrT,CAAAA,EAAOhP,IAAI,CAAG,UAAS,GAEP,MAApBoR,EAAQmR,QAAQ,EAAYnR,EAAQ5F,cAAc,CAAC,cACnDwD,EAAOuT,QAAQ,CAAG/F,EAAME,KAAK,CAACiC,aAAa,CAACkE,YAAY,CAACnD,QAAQ,CAACtO,EAAQmR,QAAQ,CAAE/f,GAChFA,EAAQ6f,MAAM,EACdrT,CAAAA,EAAOhP,IAAI,CAAG,UAAS,GAEV,MAAjBoR,EAAQoR,KAAK,EAAYpR,EAAQ5F,cAAc,CAAC,WAChDwD,EAAOwT,KAAK,CAAGhG,EAAME,KAAK,CAACiC,aAAa,CAACmE,SAAS,CAACpD,QAAQ,CAACtO,EAAQoR,KAAK,CAAEhgB,GACvEA,EAAQ6f,MAAM,EACdrT,CAAAA,EAAOhP,IAAI,CAAG,OAAM,GAEL,MAAnBoR,EAAQqR,OAAO,EAAYrR,EAAQ5F,cAAc,CAAC,aAClDwD,EAAOyT,OAAO,CAAGjG,EAAME,KAAK,CAACiC,aAAa,CAACoE,WAAW,CAACrD,QAAQ,CAACtO,EAAQqR,OAAO,CAAEjgB,GAC7EA,EAAQ6f,MAAM,EACdrT,CAAAA,EAAOhP,IAAI,CAAG,SAAQ,GAET,MAAjBoR,EAAQsR,KAAK,EAAYtR,EAAQ5F,cAAc,CAAC,WAChDwD,EAAO0T,KAAK,CAAGlG,EAAME,KAAK,CAACiC,aAAa,CAACqE,SAAS,CAACtD,QAAQ,CAACtO,EAAQsR,KAAK,CAAElgB,GACvEA,EAAQ6f,MAAM,EACdrT,CAAAA,EAAOhP,IAAI,CAAG,OAAM,GAEH,MAArBoR,EAAQuR,SAAS,EAAYvR,EAAQ5F,cAAc,CAAC,eACpDwD,EAAO2T,SAAS,CAAGnG,EAAME,KAAK,CAACiC,aAAa,CAACsE,aAAa,CAACvD,QAAQ,CAACtO,EAAQuR,SAAS,CAAEngB,GACnFA,EAAQ6f,MAAM,EACdrT,CAAAA,EAAOhP,IAAI,CAAG,WAAU,GAEzBgP,CACX,EASA2P,EAAc5T,SAAS,CAACoV,MAAM,CAAG,WAC7B,OAAO,IAAI,CAAC9N,WAAW,CAACqN,QAAQ,CAAC,IAAI,CAAEzD,EAAUM,IAAI,CAAC6D,aAAa,CACvE,EAEAzB,EAAciE,YAAY,CAAG,AAAC,WAiB1B,SAASA,EAAajG,CAAU,EAE5B,GADA,IAAI,CAACuG,KAAK,CAAG,EAAE,CACXvG,EACA,IAAK,IAAItR,EAAOnM,OAAOmM,IAAI,CAACsR,GAAa/D,EAAI,EAAGA,EAAIvN,EAAKnB,MAAM,CAAE,EAAE0O,EACpC,MAAvB+D,CAAU,CAACtR,CAAI,CAACuN,EAAE,CAAC,EACnB,KAAI,CAACvN,CAAI,CAACuN,EAAE,CAAC,CAAG+D,CAAU,CAACtR,CAAI,CAACuN,EAAE,CAAC,AAAD,CAClD,CA6JA,OArJAgK,EAAa7X,SAAS,CAACmY,KAAK,CAAG5G,EAAM6E,UAAU,CAU/CyB,EAAa9e,MAAM,CAAG,SAAgB6Y,CAAU,EAC5C,OAAO,IAAIiG,EAAajG,EAC5B,EAWAiG,EAAa7E,MAAM,CAAG,SAAgB3M,CAAO,CAAE4M,CAAM,EAGjD,GAFI,CAACA,GACDA,CAAAA,EAAS5B,EAAQtY,MAAM,EAAC,EACxBsN,AAAiB,MAAjBA,EAAQ8R,KAAK,EAAY9R,EAAQ8R,KAAK,CAAChZ,MAAM,CAC7C,IAAK,IAAI0O,EAAI,EAAGA,EAAIxH,EAAQ8R,KAAK,CAAChZ,MAAM,CAAE,EAAE0O,EACxC4D,EAAME,KAAK,CAACiC,aAAa,CAACZ,MAAM,CAAC3M,EAAQ8R,KAAK,CAACtK,EAAE,CAAEoF,EAAOE,MAAM,CAAwB,IAAIC,IAAI,IAAIC,MAAM,GAClH,OAAOJ,CACX,EAWA4E,EAAa/D,eAAe,CAAG,SAAyBzN,CAAO,CAAE4M,CAAM,EACnE,OAAO,IAAI,CAACD,MAAM,CAAC3M,EAAS4M,GAAQI,MAAM,EAC9C,EAaAwE,EAAa9D,MAAM,CAAG,SAAgBC,CAAM,CAAE7U,CAAM,EAC5C,CAAE6U,CAAAA,aAAkB7C,CAAM,GAC1B6C,CAAAA,EAAS7C,EAAQpY,MAAM,CAACib,EAAM,EAElC,IADA,IAAIC,EAAM9U,AAAWiC,KAAAA,IAAXjC,EAAuB6U,EAAOE,GAAG,CAAGF,EAAOG,GAAG,CAAGhV,EAAQkH,EAAU,IAAIoL,EAAME,KAAK,CAACiC,aAAa,CAACiE,YAAY,CAChH7D,EAAOG,GAAG,CAAGF,GAAK,CACrB,IAAIhO,EAAM+N,EAAOb,MAAM,GACvB,GAAQlN,IAAQ,GACX,EACG,CAAEI,CAAAA,EAAQ8R,KAAK,EAAI9R,EAAQ8R,KAAK,CAAChZ,MAAM,AAAD,GACtCkH,CAAAA,EAAQ8R,KAAK,CAAG,EAAE,AAAD,EACrB9R,EAAQ8R,KAAK,CAACjV,IAAI,CAACuO,EAAME,KAAK,CAACiC,aAAa,CAACG,MAAM,CAACC,EAAQA,EAAOb,MAAM,UAGzEa,EAAOI,QAAQ,CAACnO,AAAM,EAANA,EAGxB,CACA,OAAOI,CACX,EAYAwR,EAAaxD,eAAe,CAAG,SAAyBL,CAAM,EAG1D,MAFI,CAAEA,CAAAA,aAAkB7C,CAAM,GAC1B6C,CAAAA,EAAS,IAAI7C,EAAQ6C,EAAM,EACxB,IAAI,CAACD,MAAM,CAACC,EAAQA,EAAOb,MAAM,GAC5C,EAUA0E,EAAavD,MAAM,CAAG,SAAgBjO,CAAO,EACzC,GAAI,AAAmB,UAAnB,OAAOA,GAAwBA,AAAY,OAAZA,EAC/B,MAAO,kBACX,GAAIA,AAAiB,MAAjBA,EAAQ8R,KAAK,EAAY9R,EAAQ5F,cAAc,CAAC,SAAU,CAC1D,GAAI,CAACpB,MAAMqF,OAAO,CAAC2B,EAAQ8R,KAAK,EAC5B,MAAO,wBACX,IAAK,IAAItK,EAAI,EAAGA,EAAIxH,EAAQ8R,KAAK,CAAChZ,MAAM,CAAE,EAAE0O,EAAG,CAC3C,IAAIiD,EAAQW,EAAME,KAAK,CAACiC,aAAa,CAACU,MAAM,CAACjO,EAAQ8R,KAAK,CAACtK,EAAE,EAC7D,GAAIiD,EACA,MAAO,SAAWA,CAC1B,CACJ,CACA,OAAO,IACX,EAWA+G,EAAalD,QAAQ,CAAG,SAAkBtO,CAAO,CAAE5O,CAAO,EAClD,CAACA,GACDA,CAAAA,EAAU,CAAC,GACf,IAAIwM,EAAS,CAAC,EAGd,GAFIxM,CAAAA,EAAQ8e,MAAM,EAAI9e,EAAQmd,QAAQ,AAAD,GACjC3Q,CAAAA,EAAOkU,KAAK,CAAG,EAAE,AAAD,EAChB9R,EAAQ8R,KAAK,EAAI9R,EAAQ8R,KAAK,CAAChZ,MAAM,CAAE,CACvC8E,EAAOkU,KAAK,CAAG,EAAE,CACjB,IAAK,IAAIjC,EAAI,EAAGA,EAAI7P,EAAQ8R,KAAK,CAAChZ,MAAM,CAAE,EAAE+W,EACxCjS,EAAOkU,KAAK,CAACjC,EAAE,CAAGzE,EAAME,KAAK,CAACiC,aAAa,CAACe,QAAQ,CAACtO,EAAQ8R,KAAK,CAACjC,EAAE,CAAEze,EAC/E,CACA,OAAOwM,CACX,EASA4T,EAAa7X,SAAS,CAACoV,MAAM,CAAG,WAC5B,OAAO,IAAI,CAAC9N,WAAW,CAACqN,QAAQ,CAAC,IAAI,CAAEzD,EAAUM,IAAI,CAAC6D,aAAa,CACvE,EAEOwC,CACX,IAEAjE,EAAckE,YAAY,CAAG,AAAC,WAiB1B,SAASA,EAAalG,CAAU,EAE5B,GADA,IAAI,CAACuG,KAAK,CAAG,EAAE,CACXvG,EACA,IAAK,IAAItR,EAAOnM,OAAOmM,IAAI,CAACsR,GAAa/D,EAAI,EAAGA,EAAIvN,EAAKnB,MAAM,CAAE,EAAE0O,EACpC,MAAvB+D,CAAU,CAACtR,CAAI,CAACuN,EAAE,CAAC,EACnB,KAAI,CAACvN,CAAI,CAACuN,EAAE,CAAC,CAAG+D,CAAU,CAACtR,CAAI,CAACuN,EAAE,CAAC,AAAD,CAClD,CA6JA,OArJAiK,EAAa9X,SAAS,CAACmY,KAAK,CAAG5G,EAAM6E,UAAU,CAU/C0B,EAAa/e,MAAM,CAAG,SAAgB6Y,CAAU,EAC5C,OAAO,IAAIkG,EAAalG,EAC5B,EAWAkG,EAAa9E,MAAM,CAAG,SAAgB3M,CAAO,CAAE4M,CAAM,EAGjD,GAFI,CAACA,GACDA,CAAAA,EAAS5B,EAAQtY,MAAM,EAAC,EACxBsN,AAAiB,MAAjBA,EAAQ8R,KAAK,EAAY9R,EAAQ8R,KAAK,CAAChZ,MAAM,CAC7C,IAAK,IAAI0O,EAAI,EAAGA,EAAIxH,EAAQ8R,KAAK,CAAChZ,MAAM,CAAE,EAAE0O,EACxC4D,EAAME,KAAK,CAACiC,aAAa,CAACZ,MAAM,CAAC3M,EAAQ8R,KAAK,CAACtK,EAAE,CAAEoF,EAAOE,MAAM,CAAwB,IAAIC,IAAI,IAAIC,MAAM,GAClH,OAAOJ,CACX,EAWA6E,EAAahE,eAAe,CAAG,SAAyBzN,CAAO,CAAE4M,CAAM,EACnE,OAAO,IAAI,CAACD,MAAM,CAAC3M,EAAS4M,GAAQI,MAAM,EAC9C,EAaAyE,EAAa/D,MAAM,CAAG,SAAgBC,CAAM,CAAE7U,CAAM,EAC5C,CAAE6U,CAAAA,aAAkB7C,CAAM,GAC1B6C,CAAAA,EAAS7C,EAAQpY,MAAM,CAACib,EAAM,EAElC,IADA,IAAIC,EAAM9U,AAAWiC,KAAAA,IAAXjC,EAAuB6U,EAAOE,GAAG,CAAGF,EAAOG,GAAG,CAAGhV,EAAQkH,EAAU,IAAIoL,EAAME,KAAK,CAACiC,aAAa,CAACkE,YAAY,CAChH9D,EAAOG,GAAG,CAAGF,GAAK,CACrB,IAAIhO,EAAM+N,EAAOb,MAAM,GACvB,GAAQlN,IAAQ,GACX,EACG,CAAEI,CAAAA,EAAQ8R,KAAK,EAAI9R,EAAQ8R,KAAK,CAAChZ,MAAM,AAAD,GACtCkH,CAAAA,EAAQ8R,KAAK,CAAG,EAAE,AAAD,EACrB9R,EAAQ8R,KAAK,CAACjV,IAAI,CAACuO,EAAME,KAAK,CAACiC,aAAa,CAACG,MAAM,CAACC,EAAQA,EAAOb,MAAM,UAGzEa,EAAOI,QAAQ,CAACnO,AAAM,EAANA,EAGxB,CACA,OAAOI,CACX,EAYAyR,EAAazD,eAAe,CAAG,SAAyBL,CAAM,EAG1D,MAFI,CAAEA,CAAAA,aAAkB7C,CAAM,GAC1B6C,CAAAA,EAAS,IAAI7C,EAAQ6C,EAAM,EACxB,IAAI,CAACD,MAAM,CAACC,EAAQA,EAAOb,MAAM,GAC5C,EAUA2E,EAAaxD,MAAM,CAAG,SAAgBjO,CAAO,EACzC,GAAI,AAAmB,UAAnB,OAAOA,GAAwBA,AAAY,OAAZA,EAC/B,MAAO,kBACX,GAAIA,AAAiB,MAAjBA,EAAQ8R,KAAK,EAAY9R,EAAQ5F,cAAc,CAAC,SAAU,CAC1D,GAAI,CAACpB,MAAMqF,OAAO,CAAC2B,EAAQ8R,KAAK,EAC5B,MAAO,wBACX,IAAK,IAAItK,EAAI,EAAGA,EAAIxH,EAAQ8R,KAAK,CAAChZ,MAAM,CAAE,EAAE0O,EAAG,CAC3C,IAAIiD,EAAQW,EAAME,KAAK,CAACiC,aAAa,CAACU,MAAM,CAACjO,EAAQ8R,KAAK,CAACtK,EAAE,EAC7D,GAAIiD,EACA,MAAO,SAAWA,CAC1B,CACJ,CACA,OAAO,IACX,EAWAgH,EAAanD,QAAQ,CAAG,SAAkBtO,CAAO,CAAE5O,CAAO,EAClD,CAACA,GACDA,CAAAA,EAAU,CAAC,GACf,IAAIwM,EAAS,CAAC,EAGd,GAFIxM,CAAAA,EAAQ8e,MAAM,EAAI9e,EAAQmd,QAAQ,AAAD,GACjC3Q,CAAAA,EAAOkU,KAAK,CAAG,EAAE,AAAD,EAChB9R,EAAQ8R,KAAK,EAAI9R,EAAQ8R,KAAK,CAAChZ,MAAM,CAAE,CACvC8E,EAAOkU,KAAK,CAAG,EAAE,CACjB,IAAK,IAAIjC,EAAI,EAAGA,EAAI7P,EAAQ8R,KAAK,CAAChZ,MAAM,CAAE,EAAE+W,EACxCjS,EAAOkU,KAAK,CAACjC,EAAE,CAAGzE,EAAME,KAAK,CAACiC,aAAa,CAACe,QAAQ,CAACtO,EAAQ8R,KAAK,CAACjC,EAAE,CAAEze,EAC/E,CACA,OAAOwM,CACX,EASA6T,EAAa9X,SAAS,CAACoV,MAAM,CAAG,WAC5B,OAAO,IAAI,CAAC9N,WAAW,CAACqN,QAAQ,CAAC,IAAI,CAAEzD,EAAUM,IAAI,CAAC6D,aAAa,CACvE,EAEOyC,CACX,IAEAlE,EAAcmE,SAAS,CAAG,AAAC,WAsBvB,SAASA,EAAUnG,CAAU,EACzB,GAAIA,EACA,IAAK,IAAItR,EAAOnM,OAAOmM,IAAI,CAACsR,GAAa/D,EAAI,EAAGA,EAAIvN,EAAKnB,MAAM,CAAE,EAAE0O,EACpC,MAAvB+D,CAAU,CAACtR,CAAI,CAACuN,EAAE,CAAC,EACnB,KAAI,CAACvN,CAAI,CAACuN,EAAE,CAAC,CAAG+D,CAAU,CAACtR,CAAI,CAACuN,EAAE,CAAC,AAAD,CAClD,CA0PA,OAlPAkK,EAAU/X,SAAS,CAACoY,WAAW,CAAG,GAQlCL,EAAU/X,SAAS,CAACqY,kBAAkB,CAAG,GAQzCN,EAAU/X,SAAS,CAACsY,KAAK,CAAG,KAQ5BP,EAAU/X,SAAS,CAACuY,cAAc,CAAG,EAQrCR,EAAU/X,SAAS,CAACwY,QAAQ,CAAG,KAQ/BT,EAAU/X,SAAS,CAACyY,YAAY,CAAG,KAUnCV,EAAUhf,MAAM,CAAG,SAAgB6Y,CAAU,EACzC,OAAO,IAAImG,EAAUnG,EACzB,EAWAmG,EAAU/E,MAAM,CAAG,SAAgB3M,CAAO,CAAE4M,CAAM,EAe9C,MAdI,CAACA,GACDA,CAAAA,EAAS5B,EAAQtY,MAAM,EAAC,EACD,MAAvBsN,EAAQ+R,WAAW,EAAYjkB,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,gBACnE4M,EAAOE,MAAM,CAAwB,IAAIjJ,MAAM,CAAC7D,EAAQ+R,WAAW,EACrC,MAA9B/R,EAAQgS,kBAAkB,EAAYlkB,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,uBAC1E4M,EAAOE,MAAM,CAAwB,IAAIQ,IAAI,CAACtN,EAAQgS,kBAAkB,EACvD,MAAjBhS,EAAQiS,KAAK,EAAYnkB,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,UAC7DoL,EAAME,KAAK,CAACqB,MAAM,CAAC3M,EAAQiS,KAAK,CAAErF,EAAOE,MAAM,CAAwB,IAAIC,IAAI,IAAIC,MAAM,GAC/D,MAA1BhN,EAAQkS,cAAc,EAAYpkB,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,mBACtE4M,EAAOE,MAAM,CAAwB,IAAIK,MAAM,CAACnN,EAAQkS,cAAc,EAClD,MAApBlS,EAAQmS,QAAQ,EAAYrkB,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,aAChEoL,EAAMT,MAAM,CAACC,QAAQ,CAACiC,SAAS,CAACF,MAAM,CAAC3M,EAAQmS,QAAQ,CAAEvF,EAAOE,MAAM,CAAwB,IAAIC,IAAI,IAAIC,MAAM,GACxF,MAAxBhN,EAAQoS,YAAY,EAAYtkB,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,iBACpEoL,EAAMT,MAAM,CAACC,QAAQ,CAACiC,SAAS,CAACF,MAAM,CAAC3M,EAAQoS,YAAY,CAAExF,EAAOE,MAAM,CAAwB,IAAIC,IAAI,IAAIC,MAAM,GACjHJ,CACX,EAWA8E,EAAUjE,eAAe,CAAG,SAAyBzN,CAAO,CAAE4M,CAAM,EAChE,OAAO,IAAI,CAACD,MAAM,CAAC3M,EAAS4M,GAAQI,MAAM,EAC9C,EAaA0E,EAAUhE,MAAM,CAAG,SAAgBC,CAAM,CAAE7U,CAAM,EACzC,CAAE6U,CAAAA,aAAkB7C,CAAM,GAC1B6C,CAAAA,EAAS7C,EAAQpY,MAAM,CAACib,EAAM,EAElC,IADA,IAAIC,EAAM9U,AAAWiC,KAAAA,IAAXjC,EAAuB6U,EAAOE,GAAG,CAAGF,EAAOG,GAAG,CAAGhV,EAAQkH,EAAU,IAAIoL,EAAME,KAAK,CAACiC,aAAa,CAACmE,SAAS,CAC7G/D,EAAOG,GAAG,CAAGF,GAAK,CACrB,IAAIhO,EAAM+N,EAAOb,MAAM,GACvB,OAAQlN,IAAQ,GAChB,KAAK,EACDI,EAAQ+R,WAAW,CAAGpE,EAAO9J,MAAM,GACnC,KACJ,MAAK,EACD7D,EAAQgS,kBAAkB,CAAGrE,EAAOL,IAAI,GACxC,KACJ,MAAK,EACDtN,EAAQiS,KAAK,CAAG7G,EAAME,KAAK,CAACoC,MAAM,CAACC,EAAQA,EAAOb,MAAM,IACxD,KACJ,MAAK,EACD9M,EAAQkS,cAAc,CAAGvE,EAAOR,MAAM,GACtC,KACJ,MAAK,EACDnN,EAAQmS,QAAQ,CAAG/G,EAAMT,MAAM,CAACC,QAAQ,CAACiC,SAAS,CAACa,MAAM,CAACC,EAAQA,EAAOb,MAAM,IAC/E,KACJ,MAAK,EACD9M,EAAQoS,YAAY,CAAGhH,EAAMT,MAAM,CAACC,QAAQ,CAACiC,SAAS,CAACa,MAAM,CAACC,EAAQA,EAAOb,MAAM,IACnF,KACJ,SACIa,EAAOI,QAAQ,CAACnO,AAAM,EAANA,EAEpB,CACJ,CACA,OAAOI,CACX,EAYA0R,EAAU1D,eAAe,CAAG,SAAyBL,CAAM,EAGvD,MAFI,CAAEA,CAAAA,aAAkB7C,CAAM,GAC1B6C,CAAAA,EAAS,IAAI7C,EAAQ6C,EAAM,EACxB,IAAI,CAACD,MAAM,CAACC,EAAQA,EAAOb,MAAM,GAC5C,EAUA4E,EAAUzD,MAAM,CAAG,SAAgBjO,CAAO,EACtC,GAAI,AAAmB,UAAnB,OAAOA,GAAwBA,AAAY,OAAZA,EAC/B,MAAO,kBACX,GAAIA,AAAuB,MAAvBA,EAAQ+R,WAAW,EAAY/R,EAAQ5F,cAAc,CAAC,gBAClD,CAAC8Q,EAAMmD,QAAQ,CAACrO,EAAQ+R,WAAW,EACnC,MAAO,+BACf,GAAI/R,AAA8B,MAA9BA,EAAQgS,kBAAkB,EAAYhS,EAAQ5F,cAAc,CAAC,uBACzD,AAAsC,WAAtC,OAAO4F,EAAQgS,kBAAkB,CACjC,MAAO,uCACf,GAAIhS,AAAiB,MAAjBA,EAAQiS,KAAK,EAAYjS,EAAQ5F,cAAc,CAAC,SAAU,CAC1D,IAAIqQ,EAAQW,EAAME,KAAK,CAAC2C,MAAM,CAACjO,EAAQiS,KAAK,EAC5C,GAAIxH,EACA,MAAO,SAAWA,CAC1B,CACA,GAAIzK,AAA0B,MAA1BA,EAAQkS,cAAc,EAAYlS,EAAQ5F,cAAc,CAAC,mBACrD,CAAC8Q,EAAMgD,SAAS,CAAClO,EAAQkS,cAAc,GAAK,CAAElS,CAAAA,EAAQkS,cAAc,EAAIhH,EAAMgD,SAAS,CAAClO,EAAQkS,cAAc,CAAC/D,GAAG,GAAKjD,EAAMgD,SAAS,CAAClO,EAAQkS,cAAc,CAAC9D,IAAI,GAClK,MAAO,wCACf,GAAIpO,AAAoB,MAApBA,EAAQmS,QAAQ,EAAYnS,EAAQ5F,cAAc,CAAC,YAAa,CAChE,IAAIqQ,EAAQW,EAAMT,MAAM,CAACC,QAAQ,CAACiC,SAAS,CAACoB,MAAM,CAACjO,EAAQmS,QAAQ,EACnE,GAAI1H,EACA,MAAO,YAAcA,CAC7B,CACA,GAAIzK,AAAwB,MAAxBA,EAAQoS,YAAY,EAAYpS,EAAQ5F,cAAc,CAAC,gBAAiB,CACxE,IAAIqQ,EAAQW,EAAMT,MAAM,CAACC,QAAQ,CAACiC,SAAS,CAACoB,MAAM,CAACjO,EAAQoS,YAAY,EACvE,GAAI3H,EACA,MAAO,gBAAkBA,CACjC,CACA,OAAO,IACX,EAWAiH,EAAUpD,QAAQ,CAAG,SAAkBtO,CAAO,CAAE5O,CAAO,EAC/C,CAACA,GACDA,CAAAA,EAAU,CAAC,GACf,IAAIwM,EAAS,CAAC,EAwBd,OAvBIxM,EAAQmd,QAAQ,GAChB3Q,EAAOmU,WAAW,CAAG,GACrBnU,EAAOoU,kBAAkB,CAAG,GAC5BpU,EAAOqU,KAAK,CAAG,KACfrU,EAAOsU,cAAc,CAAG,EACxBtU,EAAOuU,QAAQ,CAAG,KAClBvU,EAAOwU,YAAY,CAAG,MAEC,MAAvBpS,EAAQ+R,WAAW,EAAY/R,EAAQ5F,cAAc,CAAC,gBACtDwD,CAAAA,EAAOmU,WAAW,CAAG/R,EAAQ+R,WAAW,AAAD,EACT,MAA9B/R,EAAQgS,kBAAkB,EAAYhS,EAAQ5F,cAAc,CAAC,uBAC7DwD,CAAAA,EAAOoU,kBAAkB,CAAGhS,EAAQgS,kBAAkB,AAAD,EACpC,MAAjBhS,EAAQiS,KAAK,EAAYjS,EAAQ5F,cAAc,CAAC,UAChDwD,CAAAA,EAAOqU,KAAK,CAAG7G,EAAME,KAAK,CAACgD,QAAQ,CAACtO,EAAQiS,KAAK,CAAE7gB,EAAO,EAChC,MAA1B4O,EAAQkS,cAAc,EAAYlS,EAAQ5F,cAAc,CAAC,oBACrD,AAAkC,UAAlC,OAAO4F,EAAQkS,cAAc,CAC7BtU,EAAOsU,cAAc,CAAG9gB,EAAQod,KAAK,GAAK/H,OAASA,OAAOzG,EAAQkS,cAAc,EAAIlS,EAAQkS,cAAc,CAE1GtU,EAAOsU,cAAc,CAAG9gB,EAAQod,KAAK,GAAK/H,OAASyE,EAAMuD,IAAI,CAAC9U,SAAS,CAAC5K,QAAQ,CAACyL,IAAI,CAACwF,EAAQkS,cAAc,EAAI9gB,EAAQod,KAAK,GAAKE,OAAS,IAAIxD,EAAMyD,QAAQ,CAAC3O,EAAQkS,cAAc,CAAC/D,GAAG,GAAK,EAAGnO,EAAQkS,cAAc,CAAC9D,IAAI,GAAK,GAAGQ,QAAQ,CAAC,IAAQ5O,EAAQkS,cAAc,EAC1P,MAApBlS,EAAQmS,QAAQ,EAAYnS,EAAQ5F,cAAc,CAAC,aACnDwD,CAAAA,EAAOuU,QAAQ,CAAG/G,EAAMT,MAAM,CAACC,QAAQ,CAACiC,SAAS,CAACyB,QAAQ,CAACtO,EAAQmS,QAAQ,CAAE/gB,EAAO,EAC5D,MAAxB4O,EAAQoS,YAAY,EAAYpS,EAAQ5F,cAAc,CAAC,iBACvDwD,CAAAA,EAAOwU,YAAY,CAAGhH,EAAMT,MAAM,CAACC,QAAQ,CAACiC,SAAS,CAACyB,QAAQ,CAACtO,EAAQoS,YAAY,CAAEhhB,EAAO,EACzFwM,CACX,EASA8T,EAAU/X,SAAS,CAACoV,MAAM,CAAG,WACzB,OAAO,IAAI,CAAC9N,WAAW,CAACqN,QAAQ,CAAC,IAAI,CAAEzD,EAAUM,IAAI,CAAC6D,aAAa,CACvE,EAEO0C,CACX,IAEAnE,EAAcoE,WAAW,CAAG,AAAC,WAkBzB,SAASA,EAAYpG,CAAU,EAE3B,GADA,IAAI,CAAC8G,YAAY,CAAG,EAAE,CAClB9G,EACA,IAAK,IAAItR,EAAOnM,OAAOmM,IAAI,CAACsR,GAAa/D,EAAI,EAAGA,EAAIvN,EAAKnB,MAAM,CAAE,EAAE0O,EACpC,MAAvB+D,CAAU,CAACtR,CAAI,CAACuN,EAAE,CAAC,EACnB,KAAI,CAACvN,CAAI,CAACuN,EAAE,CAAC,CAAG+D,CAAU,CAACtR,CAAI,CAACuN,EAAE,CAAC,AAAD,CAClD,CAmLA,OA3KAmK,EAAYhY,SAAS,CAAC0Y,YAAY,CAAGnH,EAAM6E,UAAU,CAQrD4B,EAAYhY,SAAS,CAAC/K,IAAI,CAAG,KAU7B+iB,EAAYjf,MAAM,CAAG,SAAgB6Y,CAAU,EAC3C,OAAO,IAAIoG,EAAYpG,EAC3B,EAWAoG,EAAYhF,MAAM,CAAG,SAAgB3M,CAAO,CAAE4M,CAAM,EAGhD,GAFI,CAACA,GACDA,CAAAA,EAAS5B,EAAQtY,MAAM,EAAC,EACxBsN,AAAwB,MAAxBA,EAAQqS,YAAY,EAAYrS,EAAQqS,YAAY,CAACvZ,MAAM,CAC3D,IAAK,IAAI0O,EAAI,EAAGA,EAAIxH,EAAQqS,YAAY,CAACvZ,MAAM,CAAE,EAAE0O,EAC/C4D,EAAME,KAAK,CAACiC,aAAa,CAAC+E,mBAAmB,CAAC3F,MAAM,CAAC3M,EAAQqS,YAAY,CAAC7K,EAAE,CAAEoF,EAAOE,MAAM,CAAwB,IAAIC,IAAI,IAAIC,MAAM,GAG7I,OAFoB,MAAhBhN,EAAQpR,IAAI,EAAYd,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,SAC5DoL,EAAME,KAAK,CAACiC,aAAa,CAACZ,MAAM,CAAC3M,EAAQpR,IAAI,CAAEge,EAAOE,MAAM,CAAwB,IAAIC,IAAI,IAAIC,MAAM,GACnGJ,CACX,EAWA+E,EAAYlE,eAAe,CAAG,SAAyBzN,CAAO,CAAE4M,CAAM,EAClE,OAAO,IAAI,CAACD,MAAM,CAAC3M,EAAS4M,GAAQI,MAAM,EAC9C,EAaA2E,EAAYjE,MAAM,CAAG,SAAgBC,CAAM,CAAE7U,CAAM,EAC3C,CAAE6U,CAAAA,aAAkB7C,CAAM,GAC1B6C,CAAAA,EAAS7C,EAAQpY,MAAM,CAACib,EAAM,EAElC,IADA,IAAIC,EAAM9U,AAAWiC,KAAAA,IAAXjC,EAAuB6U,EAAOE,GAAG,CAAGF,EAAOG,GAAG,CAAGhV,EAAQkH,EAAU,IAAIoL,EAAME,KAAK,CAACiC,aAAa,CAACoE,WAAW,CAC/GhE,EAAOG,GAAG,CAAGF,GAAK,CACrB,IAAIhO,EAAM+N,EAAOb,MAAM,GACvB,OAAQlN,IAAQ,GAChB,KAAK,EACG,CAAEI,CAAAA,EAAQqS,YAAY,EAAIrS,EAAQqS,YAAY,CAACvZ,MAAM,AAAD,GACpDkH,CAAAA,EAAQqS,YAAY,CAAG,EAAE,AAAD,EAC5BrS,EAAQqS,YAAY,CAACxV,IAAI,CAACuO,EAAME,KAAK,CAACiC,aAAa,CAAC+E,mBAAmB,CAAC5E,MAAM,CAACC,EAAQA,EAAOb,MAAM,KACpG,KACJ,MAAK,EACD9M,EAAQpR,IAAI,CAAGwc,EAAME,KAAK,CAACiC,aAAa,CAACG,MAAM,CAACC,EAAQA,EAAOb,MAAM,IACrE,KACJ,SACIa,EAAOI,QAAQ,CAACnO,AAAM,EAANA,EAEpB,CACJ,CACA,OAAOI,CACX,EAYA2R,EAAY3D,eAAe,CAAG,SAAyBL,CAAM,EAGzD,MAFI,CAAEA,CAAAA,aAAkB7C,CAAM,GAC1B6C,CAAAA,EAAS,IAAI7C,EAAQ6C,EAAM,EACxB,IAAI,CAACD,MAAM,CAACC,EAAQA,EAAOb,MAAM,GAC5C,EAUA6E,EAAY1D,MAAM,CAAG,SAAgBjO,CAAO,EACxC,GAAI,AAAmB,UAAnB,OAAOA,GAAwBA,AAAY,OAAZA,EAC/B,MAAO,kBACX,GAAIA,AAAwB,MAAxBA,EAAQqS,YAAY,EAAYrS,EAAQ5F,cAAc,CAAC,gBAAiB,CACxE,GAAI,CAACpB,MAAMqF,OAAO,CAAC2B,EAAQqS,YAAY,EACnC,MAAO,+BACX,IAAK,IAAI7K,EAAI,EAAGA,EAAIxH,EAAQqS,YAAY,CAACvZ,MAAM,CAAE,EAAE0O,EAAG,CAClD,IAAIiD,EAAQW,EAAME,KAAK,CAACiC,aAAa,CAAC+E,mBAAmB,CAACrE,MAAM,CAACjO,EAAQqS,YAAY,CAAC7K,EAAE,EACxF,GAAIiD,EACA,MAAO,gBAAkBA,CACjC,CACJ,CACA,GAAIzK,AAAgB,MAAhBA,EAAQpR,IAAI,EAAYoR,EAAQ5F,cAAc,CAAC,QAAS,CACxD,IAAIqQ,EAAQW,EAAME,KAAK,CAACiC,aAAa,CAACU,MAAM,CAACjO,EAAQpR,IAAI,EACzD,GAAI6b,EACA,MAAO,QAAUA,CACzB,CACA,OAAO,IACX,EAWAkH,EAAYrD,QAAQ,CAAG,SAAkBtO,CAAO,CAAE5O,CAAO,EACjD,CAACA,GACDA,CAAAA,EAAU,CAAC,GACf,IAAIwM,EAAS,CAAC,EAKd,GAJIxM,CAAAA,EAAQ8e,MAAM,EAAI9e,EAAQmd,QAAQ,AAAD,GACjC3Q,CAAAA,EAAOyU,YAAY,CAAG,EAAE,AAAD,EACvBjhB,EAAQmd,QAAQ,EAChB3Q,CAAAA,EAAOhP,IAAI,CAAG,IAAG,EACjBoR,EAAQqS,YAAY,EAAIrS,EAAQqS,YAAY,CAACvZ,MAAM,CAAE,CACrD8E,EAAOyU,YAAY,CAAG,EAAE,CACxB,IAAK,IAAIxC,EAAI,EAAGA,EAAI7P,EAAQqS,YAAY,CAACvZ,MAAM,CAAE,EAAE+W,EAC/CjS,EAAOyU,YAAY,CAACxC,EAAE,CAAGzE,EAAME,KAAK,CAACiC,aAAa,CAAC+E,mBAAmB,CAAChE,QAAQ,CAACtO,EAAQqS,YAAY,CAACxC,EAAE,CAAEze,EACjH,CAGA,OAFoB,MAAhB4O,EAAQpR,IAAI,EAAYoR,EAAQ5F,cAAc,CAAC,SAC/CwD,CAAAA,EAAOhP,IAAI,CAAGwc,EAAME,KAAK,CAACiC,aAAa,CAACe,QAAQ,CAACtO,EAAQpR,IAAI,CAAEwC,EAAO,EACnEwM,CACX,EASA+T,EAAYhY,SAAS,CAACoV,MAAM,CAAG,WAC3B,OAAO,IAAI,CAAC9N,WAAW,CAACqN,QAAQ,CAAC,IAAI,CAAEzD,EAAUM,IAAI,CAAC6D,aAAa,CACvE,EAEO2C,CACX,IAEApE,EAAcqE,SAAS,CAAG,AAAC,WAkBvB,SAASA,EAAUrG,CAAU,EAEzB,GADA,IAAI,CAACgH,QAAQ,CAAG,EAAE,CACdhH,EACA,IAAK,IAAItR,EAAOnM,OAAOmM,IAAI,CAACsR,GAAa/D,EAAI,EAAGA,EAAIvN,EAAKnB,MAAM,CAAE,EAAE0O,EACpC,MAAvB+D,CAAU,CAACtR,CAAI,CAACuN,EAAE,CAAC,EACnB,KAAI,CAACvN,CAAI,CAACuN,EAAE,CAAC,CAAG+D,CAAU,CAACtR,CAAI,CAACuN,EAAE,CAAC,AAAD,CAClD,CAmLA,OA3KAoK,EAAUjY,SAAS,CAAC6Y,OAAO,CAAG,KAQ9BZ,EAAUjY,SAAS,CAAC4Y,QAAQ,CAAGrH,EAAM6E,UAAU,CAU/C6B,EAAUlf,MAAM,CAAG,SAAgB6Y,CAAU,EACzC,OAAO,IAAIqG,EAAUrG,EACzB,EAWAqG,EAAUjF,MAAM,CAAG,SAAgB3M,CAAO,CAAE4M,CAAM,EAK9C,GAJI,CAACA,GACDA,CAAAA,EAAS5B,EAAQtY,MAAM,EAAC,EACL,MAAnBsN,EAAQwS,OAAO,EAAY1kB,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,YAC/DoL,EAAME,KAAK,CAACiC,aAAa,CAACkF,gBAAgB,CAAC9F,MAAM,CAAC3M,EAAQwS,OAAO,CAAE5F,EAAOE,MAAM,CAAwB,IAAIC,IAAI,IAAIC,MAAM,GAC1HhN,AAAoB,MAApBA,EAAQuS,QAAQ,EAAYvS,EAAQuS,QAAQ,CAACzZ,MAAM,CACnD,IAAK,IAAI0O,EAAI,EAAGA,EAAIxH,EAAQuS,QAAQ,CAACzZ,MAAM,CAAE,EAAE0O,EAC3C4D,EAAME,KAAK,CAACiC,aAAa,CAACmF,YAAY,CAAC/F,MAAM,CAAC3M,EAAQuS,QAAQ,CAAC/K,EAAE,CAAEoF,EAAOE,MAAM,CAAwB,IAAIC,IAAI,IAAIC,MAAM,GAClI,OAAOJ,CACX,EAWAgF,EAAUnE,eAAe,CAAG,SAAyBzN,CAAO,CAAE4M,CAAM,EAChE,OAAO,IAAI,CAACD,MAAM,CAAC3M,EAAS4M,GAAQI,MAAM,EAC9C,EAaA4E,EAAUlE,MAAM,CAAG,SAAgBC,CAAM,CAAE7U,CAAM,EACzC,CAAE6U,CAAAA,aAAkB7C,CAAM,GAC1B6C,CAAAA,EAAS7C,EAAQpY,MAAM,CAACib,EAAM,EAElC,IADA,IAAIC,EAAM9U,AAAWiC,KAAAA,IAAXjC,EAAuB6U,EAAOE,GAAG,CAAGF,EAAOG,GAAG,CAAGhV,EAAQkH,EAAU,IAAIoL,EAAME,KAAK,CAACiC,aAAa,CAACqE,SAAS,CAC7GjE,EAAOG,GAAG,CAAGF,GAAK,CACrB,IAAIhO,EAAM+N,EAAOb,MAAM,GACvB,OAAQlN,IAAQ,GAChB,KAAK,EACDI,EAAQwS,OAAO,CAAGpH,EAAME,KAAK,CAACiC,aAAa,CAACkF,gBAAgB,CAAC/E,MAAM,CAACC,EAAQA,EAAOb,MAAM,IACzF,KACJ,MAAK,EACG,CAAE9M,CAAAA,EAAQuS,QAAQ,EAAIvS,EAAQuS,QAAQ,CAACzZ,MAAM,AAAD,GAC5CkH,CAAAA,EAAQuS,QAAQ,CAAG,EAAE,AAAD,EACxBvS,EAAQuS,QAAQ,CAAC1V,IAAI,CAACuO,EAAME,KAAK,CAACiC,aAAa,CAACmF,YAAY,CAAChF,MAAM,CAACC,EAAQA,EAAOb,MAAM,KACzF,KACJ,SACIa,EAAOI,QAAQ,CAACnO,AAAM,EAANA,EAEpB,CACJ,CACA,OAAOI,CACX,EAYA4R,EAAU5D,eAAe,CAAG,SAAyBL,CAAM,EAGvD,MAFI,CAAEA,CAAAA,aAAkB7C,CAAM,GAC1B6C,CAAAA,EAAS,IAAI7C,EAAQ6C,EAAM,EACxB,IAAI,CAACD,MAAM,CAACC,EAAQA,EAAOb,MAAM,GAC5C,EAUA8E,EAAU3D,MAAM,CAAG,SAAgBjO,CAAO,EACtC,GAAI,AAAmB,UAAnB,OAAOA,GAAwBA,AAAY,OAAZA,EAC/B,MAAO,kBACX,GAAIA,AAAmB,MAAnBA,EAAQwS,OAAO,EAAYxS,EAAQ5F,cAAc,CAAC,WAAY,CAC9D,IAAIqQ,EAAQW,EAAME,KAAK,CAACiC,aAAa,CAACkF,gBAAgB,CAACxE,MAAM,CAACjO,EAAQwS,OAAO,EAC7E,GAAI/H,EACA,MAAO,WAAaA,CAC5B,CACA,GAAIzK,AAAoB,MAApBA,EAAQuS,QAAQ,EAAYvS,EAAQ5F,cAAc,CAAC,YAAa,CAChE,GAAI,CAACpB,MAAMqF,OAAO,CAAC2B,EAAQuS,QAAQ,EAC/B,MAAO,2BACX,IAAK,IAAI/K,EAAI,EAAGA,EAAIxH,EAAQuS,QAAQ,CAACzZ,MAAM,CAAE,EAAE0O,EAAG,CAC9C,IAAIiD,EAAQW,EAAME,KAAK,CAACiC,aAAa,CAACmF,YAAY,CAACzE,MAAM,CAACjO,EAAQuS,QAAQ,CAAC/K,EAAE,EAC7E,GAAIiD,EACA,MAAO,YAAcA,CAC7B,CACJ,CACA,OAAO,IACX,EAWAmH,EAAUtD,QAAQ,CAAG,SAAkBtO,CAAO,CAAE5O,CAAO,EAC/C,CAACA,GACDA,CAAAA,EAAU,CAAC,GACf,IAAIwM,EAAS,CAAC,EAOd,GANIxM,CAAAA,EAAQ8e,MAAM,EAAI9e,EAAQmd,QAAQ,AAAD,GACjC3Q,CAAAA,EAAO2U,QAAQ,CAAG,EAAE,AAAD,EACnBnhB,EAAQmd,QAAQ,EAChB3Q,CAAAA,EAAO4U,OAAO,CAAG,IAAG,EACD,MAAnBxS,EAAQwS,OAAO,EAAYxS,EAAQ5F,cAAc,CAAC,YAClDwD,CAAAA,EAAO4U,OAAO,CAAGpH,EAAME,KAAK,CAACiC,aAAa,CAACkF,gBAAgB,CAACnE,QAAQ,CAACtO,EAAQwS,OAAO,CAAEphB,EAAO,EAC7F4O,EAAQuS,QAAQ,EAAIvS,EAAQuS,QAAQ,CAACzZ,MAAM,CAAE,CAC7C8E,EAAO2U,QAAQ,CAAG,EAAE,CACpB,IAAK,IAAI1C,EAAI,EAAGA,EAAI7P,EAAQuS,QAAQ,CAACzZ,MAAM,CAAE,EAAE+W,EAC3CjS,EAAO2U,QAAQ,CAAC1C,EAAE,CAAGzE,EAAME,KAAK,CAACiC,aAAa,CAACmF,YAAY,CAACpE,QAAQ,CAACtO,EAAQuS,QAAQ,CAAC1C,EAAE,CAAEze,EAClG,CACA,OAAOwM,CACX,EASAgU,EAAUjY,SAAS,CAACoV,MAAM,CAAG,WACzB,OAAO,IAAI,CAAC9N,WAAW,CAACqN,QAAQ,CAAC,IAAI,CAAEzD,EAAUM,IAAI,CAAC6D,aAAa,CACvE,EAEO4C,CACX,IAEArE,EAAcsE,aAAa,CAAG,AAAC,WAmB3B,SAASA,EAActG,CAAU,EAC7B,GAAIA,EACA,IAAK,IAAItR,EAAOnM,OAAOmM,IAAI,CAACsR,GAAa/D,EAAI,EAAGA,EAAIvN,EAAKnB,MAAM,CAAE,EAAE0O,EACpC,MAAvB+D,CAAU,CAACtR,CAAI,CAACuN,EAAE,CAAC,EACnB,KAAI,CAACvN,CAAI,CAACuN,EAAE,CAAC,CAAG+D,CAAU,CAACtR,CAAI,CAACuN,EAAE,CAAC,AAAD,CAClD,CA4LA,OApLAqK,EAAclY,SAAS,CAAC4X,SAAS,CAAG,GAQpCM,EAAclY,SAAS,CAACgZ,QAAQ,CAAG,KAQnCd,EAAclY,SAAS,CAACiZ,UAAU,CAAG,KAUrCf,EAAcnf,MAAM,CAAG,SAAgB6Y,CAAU,EAC7C,OAAO,IAAIsG,EAActG,EAC7B,EAWAsG,EAAclF,MAAM,CAAG,SAAgB3M,CAAO,CAAE4M,CAAM,EASlD,MARI,CAACA,GACDA,CAAAA,EAAS5B,EAAQtY,MAAM,EAAC,EACH,MAArBsN,EAAQuR,SAAS,EAAYzjB,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,cACjE4M,EAAOE,MAAM,CAAwB,IAAIjJ,MAAM,CAAC7D,EAAQuR,SAAS,EAC7C,MAApBvR,EAAQ2S,QAAQ,EAAY7kB,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,aAChEoL,EAAME,KAAK,CAACiC,aAAa,CAACZ,MAAM,CAAC3M,EAAQ2S,QAAQ,CAAE/F,EAAOE,MAAM,CAAwB,IAAIC,IAAI,IAAIC,MAAM,GACpF,MAAtBhN,EAAQ4S,UAAU,EAAY9kB,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,eAClEoL,EAAME,KAAK,CAACiC,aAAa,CAACZ,MAAM,CAAC3M,EAAQ4S,UAAU,CAAEhG,EAAOE,MAAM,CAAwB,IAAIC,IAAI,IAAIC,MAAM,GACzGJ,CACX,EAWAiF,EAAcpE,eAAe,CAAG,SAAyBzN,CAAO,CAAE4M,CAAM,EACpE,OAAO,IAAI,CAACD,MAAM,CAAC3M,EAAS4M,GAAQI,MAAM,EAC9C,EAaA6E,EAAcnE,MAAM,CAAG,SAAgBC,CAAM,CAAE7U,CAAM,EAC7C,CAAE6U,CAAAA,aAAkB7C,CAAM,GAC1B6C,CAAAA,EAAS7C,EAAQpY,MAAM,CAACib,EAAM,EAElC,IADA,IAAIC,EAAM9U,AAAWiC,KAAAA,IAAXjC,EAAuB6U,EAAOE,GAAG,CAAGF,EAAOG,GAAG,CAAGhV,EAAQkH,EAAU,IAAIoL,EAAME,KAAK,CAACiC,aAAa,CAACsE,aAAa,CACjHlE,EAAOG,GAAG,CAAGF,GAAK,CACrB,IAAIhO,EAAM+N,EAAOb,MAAM,GACvB,OAAQlN,IAAQ,GAChB,KAAK,EACDI,EAAQuR,SAAS,CAAG5D,EAAO9J,MAAM,GACjC,KACJ,MAAK,EACD7D,EAAQ2S,QAAQ,CAAGvH,EAAME,KAAK,CAACiC,aAAa,CAACG,MAAM,CAACC,EAAQA,EAAOb,MAAM,IACzE,KACJ,MAAK,EACD9M,EAAQ4S,UAAU,CAAGxH,EAAME,KAAK,CAACiC,aAAa,CAACG,MAAM,CAACC,EAAQA,EAAOb,MAAM,IAC3E,KACJ,SACIa,EAAOI,QAAQ,CAACnO,AAAM,EAANA,EAEpB,CACJ,CACA,OAAOI,CACX,EAYA6R,EAAc7D,eAAe,CAAG,SAAyBL,CAAM,EAG3D,MAFI,CAAEA,CAAAA,aAAkB7C,CAAM,GAC1B6C,CAAAA,EAAS,IAAI7C,EAAQ6C,EAAM,EACxB,IAAI,CAACD,MAAM,CAACC,EAAQA,EAAOb,MAAM,GAC5C,EAUA+E,EAAc5D,MAAM,CAAG,SAAgBjO,CAAO,EAC1C,GAAI,AAAmB,UAAnB,OAAOA,GAAwBA,AAAY,OAAZA,EAC/B,MAAO,kBACX,GAAIA,AAAqB,MAArBA,EAAQuR,SAAS,EAAYvR,EAAQ5F,cAAc,CAAC,cAChD,CAAC8Q,EAAMmD,QAAQ,CAACrO,EAAQuR,SAAS,EACjC,MAAO,6BACf,GAAIvR,AAAoB,MAApBA,EAAQ2S,QAAQ,EAAY3S,EAAQ5F,cAAc,CAAC,YAAa,CAChE,IAAIqQ,EAAQW,EAAME,KAAK,CAACiC,aAAa,CAACU,MAAM,CAACjO,EAAQ2S,QAAQ,EAC7D,GAAIlI,EACA,MAAO,YAAcA,CAC7B,CACA,GAAIzK,AAAsB,MAAtBA,EAAQ4S,UAAU,EAAY5S,EAAQ5F,cAAc,CAAC,cAAe,CACpE,IAAIqQ,EAAQW,EAAME,KAAK,CAACiC,aAAa,CAACU,MAAM,CAACjO,EAAQ4S,UAAU,EAC/D,GAAInI,EACA,MAAO,cAAgBA,CAC/B,CACA,OAAO,IACX,EAWAoH,EAAcvD,QAAQ,CAAG,SAAkBtO,CAAO,CAAE5O,CAAO,EACnD,CAACA,GACDA,CAAAA,EAAU,CAAC,GACf,IAAIwM,EAAS,CAAC,EAYd,OAXIxM,EAAQmd,QAAQ,GAChB3Q,EAAO2T,SAAS,CAAG,GACnB3T,EAAO+U,QAAQ,CAAG,KAClB/U,EAAOgV,UAAU,CAAG,MAEC,MAArB5S,EAAQuR,SAAS,EAAYvR,EAAQ5F,cAAc,CAAC,cACpDwD,CAAAA,EAAO2T,SAAS,CAAGvR,EAAQuR,SAAS,AAAD,EACf,MAApBvR,EAAQ2S,QAAQ,EAAY3S,EAAQ5F,cAAc,CAAC,aACnDwD,CAAAA,EAAO+U,QAAQ,CAAGvH,EAAME,KAAK,CAACiC,aAAa,CAACe,QAAQ,CAACtO,EAAQ2S,QAAQ,CAAEvhB,EAAO,EACxD,MAAtB4O,EAAQ4S,UAAU,EAAY5S,EAAQ5F,cAAc,CAAC,eACrDwD,CAAAA,EAAOgV,UAAU,CAAGxH,EAAME,KAAK,CAACiC,aAAa,CAACe,QAAQ,CAACtO,EAAQ4S,UAAU,CAAExhB,EAAO,EAC/EwM,CACX,EASAiU,EAAclY,SAAS,CAACoV,MAAM,CAAG,WAC7B,OAAO,IAAI,CAAC9N,WAAW,CAACqN,QAAQ,CAAC,IAAI,CAAEzD,EAAUM,IAAI,CAAC6D,aAAa,CACvE,EAEO6C,CACX,IAEAtE,EAAckF,gBAAgB,CAAG,AAAC,WAiB9B,SAASA,EAAiBlH,CAAU,EAChC,GAAIA,EACA,IAAK,IAAItR,EAAOnM,OAAOmM,IAAI,CAACsR,GAAa/D,EAAI,EAAGA,EAAIvN,EAAKnB,MAAM,CAAE,EAAE0O,EACpC,MAAvB+D,CAAU,CAACtR,CAAI,CAACuN,EAAE,CAAC,EACnB,KAAI,CAACvN,CAAI,CAACuN,EAAE,CAAC,CAAG+D,CAAU,CAACtR,CAAI,CAACuN,EAAE,CAAC,AAAD,CAClD,CAmJA,OA3IAiL,EAAiB9Y,SAAS,CAAC/K,IAAI,CAAG,KAUlC6jB,EAAiB/f,MAAM,CAAG,SAAgB6Y,CAAU,EAChD,OAAO,IAAIkH,EAAiBlH,EAChC,EAWAkH,EAAiB9F,MAAM,CAAG,SAAgB3M,CAAO,CAAE4M,CAAM,EAKrD,MAJI,CAACA,GACDA,CAAAA,EAAS5B,EAAQtY,MAAM,EAAC,EACR,MAAhBsN,EAAQpR,IAAI,EAAYd,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,SAC5DoL,EAAME,KAAK,CAACiC,aAAa,CAACZ,MAAM,CAAC3M,EAAQpR,IAAI,CAAEge,EAAOE,MAAM,CAAwB,IAAIC,IAAI,IAAIC,MAAM,GACnGJ,CACX,EAWA6F,EAAiBhF,eAAe,CAAG,SAAyBzN,CAAO,CAAE4M,CAAM,EACvE,OAAO,IAAI,CAACD,MAAM,CAAC3M,EAAS4M,GAAQI,MAAM,EAC9C,EAaAyF,EAAiB/E,MAAM,CAAG,SAAgBC,CAAM,CAAE7U,CAAM,EAChD,CAAE6U,CAAAA,aAAkB7C,CAAM,GAC1B6C,CAAAA,EAAS7C,EAAQpY,MAAM,CAACib,EAAM,EAElC,IADA,IAAIC,EAAM9U,AAAWiC,KAAAA,IAAXjC,EAAuB6U,EAAOE,GAAG,CAAGF,EAAOG,GAAG,CAAGhV,EAAQkH,EAAU,IAAIoL,EAAME,KAAK,CAACiC,aAAa,CAACkF,gBAAgB,CACpH9E,EAAOG,GAAG,CAAGF,GAAK,CACrB,IAAIhO,EAAM+N,EAAOb,MAAM,GACvB,GAAQlN,IAAQ,GACX,EACDI,EAAQpR,IAAI,CAAGwc,EAAME,KAAK,CAACiC,aAAa,CAACG,MAAM,CAACC,EAAQA,EAAOb,MAAM,SAGrEa,EAAOI,QAAQ,CAACnO,AAAM,EAANA,EAGxB,CACA,OAAOI,CACX,EAYAyS,EAAiBzE,eAAe,CAAG,SAAyBL,CAAM,EAG9D,MAFI,CAAEA,CAAAA,aAAkB7C,CAAM,GAC1B6C,CAAAA,EAAS,IAAI7C,EAAQ6C,EAAM,EACxB,IAAI,CAACD,MAAM,CAACC,EAAQA,EAAOb,MAAM,GAC5C,EAUA2F,EAAiBxE,MAAM,CAAG,SAAgBjO,CAAO,EAC7C,GAAI,AAAmB,UAAnB,OAAOA,GAAwBA,AAAY,OAAZA,EAC/B,MAAO,kBACX,GAAIA,AAAgB,MAAhBA,EAAQpR,IAAI,EAAYoR,EAAQ5F,cAAc,CAAC,QAAS,CACxD,IAAIqQ,EAAQW,EAAME,KAAK,CAACiC,aAAa,CAACU,MAAM,CAACjO,EAAQpR,IAAI,EACzD,GAAI6b,EACA,MAAO,QAAUA,CACzB,CACA,OAAO,IACX,EAWAgI,EAAiBnE,QAAQ,CAAG,SAAkBtO,CAAO,CAAE5O,CAAO,EACtD,CAACA,GACDA,CAAAA,EAAU,CAAC,GACf,IAAIwM,EAAS,CAAC,EAKd,OAJIxM,EAAQmd,QAAQ,EAChB3Q,CAAAA,EAAOhP,IAAI,CAAG,IAAG,EACD,MAAhBoR,EAAQpR,IAAI,EAAYoR,EAAQ5F,cAAc,CAAC,SAC/CwD,CAAAA,EAAOhP,IAAI,CAAGwc,EAAME,KAAK,CAACiC,aAAa,CAACe,QAAQ,CAACtO,EAAQpR,IAAI,CAAEwC,EAAO,EACnEwM,CACX,EASA6U,EAAiB9Y,SAAS,CAACoV,MAAM,CAAG,WAChC,OAAO,IAAI,CAAC9N,WAAW,CAACqN,QAAQ,CAAC,IAAI,CAAEzD,EAAUM,IAAI,CAAC6D,aAAa,CACvE,EAEOyD,CACX,IAEAlF,EAAcmF,YAAY,CAAG,AAAC,WAoB1B,SAASA,EAAanH,CAAU,EAG5B,GAFA,IAAI,CAACsH,OAAO,CAAG,EAAE,CACjB,IAAI,CAAC3U,IAAI,CAAG,EAAE,CACVqN,EACA,IAAK,IAAItR,EAAOnM,OAAOmM,IAAI,CAACsR,GAAa/D,EAAI,EAAGA,EAAIvN,EAAKnB,MAAM,CAAE,EAAE0O,EACpC,MAAvB+D,CAAU,CAACtR,CAAI,CAACuN,EAAE,CAAC,EACnB,KAAI,CAACvN,CAAI,CAACuN,EAAE,CAAC,CAAG+D,CAAU,CAACtR,CAAI,CAACuN,EAAE,CAAC,AAAD,CAClD,CAuOA,OA/NAkL,EAAa/Y,SAAS,CAACkZ,OAAO,CAAG3H,EAAM6E,UAAU,CAQjD2C,EAAa/Y,SAAS,CAACmZ,KAAK,CAAG,GAQ/BJ,EAAa/Y,SAAS,CAACuE,IAAI,CAAGgN,EAAM6E,UAAU,CAQ9C2C,EAAa/Y,SAAS,CAAC/K,IAAI,CAAG,KAU9B8jB,EAAahgB,MAAM,CAAG,SAAgB6Y,CAAU,EAC5C,OAAO,IAAImH,EAAanH,EAC5B,EAWAmH,EAAa/F,MAAM,CAAG,SAAgB3M,CAAO,CAAE4M,CAAM,EAGjD,GAFI,CAACA,GACDA,CAAAA,EAAS5B,EAAQtY,MAAM,EAAC,EACxBsN,AAAmB,MAAnBA,EAAQ6S,OAAO,EAAY7S,EAAQ6S,OAAO,CAAC/Z,MAAM,CACjD,IAAK,IAAI0O,EAAI,EAAGA,EAAIxH,EAAQ6S,OAAO,CAAC/Z,MAAM,CAAE,EAAE0O,EAC1C4D,EAAME,KAAK,CAACiC,aAAa,CAACwF,mBAAmB,CAACpG,MAAM,CAAC3M,EAAQ6S,OAAO,CAACrL,EAAE,CAAEoF,EAAOE,MAAM,CAAwB,IAAIC,IAAI,IAAIC,MAAM,GAGxI,GAFqB,MAAjBhN,EAAQ8S,KAAK,EAAYhlB,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,UAC7D4M,EAAOE,MAAM,CAAwB,IAAIjJ,MAAM,CAAC7D,EAAQ8S,KAAK,EAC7D9S,AAAgB,MAAhBA,EAAQ9B,IAAI,EAAY8B,EAAQ9B,IAAI,CAACpF,MAAM,CAC3C,IAAK,IAAI0O,EAAI,EAAGA,EAAIxH,EAAQ9B,IAAI,CAACpF,MAAM,CAAE,EAAE0O,EACvC4D,EAAME,KAAK,CAACiC,aAAa,CAAC+E,mBAAmB,CAAC3F,MAAM,CAAC3M,EAAQ9B,IAAI,CAACsJ,EAAE,CAAEoF,EAAOE,MAAM,CAAwB,IAAIC,IAAI,IAAIC,MAAM,GAGrI,OAFoB,MAAhBhN,EAAQpR,IAAI,EAAYd,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,SAC5DoL,EAAME,KAAK,CAACiC,aAAa,CAACZ,MAAM,CAAC3M,EAAQpR,IAAI,CAAEge,EAAOE,MAAM,CAAwB,IAAIC,IAAI,IAAIC,MAAM,GACnGJ,CACX,EAWA8F,EAAajF,eAAe,CAAG,SAAyBzN,CAAO,CAAE4M,CAAM,EACnE,OAAO,IAAI,CAACD,MAAM,CAAC3M,EAAS4M,GAAQI,MAAM,EAC9C,EAaA0F,EAAahF,MAAM,CAAG,SAAgBC,CAAM,CAAE7U,CAAM,EAC5C,CAAE6U,CAAAA,aAAkB7C,CAAM,GAC1B6C,CAAAA,EAAS7C,EAAQpY,MAAM,CAACib,EAAM,EAElC,IADA,IAAIC,EAAM9U,AAAWiC,KAAAA,IAAXjC,EAAuB6U,EAAOE,GAAG,CAAGF,EAAOG,GAAG,CAAGhV,EAAQkH,EAAU,IAAIoL,EAAME,KAAK,CAACiC,aAAa,CAACmF,YAAY,CAChH/E,EAAOG,GAAG,CAAGF,GAAK,CACrB,IAAIhO,EAAM+N,EAAOb,MAAM,GACvB,OAAQlN,IAAQ,GAChB,KAAK,EACG,CAAEI,CAAAA,EAAQ6S,OAAO,EAAI7S,EAAQ6S,OAAO,CAAC/Z,MAAM,AAAD,GAC1CkH,CAAAA,EAAQ6S,OAAO,CAAG,EAAE,AAAD,EACvB7S,EAAQ6S,OAAO,CAAChW,IAAI,CAACuO,EAAME,KAAK,CAACiC,aAAa,CAACwF,mBAAmB,CAACrF,MAAM,CAACC,EAAQA,EAAOb,MAAM,KAC/F,KACJ,MAAK,EACD9M,EAAQ8S,KAAK,CAAGnF,EAAO9J,MAAM,GAC7B,KACJ,MAAK,EACG,CAAE7D,CAAAA,EAAQ9B,IAAI,EAAI8B,EAAQ9B,IAAI,CAACpF,MAAM,AAAD,GACpCkH,CAAAA,EAAQ9B,IAAI,CAAG,EAAE,AAAD,EACpB8B,EAAQ9B,IAAI,CAACrB,IAAI,CAACuO,EAAME,KAAK,CAACiC,aAAa,CAAC+E,mBAAmB,CAAC5E,MAAM,CAACC,EAAQA,EAAOb,MAAM,KAC5F,KACJ,MAAK,EACD9M,EAAQpR,IAAI,CAAGwc,EAAME,KAAK,CAACiC,aAAa,CAACG,MAAM,CAACC,EAAQA,EAAOb,MAAM,IACrE,KACJ,SACIa,EAAOI,QAAQ,CAACnO,AAAM,EAANA,EAEpB,CACJ,CACA,OAAOI,CACX,EAYA0S,EAAa1E,eAAe,CAAG,SAAyBL,CAAM,EAG1D,MAFI,CAAEA,CAAAA,aAAkB7C,CAAM,GAC1B6C,CAAAA,EAAS,IAAI7C,EAAQ6C,EAAM,EACxB,IAAI,CAACD,MAAM,CAACC,EAAQA,EAAOb,MAAM,GAC5C,EAUA4F,EAAazE,MAAM,CAAG,SAAgBjO,CAAO,EACzC,GAAI,AAAmB,UAAnB,OAAOA,GAAwBA,AAAY,OAAZA,EAC/B,MAAO,kBACX,GAAIA,AAAmB,MAAnBA,EAAQ6S,OAAO,EAAY7S,EAAQ5F,cAAc,CAAC,WAAY,CAC9D,GAAI,CAACpB,MAAMqF,OAAO,CAAC2B,EAAQ6S,OAAO,EAC9B,MAAO,0BACX,IAAK,IAAIrL,EAAI,EAAGA,EAAIxH,EAAQ6S,OAAO,CAAC/Z,MAAM,CAAE,EAAE0O,EAAG,CAC7C,IAAIiD,EAAQW,EAAME,KAAK,CAACiC,aAAa,CAACwF,mBAAmB,CAAC9E,MAAM,CAACjO,EAAQ6S,OAAO,CAACrL,EAAE,EACnF,GAAIiD,EACA,MAAO,WAAaA,CAC5B,CACJ,CACA,GAAIzK,AAAiB,MAAjBA,EAAQ8S,KAAK,EAAY9S,EAAQ5F,cAAc,CAAC,UAC5C,CAAC8Q,EAAMmD,QAAQ,CAACrO,EAAQ8S,KAAK,EAC7B,MAAO,yBACf,GAAI9S,AAAgB,MAAhBA,EAAQ9B,IAAI,EAAY8B,EAAQ5F,cAAc,CAAC,QAAS,CACxD,GAAI,CAACpB,MAAMqF,OAAO,CAAC2B,EAAQ9B,IAAI,EAC3B,MAAO,uBACX,IAAK,IAAIsJ,EAAI,EAAGA,EAAIxH,EAAQ9B,IAAI,CAACpF,MAAM,CAAE,EAAE0O,EAAG,CAC1C,IAAIiD,EAAQW,EAAME,KAAK,CAACiC,aAAa,CAAC+E,mBAAmB,CAACrE,MAAM,CAACjO,EAAQ9B,IAAI,CAACsJ,EAAE,EAChF,GAAIiD,EACA,MAAO,QAAUA,CACzB,CACJ,CACA,GAAIzK,AAAgB,MAAhBA,EAAQpR,IAAI,EAAYoR,EAAQ5F,cAAc,CAAC,QAAS,CACxD,IAAIqQ,EAAQW,EAAME,KAAK,CAACiC,aAAa,CAACU,MAAM,CAACjO,EAAQpR,IAAI,EACzD,GAAI6b,EACA,MAAO,QAAUA,CACzB,CACA,OAAO,IACX,EAWAiI,EAAapE,QAAQ,CAAG,SAAkBtO,CAAO,CAAE5O,CAAO,EAClD,CAACA,GACDA,CAAAA,EAAU,CAAC,GACf,IAAIwM,EAAS,CAAC,EASd,GARIxM,CAAAA,EAAQ8e,MAAM,EAAI9e,EAAQmd,QAAQ,AAAD,IACjC3Q,EAAOiV,OAAO,CAAG,EAAE,CACnBjV,EAAOM,IAAI,CAAG,EAAE,EAEhB9M,EAAQmd,QAAQ,GAChB3Q,EAAOkV,KAAK,CAAG,GACflV,EAAOhP,IAAI,CAAG,MAEdoR,EAAQ6S,OAAO,EAAI7S,EAAQ6S,OAAO,CAAC/Z,MAAM,CAAE,CAC3C8E,EAAOiV,OAAO,CAAG,EAAE,CACnB,IAAK,IAAIhD,EAAI,EAAGA,EAAI7P,EAAQ6S,OAAO,CAAC/Z,MAAM,CAAE,EAAE+W,EAC1CjS,EAAOiV,OAAO,CAAChD,EAAE,CAAGzE,EAAME,KAAK,CAACiC,aAAa,CAACwF,mBAAmB,CAACzE,QAAQ,CAACtO,EAAQ6S,OAAO,CAAChD,EAAE,CAAEze,EACvG,CAGA,GAFqB,MAAjB4O,EAAQ8S,KAAK,EAAY9S,EAAQ5F,cAAc,CAAC,UAChDwD,CAAAA,EAAOkV,KAAK,CAAG9S,EAAQ8S,KAAK,AAAD,EAC3B9S,EAAQ9B,IAAI,EAAI8B,EAAQ9B,IAAI,CAACpF,MAAM,CAAE,CACrC8E,EAAOM,IAAI,CAAG,EAAE,CAChB,IAAK,IAAI2R,EAAI,EAAGA,EAAI7P,EAAQ9B,IAAI,CAACpF,MAAM,CAAE,EAAE+W,EACvCjS,EAAOM,IAAI,CAAC2R,EAAE,CAAGzE,EAAME,KAAK,CAACiC,aAAa,CAAC+E,mBAAmB,CAAChE,QAAQ,CAACtO,EAAQ9B,IAAI,CAAC2R,EAAE,CAAEze,EACjG,CAGA,OAFoB,MAAhB4O,EAAQpR,IAAI,EAAYoR,EAAQ5F,cAAc,CAAC,SAC/CwD,CAAAA,EAAOhP,IAAI,CAAGwc,EAAME,KAAK,CAACiC,aAAa,CAACe,QAAQ,CAACtO,EAAQpR,IAAI,CAAEwC,EAAO,EACnEwM,CACX,EASA8U,EAAa/Y,SAAS,CAACoV,MAAM,CAAG,WAC5B,OAAO,IAAI,CAAC9N,WAAW,CAACqN,QAAQ,CAAC,IAAI,CAAEzD,EAAUM,IAAI,CAAC6D,aAAa,CACvE,EAEO0D,CACX,IAEAnF,EAAcwF,mBAAmB,CAAG,AAAC,WAkBjC,SAASA,EAAoBxH,CAAU,EACnC,GAAIA,EACA,IAAK,IAAItR,EAAOnM,OAAOmM,IAAI,CAACsR,GAAa/D,EAAI,EAAGA,EAAIvN,EAAKnB,MAAM,CAAE,EAAE0O,EACpC,MAAvB+D,CAAU,CAACtR,CAAI,CAACuN,EAAE,CAAC,EACnB,KAAI,CAACvN,CAAI,CAACuN,EAAE,CAAC,CAAG+D,CAAU,CAACtR,CAAI,CAACuN,EAAE,CAAC,AAAD,CAClD,CAqKA,OA7JAuL,EAAoBpZ,SAAS,CAACqX,EAAE,CAAG,GAQnC+B,EAAoBpZ,SAAS,CAACqZ,UAAU,CAAG,GAU3CD,EAAoBrgB,MAAM,CAAG,SAAgB6Y,CAAU,EACnD,OAAO,IAAIwH,EAAoBxH,EACnC,EAWAwH,EAAoBpG,MAAM,CAAG,SAAgB3M,CAAO,CAAE4M,CAAM,EAOxD,MANI,CAACA,GACDA,CAAAA,EAAS5B,EAAQtY,MAAM,EAAC,EACV,MAAdsN,EAAQgR,EAAE,EAAYljB,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,OAC1D4M,EAAOE,MAAM,CAAwB,IAAIjJ,MAAM,CAAC7D,EAAQgR,EAAE,EACpC,MAAtBhR,EAAQgT,UAAU,EAAYllB,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,eAClE4M,EAAOE,MAAM,CAAwB,IAAIjJ,MAAM,CAAC7D,EAAQgT,UAAU,EAC/DpG,CACX,EAWAmG,EAAoBtF,eAAe,CAAG,SAAyBzN,CAAO,CAAE4M,CAAM,EAC1E,OAAO,IAAI,CAACD,MAAM,CAAC3M,EAAS4M,GAAQI,MAAM,EAC9C,EAaA+F,EAAoBrF,MAAM,CAAG,SAAgBC,CAAM,CAAE7U,CAAM,EACnD,CAAE6U,CAAAA,aAAkB7C,CAAM,GAC1B6C,CAAAA,EAAS7C,EAAQpY,MAAM,CAACib,EAAM,EAElC,IADA,IAAIC,EAAM9U,AAAWiC,KAAAA,IAAXjC,EAAuB6U,EAAOE,GAAG,CAAGF,EAAOG,GAAG,CAAGhV,EAAQkH,EAAU,IAAIoL,EAAME,KAAK,CAACiC,aAAa,CAACwF,mBAAmB,CACvHpF,EAAOG,GAAG,CAAGF,GAAK,CACrB,IAAIhO,EAAM+N,EAAOb,MAAM,GACvB,OAAQlN,IAAQ,GAChB,KAAK,EACDI,EAAQgR,EAAE,CAAGrD,EAAO9J,MAAM,GAC1B,KACJ,MAAK,EACD7D,EAAQgT,UAAU,CAAGrF,EAAO9J,MAAM,GAClC,KACJ,SACI8J,EAAOI,QAAQ,CAACnO,AAAM,EAANA,EAEpB,CACJ,CACA,OAAOI,CACX,EAYA+S,EAAoB/E,eAAe,CAAG,SAAyBL,CAAM,EAGjE,MAFI,CAAEA,CAAAA,aAAkB7C,CAAM,GAC1B6C,CAAAA,EAAS,IAAI7C,EAAQ6C,EAAM,EACxB,IAAI,CAACD,MAAM,CAACC,EAAQA,EAAOb,MAAM,GAC5C,EAUAiG,EAAoB9E,MAAM,CAAG,SAAgBjO,CAAO,QAChD,AAAI,AAAmB,UAAnB,OAAOA,GAAwBA,AAAY,OAAZA,EACxB,kBACPA,AAAc,MAAdA,EAAQgR,EAAE,EAAYhR,EAAQ5F,cAAc,CAAC,OACzC,CAAC8Q,EAAMmD,QAAQ,CAACrO,EAAQgR,EAAE,EACnB,sBACXhR,AAAsB,MAAtBA,EAAQgT,UAAU,EAAYhT,EAAQ5F,cAAc,CAAC,eACjD,CAAC8Q,EAAMmD,QAAQ,CAACrO,EAAQgT,UAAU,EAC3B,8BACR,IACX,EAWAD,EAAoBzE,QAAQ,CAAG,SAAkBtO,CAAO,CAAE5O,CAAO,EACzD,CAACA,GACDA,CAAAA,EAAU,CAAC,GACf,IAAIwM,EAAS,CAAC,EASd,OARIxM,EAAQmd,QAAQ,GAChB3Q,EAAOoT,EAAE,CAAG,GACZpT,EAAOoV,UAAU,CAAG,IAEN,MAAdhT,EAAQgR,EAAE,EAAYhR,EAAQ5F,cAAc,CAAC,OAC7CwD,CAAAA,EAAOoT,EAAE,CAAGhR,EAAQgR,EAAE,AAAD,EACC,MAAtBhR,EAAQgT,UAAU,EAAYhT,EAAQ5F,cAAc,CAAC,eACrDwD,CAAAA,EAAOoV,UAAU,CAAGhT,EAAQgT,UAAU,AAAD,EAClCpV,CACX,EASAmV,EAAoBpZ,SAAS,CAACoV,MAAM,CAAG,WACnC,OAAO,IAAI,CAAC9N,WAAW,CAACqN,QAAQ,CAAC,IAAI,CAAEzD,EAAUM,IAAI,CAAC6D,aAAa,CACvE,EAEO+D,CACX,IAEAxF,EAAc+E,mBAAmB,CAAG,AAAC,eA0C7B5B,EAxBJ,SAAS4B,EAAoB/G,CAAU,EACnC,GAAIA,EACA,IAAK,IAAItR,EAAOnM,OAAOmM,IAAI,CAACsR,GAAa/D,EAAI,EAAGA,EAAIvN,EAAKnB,MAAM,CAAE,EAAE0O,EACpC,MAAvB+D,CAAU,CAACtR,CAAI,CAACuN,EAAE,CAAC,EACnB,KAAI,CAACvN,CAAI,CAACuN,EAAE,CAAC,CAAG+D,CAAU,CAACtR,CAAI,CAACuN,EAAE,CAAC,AAAD,CAClD,CA4LA,OApLA8K,EAAoB3Y,SAAS,CAAC9G,SAAS,CAAG,GAQ1Cyf,EAAoB3Y,SAAS,CAACd,KAAK,CAAG,EAWtC/K,OAAOC,cAAc,CAACukB,EAAoB3Y,SAAS,CAAE,KAAM,CACvD7F,IAAKoX,EAAM4F,WAAW,CAACJ,EAAe,CAAC,YAAa,QAAQ,EAC5DjX,IAAKyR,EAAM6F,WAAW,CAACL,EAC3B,GAUA4B,EAAoB5f,MAAM,CAAG,SAAgB6Y,CAAU,EACnD,OAAO,IAAI+G,EAAoB/G,EACnC,EAWA+G,EAAoB3F,MAAM,CAAG,SAAgB3M,CAAO,CAAE4M,CAAM,EAOxD,MANI,CAACA,GACDA,CAAAA,EAAS5B,EAAQtY,MAAM,EAAC,EACH,MAArBsN,EAAQnN,SAAS,EAAY/E,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,cACjE4M,EAAOE,MAAM,CAAwB,IAAIjJ,MAAM,CAAC7D,EAAQnN,SAAS,EAChD,MAAjBmN,EAAQnH,KAAK,EAAY/K,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,UAC7D4M,EAAOE,MAAM,CAAwB,IAAIA,MAAM,CAAC9M,EAAQnH,KAAK,EAC1D+T,CACX,EAWA0F,EAAoB7E,eAAe,CAAG,SAAyBzN,CAAO,CAAE4M,CAAM,EAC1E,OAAO,IAAI,CAACD,MAAM,CAAC3M,EAAS4M,GAAQI,MAAM,EAC9C,EAaAsF,EAAoB5E,MAAM,CAAG,SAAgBC,CAAM,CAAE7U,CAAM,EACnD,CAAE6U,CAAAA,aAAkB7C,CAAM,GAC1B6C,CAAAA,EAAS7C,EAAQpY,MAAM,CAACib,EAAM,EAElC,IADA,IAAIC,EAAM9U,AAAWiC,KAAAA,IAAXjC,EAAuB6U,EAAOE,GAAG,CAAGF,EAAOG,GAAG,CAAGhV,EAAQkH,EAAU,IAAIoL,EAAME,KAAK,CAACiC,aAAa,CAAC+E,mBAAmB,CACvH3E,EAAOG,GAAG,CAAGF,GAAK,CACrB,IAAIhO,EAAM+N,EAAOb,MAAM,GACvB,OAAQlN,IAAQ,GAChB,KAAK,EACDI,EAAQnN,SAAS,CAAG8a,EAAO9J,MAAM,GACjC,KACJ,MAAK,EACD7D,EAAQnH,KAAK,CAAG8U,EAAOb,MAAM,GAC7B,KACJ,SACIa,EAAOI,QAAQ,CAACnO,AAAM,EAANA,EAEpB,CACJ,CACA,OAAOI,CACX,EAYAsS,EAAoBtE,eAAe,CAAG,SAAyBL,CAAM,EAGjE,MAFI,CAAEA,CAAAA,aAAkB7C,CAAM,GAC1B6C,CAAAA,EAAS,IAAI7C,EAAQ6C,EAAM,EACxB,IAAI,CAACD,MAAM,CAACC,EAAQA,EAAOb,MAAM,GAC5C,EAUAwF,EAAoBrE,MAAM,CAAG,SAAgBjO,CAAO,EAChD,GAAI,AAAmB,UAAnB,OAAOA,GAAwBA,AAAY,OAAZA,EAC/B,MAAO,kBACX,IAAIuL,EAAa,CAAC,EAClB,GAAIvL,AAAqB,MAArBA,EAAQnN,SAAS,EAAYmN,EAAQ5F,cAAc,CAAC,eACpDmR,EAAWyF,EAAE,CAAG,EACZ,CAAC9F,EAAMmD,QAAQ,CAACrO,EAAQnN,SAAS,GACjC,MAAO,6BAEf,GAAImN,AAAiB,MAAjBA,EAAQnH,KAAK,EAAYmH,EAAQ5F,cAAc,CAAC,SAAU,CAC1D,GAAImR,AAAkB,IAAlBA,EAAWyF,EAAE,CACb,MAAO,sBAEX,GADAzF,EAAWyF,EAAE,CAAG,EACZ,CAAC9F,EAAMgD,SAAS,CAAClO,EAAQnH,KAAK,EAC9B,MAAO,yBACf,CACA,OAAO,IACX,EAWAyZ,EAAoBhE,QAAQ,CAAG,SAAkBtO,CAAO,CAAE5O,CAAO,EACzD,CAACA,GACDA,CAAAA,EAAU,CAAC,GACf,IAAIwM,EAAS,CAAC,EAWd,OAVyB,MAArBoC,EAAQnN,SAAS,EAAYmN,EAAQ5F,cAAc,CAAC,eACpDwD,EAAO/K,SAAS,CAAGmN,EAAQnN,SAAS,CAChCzB,EAAQ6f,MAAM,EACdrT,CAAAA,EAAOoT,EAAE,CAAG,WAAU,GAET,MAAjBhR,EAAQnH,KAAK,EAAYmH,EAAQ5F,cAAc,CAAC,WAChDwD,EAAO/E,KAAK,CAAGmH,EAAQnH,KAAK,CACxBzH,EAAQ6f,MAAM,EACdrT,CAAAA,EAAOoT,EAAE,CAAG,OAAM,GAEnBpT,CACX,EASA0U,EAAoB3Y,SAAS,CAACoV,MAAM,CAAG,WACnC,OAAO,IAAI,CAAC9N,WAAW,CAACqN,QAAQ,CAAC,IAAI,CAAEzD,EAAUM,IAAI,CAAC6D,aAAa,CACvE,EAEOsD,CACX,IAEO/E,CACX,IAEOjC,CACX,IAEAF,EAAM6H,YAAY,CAAG,AAAC,WAuBlB,SAASA,EAAa1H,CAAU,EAC5B,GAAIA,EACA,IAAK,IAAItR,EAAOnM,OAAOmM,IAAI,CAACsR,GAAa/D,EAAI,EAAGA,EAAIvN,EAAKnB,MAAM,CAAE,EAAE0O,EACpC,MAAvB+D,CAAU,CAACtR,CAAI,CAACuN,EAAE,CAAC,EACnB,KAAI,CAACvN,CAAI,CAACuN,EAAE,CAAC,CAAG+D,CAAU,CAACtR,CAAI,CAACuN,EAAE,CAAC,AAAD,CAClD,CAoQA,OA5PAyL,EAAatZ,SAAS,CAACuZ,QAAQ,CAAG,GAQlCD,EAAatZ,SAAS,CAACwZ,QAAQ,CAAG,GAQlCF,EAAatZ,SAAS,CAACyZ,YAAY,CAAG,GAQtCH,EAAatZ,SAAS,CAAC0Z,cAAc,CAAG,GAQxCJ,EAAatZ,SAAS,CAAC2Z,cAAc,CAAG,GAQxCL,EAAatZ,SAAS,CAAC4Z,KAAK,CAAG,GAQ/BN,EAAatZ,SAAS,CAAC6Z,kBAAkB,CAAG,GAU5CP,EAAavgB,MAAM,CAAG,SAAgB6Y,CAAU,EAC5C,OAAO,IAAI0H,EAAa1H,EAC5B,EAWA0H,EAAatG,MAAM,CAAG,SAAgB3M,CAAO,CAAE4M,CAAM,EAiBjD,MAhBI,CAACA,GACDA,CAAAA,EAAS5B,EAAQtY,MAAM,EAAC,EACJ,MAApBsN,EAAQmT,QAAQ,EAAYrlB,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,aAChE4M,EAAOE,MAAM,CAAwB,IAAIjJ,MAAM,CAAC7D,EAAQmT,QAAQ,EACxC,MAAxBnT,EAAQoT,YAAY,EAAYtlB,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,iBACpE4M,EAAOE,MAAM,CAAwB,IAAIjJ,MAAM,CAAC7D,EAAQoT,YAAY,EAC1C,MAA1BpT,EAAQqT,cAAc,EAAYvlB,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,mBACtE4M,EAAOE,MAAM,CAAwB,IAAIjJ,MAAM,CAAC7D,EAAQqT,cAAc,EAC5C,MAA1BrT,EAAQsT,cAAc,EAAYxlB,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,mBACtE4M,EAAOE,MAAM,CAAwB,IAAIjJ,MAAM,CAAC7D,EAAQsT,cAAc,EACrD,MAAjBtT,EAAQuT,KAAK,EAAYzlB,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,UAC7D4M,EAAOE,MAAM,CAAwB,IAAIjJ,MAAM,CAAC7D,EAAQuT,KAAK,EAC/B,MAA9BvT,EAAQwT,kBAAkB,EAAY1lB,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,uBAC1E4M,EAAOE,MAAM,CAAyB,IAAIjJ,MAAM,CAAC7D,EAAQwT,kBAAkB,EACvD,MAApBxT,EAAQkT,QAAQ,EAAYplB,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,aAChE4M,EAAOE,MAAM,CAAyB,IAAIjJ,MAAM,CAAC7D,EAAQkT,QAAQ,EAC9DtG,CACX,EAWAqG,EAAaxF,eAAe,CAAG,SAAyBzN,CAAO,CAAE4M,CAAM,EACnE,OAAO,IAAI,CAACD,MAAM,CAAC3M,EAAS4M,GAAQI,MAAM,EAC9C,EAaAiG,EAAavF,MAAM,CAAG,SAAgBC,CAAM,CAAE7U,CAAM,EAC5C,CAAE6U,CAAAA,aAAkB7C,CAAM,GAC1B6C,CAAAA,EAAS7C,EAAQpY,MAAM,CAACib,EAAM,EAElC,IADA,IAAIC,EAAM9U,AAAWiC,KAAAA,IAAXjC,EAAuB6U,EAAOE,GAAG,CAAGF,EAAOG,GAAG,CAAGhV,EAAQkH,EAAU,IAAIoL,EAAM6H,YAAY,CAC5FtF,EAAOG,GAAG,CAAGF,GAAK,CACrB,IAAIhO,EAAM+N,EAAOb,MAAM,GACvB,OAAQlN,IAAQ,GAChB,KAAK,GACDI,EAAQkT,QAAQ,CAAGvF,EAAO9J,MAAM,GAChC,KACJ,MAAK,EACD7D,EAAQmT,QAAQ,CAAGxF,EAAO9J,MAAM,GAChC,KACJ,MAAK,EACD7D,EAAQoT,YAAY,CAAGzF,EAAO9J,MAAM,GACpC,KACJ,MAAK,EACD7D,EAAQqT,cAAc,CAAG1F,EAAO9J,MAAM,GACtC,KACJ,MAAK,EACD7D,EAAQsT,cAAc,CAAG3F,EAAO9J,MAAM,GACtC,KACJ,MAAK,EACD7D,EAAQuT,KAAK,CAAG5F,EAAO9J,MAAM,GAC7B,KACJ,MAAK,GACD7D,EAAQwT,kBAAkB,CAAG7F,EAAO9J,MAAM,GAC1C,KACJ,SACI8J,EAAOI,QAAQ,CAACnO,AAAM,EAANA,EAEpB,CACJ,CACA,OAAOI,CACX,EAYAiT,EAAajF,eAAe,CAAG,SAAyBL,CAAM,EAG1D,MAFI,CAAEA,CAAAA,aAAkB7C,CAAM,GAC1B6C,CAAAA,EAAS,IAAI7C,EAAQ6C,EAAM,EACxB,IAAI,CAACD,MAAM,CAACC,EAAQA,EAAOb,MAAM,GAC5C,EAUAmG,EAAahF,MAAM,CAAG,SAAgBjO,CAAO,QACzC,AAAI,AAAmB,UAAnB,OAAOA,GAAwBA,AAAY,OAAZA,EACxB,kBACPA,AAAoB,MAApBA,EAAQkT,QAAQ,EAAYlT,EAAQ5F,cAAc,CAAC,aAC/C,CAAC8Q,EAAMmD,QAAQ,CAACrO,EAAQkT,QAAQ,EACzB,4BACXlT,AAAoB,MAApBA,EAAQmT,QAAQ,EAAYnT,EAAQ5F,cAAc,CAAC,aAC/C,CAAC8Q,EAAMmD,QAAQ,CAACrO,EAAQmT,QAAQ,EACzB,4BACXnT,AAAwB,MAAxBA,EAAQoT,YAAY,EAAYpT,EAAQ5F,cAAc,CAAC,iBACnD,CAAC8Q,EAAMmD,QAAQ,CAACrO,EAAQoT,YAAY,EAC7B,gCACXpT,AAA0B,MAA1BA,EAAQqT,cAAc,EAAYrT,EAAQ5F,cAAc,CAAC,mBACrD,CAAC8Q,EAAMmD,QAAQ,CAACrO,EAAQqT,cAAc,EAC/B,kCACXrT,AAA0B,MAA1BA,EAAQsT,cAAc,EAAYtT,EAAQ5F,cAAc,CAAC,mBACrD,CAAC8Q,EAAMmD,QAAQ,CAACrO,EAAQsT,cAAc,EAC/B,kCACXtT,AAAiB,MAAjBA,EAAQuT,KAAK,EAAYvT,EAAQ5F,cAAc,CAAC,UAC5C,CAAC8Q,EAAMmD,QAAQ,CAACrO,EAAQuT,KAAK,EACtB,yBACXvT,AAA8B,MAA9BA,EAAQwT,kBAAkB,EAAYxT,EAAQ5F,cAAc,CAAC,uBACzD,CAAC8Q,EAAMmD,QAAQ,CAACrO,EAAQwT,kBAAkB,EACnC,sCACR,IACX,EAWAP,EAAa3E,QAAQ,CAAG,SAAkBtO,CAAO,CAAE5O,CAAO,EAClD,CAACA,GACDA,CAAAA,EAAU,CAAC,GACf,IAAIwM,EAAS,CAAC,EAwBd,OAvBIxM,EAAQmd,QAAQ,GAChB3Q,EAAOuV,QAAQ,CAAG,GAClBvV,EAAOwV,YAAY,CAAG,GACtBxV,EAAOyV,cAAc,CAAG,GACxBzV,EAAO0V,cAAc,CAAG,GACxB1V,EAAO2V,KAAK,CAAG,GACf3V,EAAO4V,kBAAkB,CAAG,GAC5B5V,EAAOsV,QAAQ,CAAG,IAEE,MAApBlT,EAAQmT,QAAQ,EAAYnT,EAAQ5F,cAAc,CAAC,aACnDwD,CAAAA,EAAOuV,QAAQ,CAAGnT,EAAQmT,QAAQ,AAAD,EACT,MAAxBnT,EAAQoT,YAAY,EAAYpT,EAAQ5F,cAAc,CAAC,iBACvDwD,CAAAA,EAAOwV,YAAY,CAAGpT,EAAQoT,YAAY,AAAD,EACf,MAA1BpT,EAAQqT,cAAc,EAAYrT,EAAQ5F,cAAc,CAAC,mBACzDwD,CAAAA,EAAOyV,cAAc,CAAGrT,EAAQqT,cAAc,AAAD,EACnB,MAA1BrT,EAAQsT,cAAc,EAAYtT,EAAQ5F,cAAc,CAAC,mBACzDwD,CAAAA,EAAO0V,cAAc,CAAGtT,EAAQsT,cAAc,AAAD,EAC5B,MAAjBtT,EAAQuT,KAAK,EAAYvT,EAAQ5F,cAAc,CAAC,UAChDwD,CAAAA,EAAO2V,KAAK,CAAGvT,EAAQuT,KAAK,AAAD,EACG,MAA9BvT,EAAQwT,kBAAkB,EAAYxT,EAAQ5F,cAAc,CAAC,uBAC7DwD,CAAAA,EAAO4V,kBAAkB,CAAGxT,EAAQwT,kBAAkB,AAAD,EACjC,MAApBxT,EAAQkT,QAAQ,EAAYlT,EAAQ5F,cAAc,CAAC,aACnDwD,CAAAA,EAAOsV,QAAQ,CAAGlT,EAAQkT,QAAQ,AAAD,EAC9BtV,CACX,EASAqV,EAAatZ,SAAS,CAACoV,MAAM,CAAG,WAC5B,OAAO,IAAI,CAAC9N,WAAW,CAACqN,QAAQ,CAAC,IAAI,CAAEzD,EAAUM,IAAI,CAAC6D,aAAa,CACvE,EAEOiE,CACX,IAEA7H,EAAMqI,cAAc,CAAG,AAAC,WAmBpB,SAASA,EAAelI,CAAU,EAE9B,GADA,IAAI,CAACmI,QAAQ,CAAG,CAAC,EACbnI,EACA,IAAK,IAAItR,EAAOnM,OAAOmM,IAAI,CAACsR,GAAa/D,EAAI,EAAGA,EAAIvN,EAAKnB,MAAM,CAAE,EAAE0O,EACpC,MAAvB+D,CAAU,CAACtR,CAAI,CAACuN,EAAE,CAAC,EACnB,KAAI,CAACvN,CAAI,CAACuN,EAAE,CAAC,CAAG+D,CAAU,CAACtR,CAAI,CAACuN,EAAE,CAAC,AAAD,CAClD,CAkNA,OA1MAiM,EAAe9Z,SAAS,CAAC+Z,QAAQ,CAAGxI,EAAMuE,WAAW,CAQrDgE,EAAe9Z,SAAS,CAACga,WAAW,CAAG,EAQvCF,EAAe9Z,SAAS,CAACia,uBAAuB,CAAG,EAUnDH,EAAe/gB,MAAM,CAAG,SAAgB6Y,CAAU,EAC9C,OAAO,IAAIkI,EAAelI,EAC9B,EAWAkI,EAAe9G,MAAM,CAAG,SAAgB3M,CAAO,CAAE4M,CAAM,EAGnD,GAFI,CAACA,GACDA,CAAAA,EAAS5B,EAAQtY,MAAM,EAAC,EACxBsN,AAAoB,MAApBA,EAAQ0T,QAAQ,EAAY5lB,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,YAChE,IAAK,IAAI/F,EAAOnM,OAAOmM,IAAI,CAAC+F,EAAQ0T,QAAQ,EAAGlM,EAAI,EAAGA,EAAIvN,EAAKnB,MAAM,CAAE,EAAE0O,EACrEoF,EAAOE,MAAM,CAAwB,IAAIC,IAAI,GAAGD,MAAM,CAAwB,IAAIjJ,MAAM,CAAC5J,CAAI,CAACuN,EAAE,EAChG4D,EAAMqI,cAAc,CAAC9G,MAAM,CAAC3M,EAAQ0T,QAAQ,CAACzZ,CAAI,CAACuN,EAAE,CAAC,CAAEoF,EAAOE,MAAM,CAAwB,IAAIC,IAAI,IAAIC,MAAM,GAAGA,MAAM,GAM/H,OAJ2B,MAAvBhN,EAAQ2T,WAAW,EAAY7lB,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,gBACnE4M,EAAOE,MAAM,CAAwB,IAAIK,MAAM,CAACnN,EAAQ2T,WAAW,EAChC,MAAnC3T,EAAQ4T,uBAAuB,EAAY9lB,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,4BAC/E4M,EAAOE,MAAM,CAAwB,IAAIK,MAAM,CAACnN,EAAQ4T,uBAAuB,EAC5EhH,CACX,EAWA6G,EAAehG,eAAe,CAAG,SAAyBzN,CAAO,CAAE4M,CAAM,EACrE,OAAO,IAAI,CAACD,MAAM,CAAC3M,EAAS4M,GAAQI,MAAM,EAC9C,EAaAyG,EAAe/F,MAAM,CAAG,SAAgBC,CAAM,CAAE7U,CAAM,EAC9C,CAAE6U,CAAAA,aAAkB7C,CAAM,GAC1B6C,CAAAA,EAAS7C,EAAQpY,MAAM,CAACib,EAAM,EAElC,IADA,IAAyGpU,EAArGqU,EAAM9U,AAAWiC,KAAAA,IAAXjC,EAAuB6U,EAAOE,GAAG,CAAGF,EAAOG,GAAG,CAAGhV,EAAQkH,EAAU,IAAIoL,EAAMqI,cAAc,CAC9F9F,EAAOG,GAAG,CAAGF,GAAK,CACrB,IAAIhO,EAAM+N,EAAOb,MAAM,GACvB,OAAQlN,IAAQ,GAChB,KAAK,EACD+N,EAAO+B,IAAI,GAAG5B,GAAG,GACb9N,EAAQ0T,QAAQ,GAAKxI,EAAMuE,WAAW,EACtCzP,CAAAA,EAAQ0T,QAAQ,CAAG,CAAC,GACxBna,EAAMoU,EAAO9J,MAAM,GACnB8J,EAAOG,GAAG,GACV9N,EAAQ0T,QAAQ,CAACna,EAAI,CAAG6R,EAAMqI,cAAc,CAAC/F,MAAM,CAACC,EAAQA,EAAOb,MAAM,IACzE,KACJ,MAAK,EACD9M,EAAQ2T,WAAW,CAAGhG,EAAOR,MAAM,GACnC,KACJ,MAAK,EACDnN,EAAQ4T,uBAAuB,CAAGjG,EAAOR,MAAM,GAC/C,KACJ,SACIQ,EAAOI,QAAQ,CAACnO,AAAM,EAANA,EAEpB,CACJ,CACA,OAAOI,CACX,EAYAyT,EAAezF,eAAe,CAAG,SAAyBL,CAAM,EAG5D,MAFI,CAAEA,CAAAA,aAAkB7C,CAAM,GAC1B6C,CAAAA,EAAS,IAAI7C,EAAQ6C,EAAM,EACxB,IAAI,CAACD,MAAM,CAACC,EAAQA,EAAOb,MAAM,GAC5C,EAUA2G,EAAexF,MAAM,CAAG,SAAgBjO,CAAO,EAC3C,GAAI,AAAmB,UAAnB,OAAOA,GAAwBA,AAAY,OAAZA,EAC/B,MAAO,kBACX,GAAIA,AAAoB,MAApBA,EAAQ0T,QAAQ,EAAY1T,EAAQ5F,cAAc,CAAC,YAAa,CAChE,GAAI,CAAC8Q,EAAMpM,QAAQ,CAACkB,EAAQ0T,QAAQ,EAChC,MAAO,4BAEX,IAAK,IADDna,EAAMzL,OAAOmM,IAAI,CAAC+F,EAAQ0T,QAAQ,EAC7BlM,EAAI,EAAGA,EAAIjO,EAAIT,MAAM,CAAE,EAAE0O,EAAG,CACjC,IAAIiD,EAAQW,EAAMqI,cAAc,CAACxF,MAAM,CAACjO,EAAQ0T,QAAQ,CAACna,CAAG,CAACiO,EAAE,CAAC,EAChE,GAAIiD,EACA,MAAO,YAAcA,CAC7B,CACJ,QACA,AAAIzK,AAAuB,MAAvBA,EAAQ2T,WAAW,EAAY3T,EAAQ5F,cAAc,CAAC,gBAClD,CAAC8Q,EAAMgD,SAAS,CAAClO,EAAQ2T,WAAW,GAAK,CAAE3T,CAAAA,EAAQ2T,WAAW,EAAIzI,EAAMgD,SAAS,CAAClO,EAAQ2T,WAAW,CAACxF,GAAG,GAAKjD,EAAMgD,SAAS,CAAClO,EAAQ2T,WAAW,CAACvF,IAAI,GAC/I,qCACXpO,AAAmC,MAAnCA,EAAQ4T,uBAAuB,EAAY5T,EAAQ5F,cAAc,CAAC,4BAC9D,CAAC8Q,EAAMgD,SAAS,CAAClO,EAAQ4T,uBAAuB,GAAK,CAAE5T,CAAAA,EAAQ4T,uBAAuB,EAAI1I,EAAMgD,SAAS,CAAClO,EAAQ4T,uBAAuB,CAACzF,GAAG,GAAKjD,EAAMgD,SAAS,CAAClO,EAAQ4T,uBAAuB,CAACxF,IAAI,GAC/L,iDACR,IACX,EAWAqF,EAAenF,QAAQ,CAAG,SAAkBtO,CAAO,CAAE5O,CAAO,EACpD,CAACA,GACDA,CAAAA,EAAU,CAAC,GACf,IAOIue,EAPA/R,EAAS,CAAC,EAQd,GAPIxM,CAAAA,EAAQwe,OAAO,EAAIxe,EAAQmd,QAAQ,AAAD,GAClC3Q,CAAAA,EAAO8V,QAAQ,CAAG,CAAC,GACnBtiB,EAAQmd,QAAQ,GAChB3Q,EAAO+V,WAAW,CAAG,EACrB/V,EAAOgW,uBAAuB,CAAG,GAGjC5T,EAAQ0T,QAAQ,EAAI,AAAC/D,CAAAA,EAAQ7hB,OAAOmM,IAAI,CAAC+F,EAAQ0T,QAAQ,GAAG5a,MAAM,CAAE,CACpE8E,EAAO8V,QAAQ,CAAG,CAAC,EACnB,IAAK,IAAI7D,EAAI,EAAGA,EAAIF,EAAM7W,MAAM,CAAE,EAAE+W,EAChCjS,EAAO8V,QAAQ,CAAC/D,CAAK,CAACE,EAAE,CAAC,CAAGzE,EAAMqI,cAAc,CAACnF,QAAQ,CAACtO,EAAQ0T,QAAQ,CAAC/D,CAAK,CAACE,EAAE,CAAC,CAAEze,EAC9F,CAWA,OAV2B,MAAvB4O,EAAQ2T,WAAW,EAAY3T,EAAQ5F,cAAc,CAAC,iBAClD,AAA+B,UAA/B,OAAO4F,EAAQ2T,WAAW,CAC1B/V,EAAO+V,WAAW,CAAGviB,EAAQod,KAAK,GAAK/H,OAASA,OAAOzG,EAAQ2T,WAAW,EAAI3T,EAAQ2T,WAAW,CAEjG/V,EAAO+V,WAAW,CAAGviB,EAAQod,KAAK,GAAK/H,OAASyE,EAAMuD,IAAI,CAAC9U,SAAS,CAAC5K,QAAQ,CAACyL,IAAI,CAACwF,EAAQ2T,WAAW,EAAIviB,EAAQod,KAAK,GAAKE,OAAS,IAAIxD,EAAMyD,QAAQ,CAAC3O,EAAQ2T,WAAW,CAACxF,GAAG,GAAK,EAAGnO,EAAQ2T,WAAW,CAACvF,IAAI,GAAK,GAAGQ,QAAQ,CAAC,IAAQ5O,EAAQ2T,WAAW,EAC5N,MAAnC3T,EAAQ4T,uBAAuB,EAAY5T,EAAQ5F,cAAc,CAAC,6BAC9D,AAA2C,UAA3C,OAAO4F,EAAQ4T,uBAAuB,CACtChW,EAAOgW,uBAAuB,CAAGxiB,EAAQod,KAAK,GAAK/H,OAASA,OAAOzG,EAAQ4T,uBAAuB,EAAI5T,EAAQ4T,uBAAuB,CAErIhW,EAAOgW,uBAAuB,CAAGxiB,EAAQod,KAAK,GAAK/H,OAASyE,EAAMuD,IAAI,CAAC9U,SAAS,CAAC5K,QAAQ,CAACyL,IAAI,CAACwF,EAAQ4T,uBAAuB,EAAIxiB,EAAQod,KAAK,GAAKE,OAAS,IAAIxD,EAAMyD,QAAQ,CAAC3O,EAAQ4T,uBAAuB,CAACzF,GAAG,GAAK,EAAGnO,EAAQ4T,uBAAuB,CAACxF,IAAI,GAAK,GAAGQ,QAAQ,CAAC,IAAQ5O,EAAQ4T,uBAAuB,EACxThW,CACX,EASA6V,EAAe9Z,SAAS,CAACoV,MAAM,CAAG,WAC9B,OAAO,IAAI,CAAC9N,WAAW,CAACqN,QAAQ,CAAC,IAAI,CAAEzD,EAAUM,IAAI,CAAC6D,aAAa,CACvE,EAEOyE,CACX,IAEArI,EAAMyI,iBAAiB,CAAG,AAAC,WA6BvB,SAASA,EAAkBtI,CAAU,EAKjC,GAJA,IAAI,CAACuI,YAAY,CAAG,EAAE,CACtB,IAAI,CAACC,iBAAiB,CAAG,EAAE,CAC3B,IAAI,CAACC,mBAAmB,CAAG,EAAE,CAC7B,IAAI,CAACC,oBAAoB,CAAG,EAAE,CAC1B1I,EACA,IAAK,IAAItR,EAAOnM,OAAOmM,IAAI,CAACsR,GAAa/D,EAAI,EAAGA,EAAIvN,EAAKnB,MAAM,CAAE,EAAE0O,EACpC,MAAvB+D,CAAU,CAACtR,CAAI,CAACuN,EAAE,CAAC,EACnB,KAAI,CAACvN,CAAI,CAACuN,EAAE,CAAC,CAAG+D,CAAU,CAACtR,CAAI,CAACuN,EAAE,CAAC,AAAD,CAClD,CA8gBA,OAtgBAqM,EAAkBla,SAAS,CAACma,YAAY,CAAG5I,EAAM6E,UAAU,CAQ3D8D,EAAkBla,SAAS,CAACua,YAAY,CAAG,EAQ3CL,EAAkBla,SAAS,CAACwa,SAAS,CAAG,EAQxCN,EAAkBla,SAAS,CAACya,kBAAkB,CAAG,EAQjDP,EAAkBla,SAAS,CAAC0a,oBAAoB,CAAG,EAQnDR,EAAkBla,SAAS,CAACoa,iBAAiB,CAAG7I,EAAM6E,UAAU,CAQhE8D,EAAkBla,SAAS,CAAC2a,cAAc,CAAG,KAQ7CT,EAAkBla,SAAS,CAACia,uBAAuB,CAAG,EAQtDC,EAAkBla,SAAS,CAACqa,mBAAmB,CAAG9I,EAAM6E,UAAU,CAQlE8D,EAAkBla,SAAS,CAACsa,oBAAoB,CAAG/I,EAAM6E,UAAU,CAQnE8D,EAAkBla,SAAS,CAAC4a,wBAAwB,CAAG,EAQvDV,EAAkBla,SAAS,CAAC6a,uBAAuB,CAAG,EAQtDX,EAAkBla,SAAS,CAAC8a,mCAAmC,CAAG,EAUlEZ,EAAkBnhB,MAAM,CAAG,SAAgB6Y,CAAU,EACjD,OAAO,IAAIsI,EAAkBtI,EACjC,EAWAsI,EAAkBlH,MAAM,CAAG,SAAgB3M,CAAO,CAAE4M,CAAM,EAwBtD,GAvBI,CAACA,GACDA,CAAAA,EAAS5B,EAAQtY,MAAM,EAAC,EACA,MAAxBsN,EAAQkU,YAAY,EAAYpmB,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,iBACpE4M,EAAOE,MAAM,CAAwB,IAAIK,MAAM,CAACnN,EAAQkU,YAAY,EAC/C,MAArBlU,EAAQmU,SAAS,EAAYrmB,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,cACjE4M,EAAOE,MAAM,CAAwB,IAAIK,MAAM,CAACnN,EAAQmU,SAAS,EACnC,MAA9BnU,EAAQoU,kBAAkB,EAAYtmB,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,uBAC1E4M,EAAOE,MAAM,CAAwB,IAAIK,MAAM,CAACnN,EAAQoU,kBAAkB,EAC1C,MAAhCpU,EAAQqU,oBAAoB,EAAYvmB,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,yBAC5E4M,EAAOE,MAAM,CAAwB,IAAIK,MAAM,CAACnN,EAAQqU,oBAAoB,EAClD,MAA1BrU,EAAQsU,cAAc,EAAYxmB,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,mBACtEoL,EAAMqI,cAAc,CAAC9G,MAAM,CAAC3M,EAAQsU,cAAc,CAAE1H,EAAOE,MAAM,CAAwB,IAAIC,IAAI,IAAIC,MAAM,GACxE,MAAnChN,EAAQ4T,uBAAuB,EAAY9lB,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,4BAC/E4M,EAAOE,MAAM,CAAwB,IAAIK,MAAM,CAACnN,EAAQ4T,uBAAuB,EAC3C,MAApC5T,EAAQuU,wBAAwB,EAAYzmB,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,6BAChF4M,EAAOE,MAAM,CAAyB,IAAIK,MAAM,CAACnN,EAAQuU,wBAAwB,EAC9C,MAAnCvU,EAAQwU,uBAAuB,EAAY1mB,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,4BAC/E4M,EAAOE,MAAM,CAAyB,IAAIK,MAAM,CAACnN,EAAQwU,uBAAuB,EAMhFE,AAAW,OAHXA,EADA1U,AAAwB,MAAxBA,EAAQ8T,YAAY,EAAY9T,EAAQ8T,YAAY,CAACa,OAAO,CAClD3U,EAAQ8T,YAAY,CAACa,OAAO,GAE5B3U,EAAQ8T,YAAY,GACXY,EAAQ5b,MAAM,CAAE,CACnC8T,EAAOE,MAAM,CAAyB,KAAKC,IAAI,GAC/C,IAAK,IAPL2H,EAWAE,EAWAC,EAWAC,EA1BStN,EAAI,EAAGA,EAAIkN,EAAQ5b,MAAM,CAAE,EAAE0O,EAClCoF,EAAOmI,MAAM,CAACL,CAAO,CAAClN,EAAE,EAC5BoF,EAAOI,MAAM,EACjB,CAMA,GAAI4H,AAAW,OAHXA,EADA5U,AAA6B,MAA7BA,EAAQ+T,iBAAiB,EAAY/T,EAAQ+T,iBAAiB,CAACY,OAAO,CAC5D3U,EAAQ+T,iBAAiB,CAACY,OAAO,GAEjC3U,EAAQ+T,iBAAiB,GAChBa,EAAQ9b,MAAM,CAAE,CACnC8T,EAAOE,MAAM,CAAyB,KAAKC,IAAI,GAC/C,IAAK,IAAIvF,EAAI,EAAGA,EAAIoN,EAAQ9b,MAAM,CAAE,EAAE0O,EAClCoF,EAAOmI,MAAM,CAACH,CAAO,CAACpN,EAAE,EAC5BoF,EAAOI,MAAM,EACjB,CAMA,GAAI6H,AAAW,OAHXA,EADA7U,AAA+B,MAA/BA,EAAQgU,mBAAmB,EAAYhU,EAAQgU,mBAAmB,CAACW,OAAO,CAChE3U,EAAQgU,mBAAmB,CAACW,OAAO,GAEnC3U,EAAQgU,mBAAmB,GAClBa,EAAQ/b,MAAM,CAAE,CACnC8T,EAAOE,MAAM,CAAyB,KAAKC,IAAI,GAC/C,IAAK,IAAIvF,EAAI,EAAGA,EAAIqN,EAAQ/b,MAAM,CAAE,EAAE0O,EAClCoF,EAAOmI,MAAM,CAACF,CAAO,CAACrN,EAAE,EAC5BoF,EAAOI,MAAM,EACjB,CAMA,GAAI8H,AAAW,OAHXA,EADA9U,AAAgC,MAAhCA,EAAQiU,oBAAoB,EAAYjU,EAAQiU,oBAAoB,CAACU,OAAO,CAClE3U,EAAQiU,oBAAoB,CAACU,OAAO,GAEpC3U,EAAQiU,oBAAoB,GACnBa,EAAQhc,MAAM,CAAE,CACnC8T,EAAOE,MAAM,CAAyB,KAAKC,IAAI,GAC/C,IAAK,IAAIvF,EAAI,EAAGA,EAAIsN,EAAQhc,MAAM,CAAE,EAAE0O,EAClCoF,EAAOmI,MAAM,CAACD,CAAO,CAACtN,EAAE,EAC5BoF,EAAOI,MAAM,EACjB,CAGA,OAFmD,MAA/ChN,EAAQyU,mCAAmC,EAAY3mB,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,wCAC3F4M,EAAOE,MAAM,CAAyB,KAAKK,MAAM,CAACnN,EAAQyU,mCAAmC,EAC1F7H,CACX,EAWAiH,EAAkBpG,eAAe,CAAG,SAAyBzN,CAAO,CAAE4M,CAAM,EACxE,OAAO,IAAI,CAACD,MAAM,CAAC3M,EAAS4M,GAAQI,MAAM,EAC9C,EAaA6G,EAAkBnG,MAAM,CAAG,SAAgBC,CAAM,CAAE7U,CAAM,EACjD,CAAE6U,CAAAA,aAAkB7C,CAAM,GAC1B6C,CAAAA,EAAS7C,EAAQpY,MAAM,CAACib,EAAM,EAElC,IADA,IAAIC,EAAM9U,AAAWiC,KAAAA,IAAXjC,EAAuB6U,EAAOE,GAAG,CAAGF,EAAOG,GAAG,CAAGhV,EAAQkH,EAAU,IAAIoL,EAAMyI,iBAAiB,CACjGlG,EAAOG,GAAG,CAAGF,GAAK,CACrB,IAAIhO,EAAM+N,EAAOb,MAAM,GACvB,OAAQlN,IAAQ,GAChB,KAAK,GAGD,GAFI,CAAEI,CAAAA,EAAQ8T,YAAY,EAAI9T,EAAQ8T,YAAY,CAAChb,MAAM,AAAD,GACpDkH,CAAAA,EAAQ8T,YAAY,CAAG,EAAE,AAAD,EACxB,AAAClU,CAAAA,AAAM,EAANA,CAAM,GAAO,EAAG,CAEjB,IADA,IAAIoV,EAAOrH,EAAOb,MAAM,GAAKa,EAAOG,GAAG,CAChCH,EAAOG,GAAG,CAAGkH,GAChBhV,EAAQ8T,YAAY,CAACjX,IAAI,CAAC8Q,EAAOoH,MAAM,GAC/C,MACI/U,EAAQ8T,YAAY,CAACjX,IAAI,CAAC8Q,EAAOoH,MAAM,IAC3C,KACJ,MAAK,EACD/U,EAAQkU,YAAY,CAAGvG,EAAOR,MAAM,GACpC,KACJ,MAAK,EACDnN,EAAQmU,SAAS,CAAGxG,EAAOR,MAAM,GACjC,KACJ,MAAK,EACDnN,EAAQoU,kBAAkB,CAAGzG,EAAOR,MAAM,GAC1C,KACJ,MAAK,EACDnN,EAAQqU,oBAAoB,CAAG1G,EAAOR,MAAM,GAC5C,KACJ,MAAK,GAGD,GAFI,CAAEnN,CAAAA,EAAQ+T,iBAAiB,EAAI/T,EAAQ+T,iBAAiB,CAACjb,MAAM,AAAD,GAC9DkH,CAAAA,EAAQ+T,iBAAiB,CAAG,EAAE,AAAD,EAC7B,AAACnU,CAAAA,AAAM,EAANA,CAAM,GAAO,EAAG,CAEjB,IADA,IAAIoV,EAAOrH,EAAOb,MAAM,GAAKa,EAAOG,GAAG,CAChCH,EAAOG,GAAG,CAAGkH,GAChBhV,EAAQ+T,iBAAiB,CAAClX,IAAI,CAAC8Q,EAAOoH,MAAM,GACpD,MACI/U,EAAQ+T,iBAAiB,CAAClX,IAAI,CAAC8Q,EAAOoH,MAAM,IAChD,KACJ,MAAK,EACD/U,EAAQsU,cAAc,CAAGlJ,EAAMqI,cAAc,CAAC/F,MAAM,CAACC,EAAQA,EAAOb,MAAM,IAC1E,KACJ,MAAK,EACD9M,EAAQ4T,uBAAuB,CAAGjG,EAAOR,MAAM,GAC/C,KACJ,MAAK,GAGD,GAFI,CAAEnN,CAAAA,EAAQgU,mBAAmB,EAAIhU,EAAQgU,mBAAmB,CAAClb,MAAM,AAAD,GAClEkH,CAAAA,EAAQgU,mBAAmB,CAAG,EAAE,AAAD,EAC/B,AAACpU,CAAAA,AAAM,EAANA,CAAM,GAAO,EAAG,CAEjB,IADA,IAAIoV,EAAOrH,EAAOb,MAAM,GAAKa,EAAOG,GAAG,CAChCH,EAAOG,GAAG,CAAGkH,GAChBhV,EAAQgU,mBAAmB,CAACnX,IAAI,CAAC8Q,EAAOoH,MAAM,GACtD,MACI/U,EAAQgU,mBAAmB,CAACnX,IAAI,CAAC8Q,EAAOoH,MAAM,IAClD,KACJ,MAAK,GAGD,GAFI,CAAE/U,CAAAA,EAAQiU,oBAAoB,EAAIjU,EAAQiU,oBAAoB,CAACnb,MAAM,AAAD,GACpEkH,CAAAA,EAAQiU,oBAAoB,CAAG,EAAE,AAAD,EAChC,AAACrU,CAAAA,AAAM,EAANA,CAAM,GAAO,EAAG,CAEjB,IADA,IAAIoV,EAAOrH,EAAOb,MAAM,GAAKa,EAAOG,GAAG,CAChCH,EAAOG,GAAG,CAAGkH,GAChBhV,EAAQiU,oBAAoB,CAACpX,IAAI,CAAC8Q,EAAOoH,MAAM,GACvD,MACI/U,EAAQiU,oBAAoB,CAACpX,IAAI,CAAC8Q,EAAOoH,MAAM,IACnD,KACJ,MAAK,GACD/U,EAAQuU,wBAAwB,CAAG5G,EAAOR,MAAM,GAChD,KACJ,MAAK,GACDnN,EAAQwU,uBAAuB,CAAG7G,EAAOR,MAAM,GAC/C,KACJ,MAAK,GACDnN,EAAQyU,mCAAmC,CAAG9G,EAAOR,MAAM,GAC3D,KACJ,SACIQ,EAAOI,QAAQ,CAACnO,AAAM,EAANA,EAEpB,CACJ,CACA,OAAOI,CACX,EAYA6T,EAAkB7F,eAAe,CAAG,SAAyBL,CAAM,EAG/D,MAFI,CAAEA,CAAAA,aAAkB7C,CAAM,GAC1B6C,CAAAA,EAAS,IAAI7C,EAAQ6C,EAAM,EACxB,IAAI,CAACD,MAAM,CAACC,EAAQA,EAAOb,MAAM,GAC5C,EAUA+G,EAAkB5F,MAAM,CAAG,SAAgBjO,CAAO,EAC9C,GAAI,AAAmB,UAAnB,OAAOA,GAAwBA,AAAY,OAAZA,EAC/B,MAAO,kBACX,GAAIA,AAAwB,MAAxBA,EAAQ8T,YAAY,EAAY9T,EAAQ5F,cAAc,CAAC,gBAAiB,CAMxE,GAAI,CAACpB,MAAMqF,OAAO,CAHdqW,EADA1U,AAAwB,MAAxBA,EAAQ8T,YAAY,EAAY9T,EAAQ8T,YAAY,CAACa,OAAO,CAClD3U,EAAQ8T,YAAY,CAACa,OAAO,GAE5B3U,EAAQ8T,YAAY,EAE9B,MAAO,+BACX,IAAK,IAPDY,EAwBAE,EAoBAC,EAYAC,EAjDKtN,EAAI,EAAGA,EAAIkN,EAAQ5b,MAAM,CAAE,EAAE0O,EAClC,GAAI,CAAC0D,EAAMgD,SAAS,CAACwG,CAAO,CAAClN,EAAE,GAAK,CAAEkN,CAAAA,CAAO,CAAClN,EAAE,EAAI0D,EAAMgD,SAAS,CAACwG,CAAO,CAAClN,EAAE,CAAC2G,GAAG,GAAKjD,EAAMgD,SAAS,CAACwG,CAAO,CAAClN,EAAE,CAAC4G,IAAI,GAClH,MAAO,uCACnB,CACA,GAAIpO,AAAwB,MAAxBA,EAAQkU,YAAY,EAAYlU,EAAQ5F,cAAc,CAAC,iBACnD,CAAC8Q,EAAMgD,SAAS,CAAClO,EAAQkU,YAAY,GAAK,CAAElU,CAAAA,EAAQkU,YAAY,EAAIhJ,EAAMgD,SAAS,CAAClO,EAAQkU,YAAY,CAAC/F,GAAG,GAAKjD,EAAMgD,SAAS,CAAClO,EAAQkU,YAAY,CAAC9F,IAAI,GAC1J,MAAO,sCACf,GAAIpO,AAAqB,MAArBA,EAAQmU,SAAS,EAAYnU,EAAQ5F,cAAc,CAAC,cAChD,CAAC8Q,EAAMgD,SAAS,CAAClO,EAAQmU,SAAS,GAAK,CAAEnU,CAAAA,EAAQmU,SAAS,EAAIjJ,EAAMgD,SAAS,CAAClO,EAAQmU,SAAS,CAAChG,GAAG,GAAKjD,EAAMgD,SAAS,CAAClO,EAAQmU,SAAS,CAAC/F,IAAI,GAC9I,MAAO,mCACf,GAAIpO,AAA8B,MAA9BA,EAAQoU,kBAAkB,EAAYpU,EAAQ5F,cAAc,CAAC,uBACzD,CAAC8Q,EAAMgD,SAAS,CAAClO,EAAQoU,kBAAkB,GAAK,CAAEpU,CAAAA,EAAQoU,kBAAkB,EAAIlJ,EAAMgD,SAAS,CAAClO,EAAQoU,kBAAkB,CAACjG,GAAG,GAAKjD,EAAMgD,SAAS,CAAClO,EAAQoU,kBAAkB,CAAChG,IAAI,GAClL,MAAO,4CACf,GAAIpO,AAAgC,MAAhCA,EAAQqU,oBAAoB,EAAYrU,EAAQ5F,cAAc,CAAC,yBAC3D,CAAC8Q,EAAMgD,SAAS,CAAClO,EAAQqU,oBAAoB,GAAK,CAAErU,CAAAA,EAAQqU,oBAAoB,EAAInJ,EAAMgD,SAAS,CAAClO,EAAQqU,oBAAoB,CAAClG,GAAG,GAAKjD,EAAMgD,SAAS,CAAClO,EAAQqU,oBAAoB,CAACjG,IAAI,GAC1L,MAAO,8CACf,GAAIpO,AAA6B,MAA7BA,EAAQ+T,iBAAiB,EAAY/T,EAAQ5F,cAAc,CAAC,qBAAsB,CAMlF,GAAI,CAACpB,MAAMqF,OAAO,CAHduW,EADA5U,AAA6B,MAA7BA,EAAQ+T,iBAAiB,EAAY/T,EAAQ+T,iBAAiB,CAACY,OAAO,CAC5D3U,EAAQ+T,iBAAiB,CAACY,OAAO,GAEjC3U,EAAQ+T,iBAAiB,EAEnC,MAAO,oCACX,IAAK,IAAIvM,EAAI,EAAGA,EAAIoN,EAAQ9b,MAAM,CAAE,EAAE0O,EAClC,GAAI,CAAC0D,EAAMgD,SAAS,CAAC0G,CAAO,CAACpN,EAAE,GAAK,CAAEoN,CAAAA,CAAO,CAACpN,EAAE,EAAI0D,EAAMgD,SAAS,CAAC0G,CAAO,CAACpN,EAAE,CAAC2G,GAAG,GAAKjD,EAAMgD,SAAS,CAAC0G,CAAO,CAACpN,EAAE,CAAC4G,IAAI,GAClH,MAAO,4CACnB,CACA,GAAIpO,AAA0B,MAA1BA,EAAQsU,cAAc,EAAYtU,EAAQ5F,cAAc,CAAC,kBAAmB,CAC5E,IAAIqQ,EAAQW,EAAMqI,cAAc,CAACxF,MAAM,CAACjO,EAAQsU,cAAc,EAC9D,GAAI7J,EACA,MAAO,kBAAoBA,CACnC,CACA,GAAIzK,AAAmC,MAAnCA,EAAQ4T,uBAAuB,EAAY5T,EAAQ5F,cAAc,CAAC,4BAC9D,CAAC8Q,EAAMgD,SAAS,CAAClO,EAAQ4T,uBAAuB,GAAK,CAAE5T,CAAAA,EAAQ4T,uBAAuB,EAAI1I,EAAMgD,SAAS,CAAClO,EAAQ4T,uBAAuB,CAACzF,GAAG,GAAKjD,EAAMgD,SAAS,CAAClO,EAAQ4T,uBAAuB,CAACxF,IAAI,GACtM,MAAO,iDACf,GAAIpO,AAA+B,MAA/BA,EAAQgU,mBAAmB,EAAYhU,EAAQ5F,cAAc,CAAC,uBAAwB,CAMtF,GAAI,CAACpB,MAAMqF,OAAO,CAHdwW,EADA7U,AAA+B,MAA/BA,EAAQgU,mBAAmB,EAAYhU,EAAQgU,mBAAmB,CAACW,OAAO,CAChE3U,EAAQgU,mBAAmB,CAACW,OAAO,GAEnC3U,EAAQgU,mBAAmB,EAErC,MAAO,sCACX,IAAK,IAAIxM,EAAI,EAAGA,EAAIqN,EAAQ/b,MAAM,CAAE,EAAE0O,EAClC,GAAI,CAAC0D,EAAMgD,SAAS,CAAC2G,CAAO,CAACrN,EAAE,GAAK,CAAEqN,CAAAA,CAAO,CAACrN,EAAE,EAAI0D,EAAMgD,SAAS,CAAC2G,CAAO,CAACrN,EAAE,CAAC2G,GAAG,GAAKjD,EAAMgD,SAAS,CAAC2G,CAAO,CAACrN,EAAE,CAAC4G,IAAI,GAClH,MAAO,8CACnB,CACA,GAAIpO,AAAgC,MAAhCA,EAAQiU,oBAAoB,EAAYjU,EAAQ5F,cAAc,CAAC,wBAAyB,CAMxF,GAAI,CAACpB,MAAMqF,OAAO,CAHdyW,EADA9U,AAAgC,MAAhCA,EAAQiU,oBAAoB,EAAYjU,EAAQiU,oBAAoB,CAACU,OAAO,CAClE3U,EAAQiU,oBAAoB,CAACU,OAAO,GAEpC3U,EAAQiU,oBAAoB,EAEtC,MAAO,uCACX,IAAK,IAAIzM,EAAI,EAAGA,EAAIsN,EAAQhc,MAAM,CAAE,EAAE0O,EAClC,GAAI,CAAC0D,EAAMgD,SAAS,CAAC4G,CAAO,CAACtN,EAAE,GAAK,CAAEsN,CAAAA,CAAO,CAACtN,EAAE,EAAI0D,EAAMgD,SAAS,CAAC4G,CAAO,CAACtN,EAAE,CAAC2G,GAAG,GAAKjD,EAAMgD,SAAS,CAAC4G,CAAO,CAACtN,EAAE,CAAC4G,IAAI,GAClH,MAAO,+CACnB,QACA,AAAIpO,AAAoC,MAApCA,EAAQuU,wBAAwB,EAAYvU,EAAQ5F,cAAc,CAAC,6BAC/D,CAAC8Q,EAAMgD,SAAS,CAAClO,EAAQuU,wBAAwB,GAAK,CAAEvU,CAAAA,EAAQuU,wBAAwB,EAAIrJ,EAAMgD,SAAS,CAAClO,EAAQuU,wBAAwB,CAACpG,GAAG,GAAKjD,EAAMgD,SAAS,CAAClO,EAAQuU,wBAAwB,CAACnG,IAAI,GACnM,kDACXpO,AAAmC,MAAnCA,EAAQwU,uBAAuB,EAAYxU,EAAQ5F,cAAc,CAAC,4BAC9D,CAAC8Q,EAAMgD,SAAS,CAAClO,EAAQwU,uBAAuB,GAAK,CAAExU,CAAAA,EAAQwU,uBAAuB,EAAItJ,EAAMgD,SAAS,CAAClO,EAAQwU,uBAAuB,CAACrG,GAAG,GAAKjD,EAAMgD,SAAS,CAAClO,EAAQwU,uBAAuB,CAACpG,IAAI,GAC/L,iDACXpO,AAA+C,MAA/CA,EAAQyU,mCAAmC,EAAYzU,EAAQ5F,cAAc,CAAC,wCAC1E,CAAC8Q,EAAMgD,SAAS,CAAClO,EAAQyU,mCAAmC,GAAK,CAAEzU,CAAAA,EAAQyU,mCAAmC,EAAIvJ,EAAMgD,SAAS,CAAClO,EAAQyU,mCAAmC,CAACtG,GAAG,GAAKjD,EAAMgD,SAAS,CAAClO,EAAQyU,mCAAmC,CAACrG,IAAI,GAC/O,6DACR,IACX,EAWAyF,EAAkBvF,QAAQ,CAAG,SAAkBtO,CAAO,CAAE5O,CAAO,EACvD,CAACA,GACDA,CAAAA,EAAU,CAAC,GACf,IAAIwM,EAAS,CAAC,EAuDd,GAtDIxM,CAAAA,EAAQ8e,MAAM,EAAI9e,EAAQmd,QAAQ,AAAD,IACjC3Q,EAAOkW,YAAY,CAAG,EAAE,CACxBlW,EAAOmW,iBAAiB,CAAG,EAAE,CAC7BnW,EAAOoW,mBAAmB,CAAG,EAAE,CAC/BpW,EAAOqW,oBAAoB,CAAG,EAAE,EAEhC7iB,EAAQmd,QAAQ,GAChB3Q,EAAOsW,YAAY,CAAG,EACtBtW,EAAOuW,SAAS,CAAG,EACnBvW,EAAOwW,kBAAkB,CAAG,EAC5BxW,EAAOyW,oBAAoB,CAAG,EAC9BzW,EAAO0W,cAAc,CAAG,KACxB1W,EAAOgW,uBAAuB,CAAG,EACjChW,EAAO2W,wBAAwB,CAAG,EAClC3W,EAAO4W,uBAAuB,CAAG,EACjC5W,EAAO6W,mCAAmC,CAAG,GAErB,MAAxBzU,EAAQkU,YAAY,EAAYlU,EAAQ5F,cAAc,CAAC,kBACnD,AAAgC,UAAhC,OAAO4F,EAAQkU,YAAY,CAC3BtW,EAAOsW,YAAY,CAAG9iB,EAAQod,KAAK,GAAK/H,OAASA,OAAOzG,EAAQkU,YAAY,EAAIlU,EAAQkU,YAAY,CAEpGtW,EAAOsW,YAAY,CAAG9iB,EAAQod,KAAK,GAAK/H,OAASyE,EAAMuD,IAAI,CAAC9U,SAAS,CAAC5K,QAAQ,CAACyL,IAAI,CAACwF,EAAQkU,YAAY,EAAI9iB,EAAQod,KAAK,GAAKE,OAAS,IAAIxD,EAAMyD,QAAQ,CAAC3O,EAAQkU,YAAY,CAAC/F,GAAG,GAAK,EAAGnO,EAAQkU,YAAY,CAAC9F,IAAI,GAAK,GAAGQ,QAAQ,CAAC,IAAQ5O,EAAQkU,YAAY,EAC/O,MAArBlU,EAAQmU,SAAS,EAAYnU,EAAQ5F,cAAc,CAAC,eAChD,AAA6B,UAA7B,OAAO4F,EAAQmU,SAAS,CACxBvW,EAAOuW,SAAS,CAAG/iB,EAAQod,KAAK,GAAK/H,OAASA,OAAOzG,EAAQmU,SAAS,EAAInU,EAAQmU,SAAS,CAE3FvW,EAAOuW,SAAS,CAAG/iB,EAAQod,KAAK,GAAK/H,OAASyE,EAAMuD,IAAI,CAAC9U,SAAS,CAAC5K,QAAQ,CAACyL,IAAI,CAACwF,EAAQmU,SAAS,EAAI/iB,EAAQod,KAAK,GAAKE,OAAS,IAAIxD,EAAMyD,QAAQ,CAAC3O,EAAQmU,SAAS,CAAChG,GAAG,GAAK,EAAGnO,EAAQmU,SAAS,CAAC/F,IAAI,GAAK,GAAGQ,QAAQ,CAAC,IAAQ5O,EAAQmU,SAAS,EACvN,MAA9BnU,EAAQoU,kBAAkB,EAAYpU,EAAQ5F,cAAc,CAAC,wBACzD,AAAsC,UAAtC,OAAO4F,EAAQoU,kBAAkB,CACjCxW,EAAOwW,kBAAkB,CAAGhjB,EAAQod,KAAK,GAAK/H,OAASA,OAAOzG,EAAQoU,kBAAkB,EAAIpU,EAAQoU,kBAAkB,CAEtHxW,EAAOwW,kBAAkB,CAAGhjB,EAAQod,KAAK,GAAK/H,OAASyE,EAAMuD,IAAI,CAAC9U,SAAS,CAAC5K,QAAQ,CAACyL,IAAI,CAACwF,EAAQoU,kBAAkB,EAAIhjB,EAAQod,KAAK,GAAKE,OAAS,IAAIxD,EAAMyD,QAAQ,CAAC3O,EAAQoU,kBAAkB,CAACjG,GAAG,GAAK,EAAGnO,EAAQoU,kBAAkB,CAAChG,IAAI,GAAK,GAAGQ,QAAQ,CAAC,IAAQ5O,EAAQoU,kBAAkB,EAClQ,MAAhCpU,EAAQqU,oBAAoB,EAAYrU,EAAQ5F,cAAc,CAAC,0BAC3D,AAAwC,UAAxC,OAAO4F,EAAQqU,oBAAoB,CACnCzW,EAAOyW,oBAAoB,CAAGjjB,EAAQod,KAAK,GAAK/H,OAASA,OAAOzG,EAAQqU,oBAAoB,EAAIrU,EAAQqU,oBAAoB,CAE5HzW,EAAOyW,oBAAoB,CAAGjjB,EAAQod,KAAK,GAAK/H,OAASyE,EAAMuD,IAAI,CAAC9U,SAAS,CAAC5K,QAAQ,CAACyL,IAAI,CAACwF,EAAQqU,oBAAoB,EAAIjjB,EAAQod,KAAK,GAAKE,OAAS,IAAIxD,EAAMyD,QAAQ,CAAC3O,EAAQqU,oBAAoB,CAAClG,GAAG,GAAK,EAAGnO,EAAQqU,oBAAoB,CAACjG,IAAI,GAAK,GAAGQ,QAAQ,CAAC,IAAQ5O,EAAQqU,oBAAoB,EAClR,MAA1BrU,EAAQsU,cAAc,EAAYtU,EAAQ5F,cAAc,CAAC,mBACzDwD,CAAAA,EAAO0W,cAAc,CAAGlJ,EAAMqI,cAAc,CAACnF,QAAQ,CAACtO,EAAQsU,cAAc,CAAEljB,EAAO,EAClD,MAAnC4O,EAAQ4T,uBAAuB,EAAY5T,EAAQ5F,cAAc,CAAC,6BAC9D,AAA2C,UAA3C,OAAO4F,EAAQ4T,uBAAuB,CACtChW,EAAOgW,uBAAuB,CAAGxiB,EAAQod,KAAK,GAAK/H,OAASA,OAAOzG,EAAQ4T,uBAAuB,EAAI5T,EAAQ4T,uBAAuB,CAErIhW,EAAOgW,uBAAuB,CAAGxiB,EAAQod,KAAK,GAAK/H,OAASyE,EAAMuD,IAAI,CAAC9U,SAAS,CAAC5K,QAAQ,CAACyL,IAAI,CAACwF,EAAQ4T,uBAAuB,EAAIxiB,EAAQod,KAAK,GAAKE,OAAS,IAAIxD,EAAMyD,QAAQ,CAAC3O,EAAQ4T,uBAAuB,CAACzF,GAAG,GAAK,EAAGnO,EAAQ4T,uBAAuB,CAACxF,IAAI,GAAK,GAAGQ,QAAQ,CAAC,IAAQ5O,EAAQ4T,uBAAuB,EACvR,MAApC5T,EAAQuU,wBAAwB,EAAYvU,EAAQ5F,cAAc,CAAC,8BAC/D,AAA4C,UAA5C,OAAO4F,EAAQuU,wBAAwB,CACvC3W,EAAO2W,wBAAwB,CAAGnjB,EAAQod,KAAK,GAAK/H,OAASA,OAAOzG,EAAQuU,wBAAwB,EAAIvU,EAAQuU,wBAAwB,CAExI3W,EAAO2W,wBAAwB,CAAGnjB,EAAQod,KAAK,GAAK/H,OAASyE,EAAMuD,IAAI,CAAC9U,SAAS,CAAC5K,QAAQ,CAACyL,IAAI,CAACwF,EAAQuU,wBAAwB,EAAInjB,EAAQod,KAAK,GAAKE,OAAS,IAAIxD,EAAMyD,QAAQ,CAAC3O,EAAQuU,wBAAwB,CAACpG,GAAG,GAAK,EAAGnO,EAAQuU,wBAAwB,CAACnG,IAAI,GAAK,GAAGQ,QAAQ,CAAC,IAAQ5O,EAAQuU,wBAAwB,EAC7R,MAAnCvU,EAAQwU,uBAAuB,EAAYxU,EAAQ5F,cAAc,CAAC,6BAC9D,AAA2C,UAA3C,OAAO4F,EAAQwU,uBAAuB,CACtC5W,EAAO4W,uBAAuB,CAAGpjB,EAAQod,KAAK,GAAK/H,OAASA,OAAOzG,EAAQwU,uBAAuB,EAAIxU,EAAQwU,uBAAuB,CAErI5W,EAAO4W,uBAAuB,CAAGpjB,EAAQod,KAAK,GAAK/H,OAASyE,EAAMuD,IAAI,CAAC9U,SAAS,CAAC5K,QAAQ,CAACyL,IAAI,CAACwF,EAAQwU,uBAAuB,EAAIpjB,EAAQod,KAAK,GAAKE,OAAS,IAAIxD,EAAMyD,QAAQ,CAAC3O,EAAQwU,uBAAuB,CAACrG,GAAG,GAAK,EAAGnO,EAAQwU,uBAAuB,CAACpG,IAAI,GAAK,GAAGQ,QAAQ,CAAC,IAAQ5O,EAAQwU,uBAAuB,EAC3TxU,EAAQ8T,YAAY,EAAI9T,EAAQ8T,YAAY,CAAChb,MAAM,CAAE,CACrD8E,EAAOkW,YAAY,CAAG,EAAE,CACxB,IAAK,IAAIjE,EAAI,EAAGA,EAAI7P,EAAQ8T,YAAY,CAAChb,MAAM,CAAE,EAAE+W,EAC3C,AAAmC,UAAnC,OAAO7P,EAAQ8T,YAAY,CAACjE,EAAE,CAC9BjS,EAAOkW,YAAY,CAACjE,EAAE,CAAGze,EAAQod,KAAK,GAAK/H,OAASA,OAAOzG,EAAQ8T,YAAY,CAACjE,EAAE,EAAI7P,EAAQ8T,YAAY,CAACjE,EAAE,CAE7GjS,EAAOkW,YAAY,CAACjE,EAAE,CAAGze,EAAQod,KAAK,GAAK/H,OAASyE,EAAMuD,IAAI,CAAC9U,SAAS,CAAC5K,QAAQ,CAACyL,IAAI,CAACwF,EAAQ8T,YAAY,CAACjE,EAAE,EAAIze,EAAQod,KAAK,GAAKE,OAAS,IAAIxD,EAAMyD,QAAQ,CAAC3O,EAAQ8T,YAAY,CAACjE,EAAE,CAAC1B,GAAG,GAAK,EAAGnO,EAAQ8T,YAAY,CAACjE,EAAE,CAACzB,IAAI,GAAK,GAAGQ,QAAQ,GAAK5O,EAAQ8T,YAAY,CAACjE,EAAE,AACvR,CACA,GAAI7P,EAAQ+T,iBAAiB,EAAI/T,EAAQ+T,iBAAiB,CAACjb,MAAM,CAAE,CAC/D8E,EAAOmW,iBAAiB,CAAG,EAAE,CAC7B,IAAK,IAAIlE,EAAI,EAAGA,EAAI7P,EAAQ+T,iBAAiB,CAACjb,MAAM,CAAE,EAAE+W,EAChD,AAAwC,UAAxC,OAAO7P,EAAQ+T,iBAAiB,CAAClE,EAAE,CACnCjS,EAAOmW,iBAAiB,CAAClE,EAAE,CAAGze,EAAQod,KAAK,GAAK/H,OAASA,OAAOzG,EAAQ+T,iBAAiB,CAAClE,EAAE,EAAI7P,EAAQ+T,iBAAiB,CAAClE,EAAE,CAE5HjS,EAAOmW,iBAAiB,CAAClE,EAAE,CAAGze,EAAQod,KAAK,GAAK/H,OAASyE,EAAMuD,IAAI,CAAC9U,SAAS,CAAC5K,QAAQ,CAACyL,IAAI,CAACwF,EAAQ+T,iBAAiB,CAAClE,EAAE,EAAIze,EAAQod,KAAK,GAAKE,OAAS,IAAIxD,EAAMyD,QAAQ,CAAC3O,EAAQ+T,iBAAiB,CAAClE,EAAE,CAAC1B,GAAG,GAAK,EAAGnO,EAAQ+T,iBAAiB,CAAClE,EAAE,CAACzB,IAAI,GAAK,GAAGQ,QAAQ,GAAK5O,EAAQ+T,iBAAiB,CAAClE,EAAE,AAChT,CACA,GAAI7P,EAAQgU,mBAAmB,EAAIhU,EAAQgU,mBAAmB,CAAClb,MAAM,CAAE,CACnE8E,EAAOoW,mBAAmB,CAAG,EAAE,CAC/B,IAAK,IAAInE,EAAI,EAAGA,EAAI7P,EAAQgU,mBAAmB,CAAClb,MAAM,CAAE,EAAE+W,EAClD,AAA0C,UAA1C,OAAO7P,EAAQgU,mBAAmB,CAACnE,EAAE,CACrCjS,EAAOoW,mBAAmB,CAACnE,EAAE,CAAGze,EAAQod,KAAK,GAAK/H,OAASA,OAAOzG,EAAQgU,mBAAmB,CAACnE,EAAE,EAAI7P,EAAQgU,mBAAmB,CAACnE,EAAE,CAElIjS,EAAOoW,mBAAmB,CAACnE,EAAE,CAAGze,EAAQod,KAAK,GAAK/H,OAASyE,EAAMuD,IAAI,CAAC9U,SAAS,CAAC5K,QAAQ,CAACyL,IAAI,CAACwF,EAAQgU,mBAAmB,CAACnE,EAAE,EAAIze,EAAQod,KAAK,GAAKE,OAAS,IAAIxD,EAAMyD,QAAQ,CAAC3O,EAAQgU,mBAAmB,CAACnE,EAAE,CAAC1B,GAAG,GAAK,EAAGnO,EAAQgU,mBAAmB,CAACnE,EAAE,CAACzB,IAAI,GAAK,GAAGQ,QAAQ,GAAK5O,EAAQgU,mBAAmB,CAACnE,EAAE,AAC1T,CACA,GAAI7P,EAAQiU,oBAAoB,EAAIjU,EAAQiU,oBAAoB,CAACnb,MAAM,CAAE,CACrE8E,EAAOqW,oBAAoB,CAAG,EAAE,CAChC,IAAK,IAAIpE,EAAI,EAAGA,EAAI7P,EAAQiU,oBAAoB,CAACnb,MAAM,CAAE,EAAE+W,EACnD,AAA2C,UAA3C,OAAO7P,EAAQiU,oBAAoB,CAACpE,EAAE,CACtCjS,EAAOqW,oBAAoB,CAACpE,EAAE,CAAGze,EAAQod,KAAK,GAAK/H,OAASA,OAAOzG,EAAQiU,oBAAoB,CAACpE,EAAE,EAAI7P,EAAQiU,oBAAoB,CAACpE,EAAE,CAErIjS,EAAOqW,oBAAoB,CAACpE,EAAE,CAAGze,EAAQod,KAAK,GAAK/H,OAASyE,EAAMuD,IAAI,CAAC9U,SAAS,CAAC5K,QAAQ,CAACyL,IAAI,CAACwF,EAAQiU,oBAAoB,CAACpE,EAAE,EAAIze,EAAQod,KAAK,GAAKE,OAAS,IAAIxD,EAAMyD,QAAQ,CAAC3O,EAAQiU,oBAAoB,CAACpE,EAAE,CAAC1B,GAAG,GAAK,EAAGnO,EAAQiU,oBAAoB,CAACpE,EAAE,CAACzB,IAAI,GAAK,GAAGQ,QAAQ,GAAK5O,EAAQiU,oBAAoB,CAACpE,EAAE,AAC/T,CAMA,OALmD,MAA/C7P,EAAQyU,mCAAmC,EAAYzU,EAAQ5F,cAAc,CAAC,yCAC1E,AAAuD,UAAvD,OAAO4F,EAAQyU,mCAAmC,CAClD7W,EAAO6W,mCAAmC,CAAGrjB,EAAQod,KAAK,GAAK/H,OAASA,OAAOzG,EAAQyU,mCAAmC,EAAIzU,EAAQyU,mCAAmC,CAEzK7W,EAAO6W,mCAAmC,CAAGrjB,EAAQod,KAAK,GAAK/H,OAASyE,EAAMuD,IAAI,CAAC9U,SAAS,CAAC5K,QAAQ,CAACyL,IAAI,CAACwF,EAAQyU,mCAAmC,EAAIrjB,EAAQod,KAAK,GAAKE,OAAS,IAAIxD,EAAMyD,QAAQ,CAAC3O,EAAQyU,mCAAmC,CAACtG,GAAG,GAAK,EAAGnO,EAAQyU,mCAAmC,CAACrG,IAAI,GAAK,GAAGQ,QAAQ,CAAC,IAAQ5O,EAAQyU,mCAAmC,EACpX7W,CACX,EASAiW,EAAkBla,SAAS,CAACoV,MAAM,CAAG,WACjC,OAAO,IAAI,CAAC9N,WAAW,CAACqN,QAAQ,CAAC,IAAI,CAAEzD,EAAUM,IAAI,CAAC6D,aAAa,CACvE,EAEO6E,CACX,IAEAzI,EAAM6J,YAAY,CAAG,AAAC,WAkBlB,SAASA,EAAa1J,CAAU,EAC5B,GAAIA,EACA,IAAK,IAAItR,EAAOnM,OAAOmM,IAAI,CAACsR,GAAa/D,EAAI,EAAGA,EAAIvN,EAAKnB,MAAM,CAAE,EAAE0O,EACpC,MAAvB+D,CAAU,CAACtR,CAAI,CAACuN,EAAE,CAAC,EACnB,KAAI,CAACvN,CAAI,CAACuN,EAAE,CAAC,CAAG+D,CAAU,CAACtR,CAAI,CAACuN,EAAE,CAAC,AAAD,CAClD,CAqKA,OA7JAyN,EAAatb,SAAS,CAACqS,UAAU,CAAG,GAQpCiJ,EAAatb,SAAS,CAACsS,aAAa,CAAG,GAUvCgJ,EAAaviB,MAAM,CAAG,SAAgB6Y,CAAU,EAC5C,OAAO,IAAI0J,EAAa1J,EAC5B,EAWA0J,EAAatI,MAAM,CAAG,SAAgB3M,CAAO,CAAE4M,CAAM,EAOjD,MANI,CAACA,GACDA,CAAAA,EAAS5B,EAAQtY,MAAM,EAAC,EACF,MAAtBsN,EAAQgM,UAAU,EAAYle,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,eAClE4M,EAAOE,MAAM,CAAwB,IAAIjJ,MAAM,CAAC7D,EAAQgM,UAAU,EACzC,MAAzBhM,EAAQiM,aAAa,EAAYne,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,kBACrE4M,EAAOE,MAAM,CAAwB,IAAIjJ,MAAM,CAAC7D,EAAQiM,aAAa,EAClEW,CACX,EAWAqI,EAAaxH,eAAe,CAAG,SAAyBzN,CAAO,CAAE4M,CAAM,EACnE,OAAO,IAAI,CAACD,MAAM,CAAC3M,EAAS4M,GAAQI,MAAM,EAC9C,EAaAiI,EAAavH,MAAM,CAAG,SAAgBC,CAAM,CAAE7U,CAAM,EAC5C,CAAE6U,CAAAA,aAAkB7C,CAAM,GAC1B6C,CAAAA,EAAS7C,EAAQpY,MAAM,CAACib,EAAM,EAElC,IADA,IAAIC,EAAM9U,AAAWiC,KAAAA,IAAXjC,EAAuB6U,EAAOE,GAAG,CAAGF,EAAOG,GAAG,CAAGhV,EAAQkH,EAAU,IAAIoL,EAAM6J,YAAY,CAC5FtH,EAAOG,GAAG,CAAGF,GAAK,CACrB,IAAIhO,EAAM+N,EAAOb,MAAM,GACvB,OAAQlN,IAAQ,GAChB,KAAK,EACDI,EAAQgM,UAAU,CAAG2B,EAAO9J,MAAM,GAClC,KACJ,MAAK,EACD7D,EAAQiM,aAAa,CAAG0B,EAAO9J,MAAM,GACrC,KACJ,SACI8J,EAAOI,QAAQ,CAACnO,AAAM,EAANA,EAEpB,CACJ,CACA,OAAOI,CACX,EAYAiV,EAAajH,eAAe,CAAG,SAAyBL,CAAM,EAG1D,MAFI,CAAEA,CAAAA,aAAkB7C,CAAM,GAC1B6C,CAAAA,EAAS,IAAI7C,EAAQ6C,EAAM,EACxB,IAAI,CAACD,MAAM,CAACC,EAAQA,EAAOb,MAAM,GAC5C,EAUAmI,EAAahH,MAAM,CAAG,SAAgBjO,CAAO,QACzC,AAAI,AAAmB,UAAnB,OAAOA,GAAwBA,AAAY,OAAZA,EACxB,kBACPA,AAAsB,MAAtBA,EAAQgM,UAAU,EAAYhM,EAAQ5F,cAAc,CAAC,eACjD,CAAC8Q,EAAMmD,QAAQ,CAACrO,EAAQgM,UAAU,EAC3B,8BACXhM,AAAyB,MAAzBA,EAAQiM,aAAa,EAAYjM,EAAQ5F,cAAc,CAAC,kBACpD,CAAC8Q,EAAMmD,QAAQ,CAACrO,EAAQiM,aAAa,EAC9B,iCACR,IACX,EAWAgJ,EAAa3G,QAAQ,CAAG,SAAkBtO,CAAO,CAAE5O,CAAO,EAClD,CAACA,GACDA,CAAAA,EAAU,CAAC,GACf,IAAIwM,EAAS,CAAC,EASd,OARIxM,EAAQmd,QAAQ,GAChB3Q,EAAOoO,UAAU,CAAG,GACpBpO,EAAOqO,aAAa,CAAG,IAED,MAAtBjM,EAAQgM,UAAU,EAAYhM,EAAQ5F,cAAc,CAAC,eACrDwD,CAAAA,EAAOoO,UAAU,CAAGhM,EAAQgM,UAAU,AAAD,EACZ,MAAzBhM,EAAQiM,aAAa,EAAYjM,EAAQ5F,cAAc,CAAC,kBACxDwD,CAAAA,EAAOqO,aAAa,CAAGjM,EAAQiM,aAAa,AAAD,EACxCrO,CACX,EASAqX,EAAatb,SAAS,CAACoV,MAAM,CAAG,WAC5B,OAAO,IAAI,CAAC9N,WAAW,CAACqN,QAAQ,CAAC,IAAI,CAAEzD,EAAUM,IAAI,CAAC6D,aAAa,CACvE,EAEOiG,CACX,IAEA7J,EAAM8J,+BAA+B,CAAG,AAAC,WAkBrC,SAASA,EAAgC3J,CAAU,EAC/C,GAAIA,EACA,IAAK,IAAItR,EAAOnM,OAAOmM,IAAI,CAACsR,GAAa/D,EAAI,EAAGA,EAAIvN,EAAKnB,MAAM,CAAE,EAAE0O,EACpC,MAAvB+D,CAAU,CAACtR,CAAI,CAACuN,EAAE,CAAC,EACnB,KAAI,CAACvN,CAAI,CAACuN,EAAE,CAAC,CAAG+D,CAAU,CAACtR,CAAI,CAACuN,EAAE,CAAC,AAAD,CAClD,CAyKA,OAjKA0N,EAAgCvb,SAAS,CAACwb,iBAAiB,CAAG,KAQ9DD,EAAgCvb,SAAS,CAACyb,OAAO,CAAG,KAUpDF,EAAgCxiB,MAAM,CAAG,SAAgB6Y,CAAU,EAC/D,OAAO,IAAI2J,EAAgC3J,EAC/C,EAWA2J,EAAgCvI,MAAM,CAAG,SAAgB3M,CAAO,CAAE4M,CAAM,EAOpE,MANI,CAACA,GACDA,CAAAA,EAAS5B,EAAQtY,MAAM,EAAC,EACK,MAA7BsN,EAAQmV,iBAAiB,EAAYrnB,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,sBACzEoL,EAAMyI,iBAAiB,CAAClH,MAAM,CAAC3M,EAAQmV,iBAAiB,CAAEvI,EAAOE,MAAM,CAAwB,IAAIC,IAAI,IAAIC,MAAM,GAC9F,MAAnBhN,EAAQoV,OAAO,EAAYtnB,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,YAC/DoL,EAAM6J,YAAY,CAACtI,MAAM,CAAC3M,EAAQoV,OAAO,CAAExI,EAAOE,MAAM,CAAwB,IAAIC,IAAI,IAAIC,MAAM,GAC/FJ,CACX,EAWAsI,EAAgCzH,eAAe,CAAG,SAAyBzN,CAAO,CAAE4M,CAAM,EACtF,OAAO,IAAI,CAACD,MAAM,CAAC3M,EAAS4M,GAAQI,MAAM,EAC9C,EAaAkI,EAAgCxH,MAAM,CAAG,SAAgBC,CAAM,CAAE7U,CAAM,EAC/D,CAAE6U,CAAAA,aAAkB7C,CAAM,GAC1B6C,CAAAA,EAAS7C,EAAQpY,MAAM,CAACib,EAAM,EAElC,IADA,IAAIC,EAAM9U,AAAWiC,KAAAA,IAAXjC,EAAuB6U,EAAOE,GAAG,CAAGF,EAAOG,GAAG,CAAGhV,EAAQkH,EAAU,IAAIoL,EAAM8J,+BAA+B,CAC/GvH,EAAOG,GAAG,CAAGF,GAAK,CACrB,IAAIhO,EAAM+N,EAAOb,MAAM,GACvB,OAAQlN,IAAQ,GAChB,KAAK,EACDI,EAAQmV,iBAAiB,CAAG/J,EAAMyI,iBAAiB,CAACnG,MAAM,CAACC,EAAQA,EAAOb,MAAM,IAChF,KACJ,MAAK,EACD9M,EAAQoV,OAAO,CAAGhK,EAAM6J,YAAY,CAACvH,MAAM,CAACC,EAAQA,EAAOb,MAAM,IACjE,KACJ,SACIa,EAAOI,QAAQ,CAACnO,AAAM,EAANA,EAEpB,CACJ,CACA,OAAOI,CACX,EAYAkV,EAAgClH,eAAe,CAAG,SAAyBL,CAAM,EAG7E,MAFI,CAAEA,CAAAA,aAAkB7C,CAAM,GAC1B6C,CAAAA,EAAS,IAAI7C,EAAQ6C,EAAM,EACxB,IAAI,CAACD,MAAM,CAACC,EAAQA,EAAOb,MAAM,GAC5C,EAUAoI,EAAgCjH,MAAM,CAAG,SAAgBjO,CAAO,EAC5D,GAAI,AAAmB,UAAnB,OAAOA,GAAwBA,AAAY,OAAZA,EAC/B,MAAO,kBACX,GAAIA,AAA6B,MAA7BA,EAAQmV,iBAAiB,EAAYnV,EAAQ5F,cAAc,CAAC,qBAAsB,CAClF,IAAIqQ,EAAQW,EAAMyI,iBAAiB,CAAC5F,MAAM,CAACjO,EAAQmV,iBAAiB,EACpE,GAAI1K,EACA,MAAO,qBAAuBA,CACtC,CACA,GAAIzK,AAAmB,MAAnBA,EAAQoV,OAAO,EAAYpV,EAAQ5F,cAAc,CAAC,WAAY,CAC9D,IAAIqQ,EAAQW,EAAM6J,YAAY,CAAChH,MAAM,CAACjO,EAAQoV,OAAO,EACrD,GAAI3K,EACA,MAAO,WAAaA,CAC5B,CACA,OAAO,IACX,EAWAyK,EAAgC5G,QAAQ,CAAG,SAAkBtO,CAAO,CAAE5O,CAAO,EACrE,CAACA,GACDA,CAAAA,EAAU,CAAC,GACf,IAAIwM,EAAS,CAAC,EASd,OARIxM,EAAQmd,QAAQ,GAChB3Q,EAAOuX,iBAAiB,CAAG,KAC3BvX,EAAOwX,OAAO,CAAG,MAEY,MAA7BpV,EAAQmV,iBAAiB,EAAYnV,EAAQ5F,cAAc,CAAC,sBAC5DwD,CAAAA,EAAOuX,iBAAiB,CAAG/J,EAAMyI,iBAAiB,CAACvF,QAAQ,CAACtO,EAAQmV,iBAAiB,CAAE/jB,EAAO,EAC3E,MAAnB4O,EAAQoV,OAAO,EAAYpV,EAAQ5F,cAAc,CAAC,YAClDwD,CAAAA,EAAOwX,OAAO,CAAGhK,EAAM6J,YAAY,CAAC3G,QAAQ,CAACtO,EAAQoV,OAAO,CAAEhkB,EAAO,EAClEwM,CACX,EASAsX,EAAgCvb,SAAS,CAACoV,MAAM,CAAG,WAC/C,OAAO,IAAI,CAAC9N,WAAW,CAACqN,QAAQ,CAAC,IAAI,CAAEzD,EAAUM,IAAI,CAAC6D,aAAa,CACvE,EAEOkG,CACX,IAEA9J,EAAMiK,uBAAuB,CAAG,AAAC,WAkB7B,SAASA,EAAwB9J,CAAU,EAEvC,GADA,IAAI,CAAC+J,WAAW,CAAG,CAAC,EAChB/J,EACA,IAAK,IAAItR,EAAOnM,OAAOmM,IAAI,CAACsR,GAAa/D,EAAI,EAAGA,EAAIvN,EAAKnB,MAAM,CAAE,EAAE0O,EACpC,MAAvB+D,CAAU,CAACtR,CAAI,CAACuN,EAAE,CAAC,EACnB,KAAI,CAACvN,CAAI,CAACuN,EAAE,CAAC,CAAG+D,CAAU,CAACtR,CAAI,CAACuN,EAAE,CAAC,AAAD,CAClD,CA0LA,OAlLA6N,EAAwB1b,SAAS,CAACyb,OAAO,CAAG,KAQ5CC,EAAwB1b,SAAS,CAAC2b,WAAW,CAAGpK,EAAMuE,WAAW,CAUjE4F,EAAwB3iB,MAAM,CAAG,SAAgB6Y,CAAU,EACvD,OAAO,IAAI8J,EAAwB9J,EACvC,EAWA8J,EAAwB1I,MAAM,CAAG,SAAgB3M,CAAO,CAAE4M,CAAM,EAK5D,GAJI,CAACA,GACDA,CAAAA,EAAS5B,EAAQtY,MAAM,EAAC,EACL,MAAnBsN,EAAQoV,OAAO,EAAYtnB,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,YAC/DoL,EAAM6J,YAAY,CAACtI,MAAM,CAAC3M,EAAQoV,OAAO,CAAExI,EAAOE,MAAM,CAAwB,IAAIC,IAAI,IAAIC,MAAM,GAClGhN,AAAuB,MAAvBA,EAAQsV,WAAW,EAAYxnB,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,eACnE,IAAK,IAAI/F,EAAOnM,OAAOmM,IAAI,CAAC+F,EAAQsV,WAAW,EAAG9N,EAAI,EAAGA,EAAIvN,EAAKnB,MAAM,CAAE,EAAE0O,EACxEoF,EAAOE,MAAM,CAAwB,IAAIC,IAAI,GAAGD,MAAM,CAAwB,IAAIjJ,MAAM,CAAC5J,CAAI,CAACuN,EAAE,EAChG4D,EAAMmK,QAAQ,CAAC5I,MAAM,CAAC3M,EAAQsV,WAAW,CAACrb,CAAI,CAACuN,EAAE,CAAC,CAAEoF,EAAOE,MAAM,CAAwB,IAAIC,IAAI,IAAIC,MAAM,GAAGA,MAAM,GAE5H,OAAOJ,CACX,EAWAyI,EAAwB5H,eAAe,CAAG,SAAyBzN,CAAO,CAAE4M,CAAM,EAC9E,OAAO,IAAI,CAACD,MAAM,CAAC3M,EAAS4M,GAAQI,MAAM,EAC9C,EAaAqI,EAAwB3H,MAAM,CAAG,SAAgBC,CAAM,CAAE7U,CAAM,EACvD,CAAE6U,CAAAA,aAAkB7C,CAAM,GAC1B6C,CAAAA,EAAS7C,EAAQpY,MAAM,CAACib,EAAM,EAElC,IADA,IAAkHpU,EAA9GqU,EAAM9U,AAAWiC,KAAAA,IAAXjC,EAAuB6U,EAAOE,GAAG,CAAGF,EAAOG,GAAG,CAAGhV,EAAQkH,EAAU,IAAIoL,EAAMiK,uBAAuB,CACvG1H,EAAOG,GAAG,CAAGF,GAAK,CACrB,IAAIhO,EAAM+N,EAAOb,MAAM,GACvB,OAAQlN,IAAQ,GAChB,KAAK,EACDI,EAAQoV,OAAO,CAAGhK,EAAM6J,YAAY,CAACvH,MAAM,CAACC,EAAQA,EAAOb,MAAM,IACjE,KACJ,MAAK,EACDa,EAAO+B,IAAI,GAAG5B,GAAG,GACb9N,EAAQsV,WAAW,GAAKpK,EAAMuE,WAAW,EACzCzP,CAAAA,EAAQsV,WAAW,CAAG,CAAC,GAC3B/b,EAAMoU,EAAO9J,MAAM,GACnB8J,EAAOG,GAAG,GACV9N,EAAQsV,WAAW,CAAC/b,EAAI,CAAG6R,EAAMmK,QAAQ,CAAC7H,MAAM,CAACC,EAAQA,EAAOb,MAAM,IACtE,KACJ,SACIa,EAAOI,QAAQ,CAACnO,AAAM,EAANA,EAEpB,CACJ,CACA,OAAOI,CACX,EAYAqV,EAAwBrH,eAAe,CAAG,SAAyBL,CAAM,EAGrE,MAFI,CAAEA,CAAAA,aAAkB7C,CAAM,GAC1B6C,CAAAA,EAAS,IAAI7C,EAAQ6C,EAAM,EACxB,IAAI,CAACD,MAAM,CAACC,EAAQA,EAAOb,MAAM,GAC5C,EAUAuI,EAAwBpH,MAAM,CAAG,SAAgBjO,CAAO,EACpD,GAAI,AAAmB,UAAnB,OAAOA,GAAwBA,AAAY,OAAZA,EAC/B,MAAO,kBACX,GAAIA,AAAmB,MAAnBA,EAAQoV,OAAO,EAAYpV,EAAQ5F,cAAc,CAAC,WAAY,CAC9D,IAAIqQ,EAAQW,EAAM6J,YAAY,CAAChH,MAAM,CAACjO,EAAQoV,OAAO,EACrD,GAAI3K,EACA,MAAO,WAAaA,CAC5B,CACA,GAAIzK,AAAuB,MAAvBA,EAAQsV,WAAW,EAAYtV,EAAQ5F,cAAc,CAAC,eAAgB,CACtE,GAAI,CAAC8Q,EAAMpM,QAAQ,CAACkB,EAAQsV,WAAW,EACnC,MAAO,+BAEX,IAAK,IADD/b,EAAMzL,OAAOmM,IAAI,CAAC+F,EAAQsV,WAAW,EAChC9N,EAAI,EAAGA,EAAIjO,EAAIT,MAAM,CAAE,EAAE0O,EAAG,CACjC,IAAIiD,EAAQW,EAAMmK,QAAQ,CAACtH,MAAM,CAACjO,EAAQsV,WAAW,CAAC/b,CAAG,CAACiO,EAAE,CAAC,EAC7D,GAAIiD,EACA,MAAO,eAAiBA,CAChC,CACJ,CACA,OAAO,IACX,EAWA4K,EAAwB/G,QAAQ,CAAG,SAAkBtO,CAAO,CAAE5O,CAAO,EAC7D,CAACA,GACDA,CAAAA,EAAU,CAAC,GACf,IAOIue,EAPA/R,EAAS,CAAC,EAQd,GAPIxM,CAAAA,EAAQwe,OAAO,EAAIxe,EAAQmd,QAAQ,AAAD,GAClC3Q,CAAAA,EAAO0X,WAAW,CAAG,CAAC,GACtBlkB,EAAQmd,QAAQ,EAChB3Q,CAAAA,EAAOwX,OAAO,CAAG,IAAG,EACD,MAAnBpV,EAAQoV,OAAO,EAAYpV,EAAQ5F,cAAc,CAAC,YAClDwD,CAAAA,EAAOwX,OAAO,CAAGhK,EAAM6J,YAAY,CAAC3G,QAAQ,CAACtO,EAAQoV,OAAO,CAAEhkB,EAAO,EAErE4O,EAAQsV,WAAW,EAAI,AAAC3F,CAAAA,EAAQ7hB,OAAOmM,IAAI,CAAC+F,EAAQsV,WAAW,GAAGxc,MAAM,CAAE,CAC1E8E,EAAO0X,WAAW,CAAG,CAAC,EACtB,IAAK,IAAIzF,EAAI,EAAGA,EAAIF,EAAM7W,MAAM,CAAE,EAAE+W,EAChCjS,EAAO0X,WAAW,CAAC3F,CAAK,CAACE,EAAE,CAAC,CAAGzE,EAAMmK,QAAQ,CAACjH,QAAQ,CAACtO,EAAQsV,WAAW,CAAC3F,CAAK,CAACE,EAAE,CAAC,CAAEze,EAC9F,CACA,OAAOwM,CACX,EASAyX,EAAwB1b,SAAS,CAACoV,MAAM,CAAG,WACvC,OAAO,IAAI,CAAC9N,WAAW,CAACqN,QAAQ,CAAC,IAAI,CAAEzD,EAAUM,IAAI,CAAC6D,aAAa,CACvE,EAEOqG,CACX,IAEAjK,EAAMoK,SAAS,CAAG,AAAC,WAsBf,SAASA,EAAUjK,CAAU,EAEzB,GADA,IAAI,CAACuI,YAAY,CAAG,EAAE,CAClBvI,EACA,IAAK,IAAItR,EAAOnM,OAAOmM,IAAI,CAACsR,GAAa/D,EAAI,EAAGA,EAAIvN,EAAKnB,MAAM,CAAE,EAAE0O,EACpC,MAAvB+D,CAAU,CAACtR,CAAI,CAACuN,EAAE,CAAC,EACnB,KAAI,CAACvN,CAAI,CAACuN,EAAE,CAAC,CAAG+D,CAAU,CAACtR,CAAI,CAACuN,EAAE,CAAC,AAAD,CAClD,CA6RA,OArRAgO,EAAU7b,SAAS,CAAC8b,UAAU,CAAG,GAQjCD,EAAU7b,SAAS,CAACga,WAAW,CAAG,EAQlC6B,EAAU7b,SAAS,CAAC+b,sBAAsB,CAAG,EAQ7CF,EAAU7b,SAAS,CAACgc,uBAAuB,CAAG,EAQ9CH,EAAU7b,SAAS,CAACia,uBAAuB,CAAG,EAQ9C4B,EAAU7b,SAAS,CAACma,YAAY,CAAG5I,EAAM6E,UAAU,CAUnDyF,EAAU9iB,MAAM,CAAG,SAAgB6Y,CAAU,EACzC,OAAO,IAAIiK,EAAUjK,EACzB,EAWAiK,EAAU7I,MAAM,CAAG,SAAgB3M,CAAO,CAAE4M,CAAM,EAgB9C,GAfI,CAACA,GACDA,CAAAA,EAAS5B,EAAQtY,MAAM,EAAC,EACF,MAAtBsN,EAAQyV,UAAU,EAAY3nB,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,eAClE4M,EAAOE,MAAM,CAAwB,IAAIjJ,MAAM,CAAC7D,EAAQyV,UAAU,EAC3C,MAAvBzV,EAAQ2T,WAAW,EAAY7lB,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,gBACnE4M,EAAOE,MAAM,CAAwB,IAAIK,MAAM,CAACnN,EAAQ2T,WAAW,EACjC,MAAlC3T,EAAQ0V,sBAAsB,EAAY5nB,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,2BAC9E4M,EAAOE,MAAM,CAAwB,IAAIK,MAAM,CAACnN,EAAQ0V,sBAAsB,EAC3C,MAAnC1V,EAAQ4T,uBAAuB,EAAY9lB,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,4BAC/E4M,EAAOE,MAAM,CAAwB,IAAIK,MAAM,CAACnN,EAAQ4T,uBAAuB,EAM/EgC,AAAU,OAHVA,EADA5V,AAAwB,MAAxBA,EAAQ8T,YAAY,EAAY9T,EAAQ8T,YAAY,CAACa,OAAO,CACnD3U,EAAQ8T,YAAY,CAACa,OAAO,GAE5B3U,EAAQ8T,YAAY,GACX8B,EAAO9c,MAAM,CAAE,CACjC8T,EAAOE,MAAM,CAAwB,IAAIC,IAAI,GAC7C,IAAK,IAPL6I,EAOSpO,EAAI,EAAGA,EAAIoO,EAAO9c,MAAM,CAAE,EAAE0O,EACjCoF,EAAOmI,MAAM,CAACa,CAAM,CAACpO,EAAE,EAC3BoF,EAAOI,MAAM,EACjB,CAGA,OAFuC,MAAnChN,EAAQ2V,uBAAuB,EAAY7nB,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,4BAC/E4M,EAAOE,MAAM,CAAyB,IAAIK,MAAM,CAACnN,EAAQ2V,uBAAuB,EAC7E/I,CACX,EAWA4I,EAAU/H,eAAe,CAAG,SAAyBzN,CAAO,CAAE4M,CAAM,EAChE,OAAO,IAAI,CAACD,MAAM,CAAC3M,EAAS4M,GAAQI,MAAM,EAC9C,EAaAwI,EAAU9H,MAAM,CAAG,SAAgBC,CAAM,CAAE7U,CAAM,EACzC,CAAE6U,CAAAA,aAAkB7C,CAAM,GAC1B6C,CAAAA,EAAS7C,EAAQpY,MAAM,CAACib,EAAM,EAElC,IADA,IAAIC,EAAM9U,AAAWiC,KAAAA,IAAXjC,EAAuB6U,EAAOE,GAAG,CAAGF,EAAOG,GAAG,CAAGhV,EAAQkH,EAAU,IAAIoL,EAAMoK,SAAS,CACzF7H,EAAOG,GAAG,CAAGF,GAAK,CACrB,IAAIhO,EAAM+N,EAAOb,MAAM,GACvB,OAAQlN,IAAQ,GAChB,KAAK,EACDI,EAAQyV,UAAU,CAAG9H,EAAO9J,MAAM,GAClC,KACJ,MAAK,EACD7D,EAAQ2T,WAAW,CAAGhG,EAAOR,MAAM,GACnC,KACJ,MAAK,EACDnN,EAAQ0V,sBAAsB,CAAG/H,EAAOR,MAAM,GAC9C,KACJ,MAAK,GACDnN,EAAQ2V,uBAAuB,CAAGhI,EAAOR,MAAM,GAC/C,KACJ,MAAK,EACDnN,EAAQ4T,uBAAuB,CAAGjG,EAAOR,MAAM,GAC/C,KACJ,MAAK,EAGD,GAFI,CAAEnN,CAAAA,EAAQ8T,YAAY,EAAI9T,EAAQ8T,YAAY,CAAChb,MAAM,AAAD,GACpDkH,CAAAA,EAAQ8T,YAAY,CAAG,EAAE,AAAD,EACxB,AAAClU,CAAAA,AAAM,EAANA,CAAM,GAAO,EAAG,CAEjB,IADA,IAAIoV,EAAOrH,EAAOb,MAAM,GAAKa,EAAOG,GAAG,CAChCH,EAAOG,GAAG,CAAGkH,GAChBhV,EAAQ8T,YAAY,CAACjX,IAAI,CAAC8Q,EAAOoH,MAAM,GAC/C,MACI/U,EAAQ8T,YAAY,CAACjX,IAAI,CAAC8Q,EAAOoH,MAAM,IAC3C,KACJ,SACIpH,EAAOI,QAAQ,CAACnO,AAAM,EAANA,EAEpB,CACJ,CACA,OAAOI,CACX,EAYAwV,EAAUxH,eAAe,CAAG,SAAyBL,CAAM,EAGvD,MAFI,CAAEA,CAAAA,aAAkB7C,CAAM,GAC1B6C,CAAAA,EAAS,IAAI7C,EAAQ6C,EAAM,EACxB,IAAI,CAACD,MAAM,CAACC,EAAQA,EAAOb,MAAM,GAC5C,EAUA0I,EAAUvH,MAAM,CAAG,SAAgBjO,CAAO,EACtC,GAAI,AAAmB,UAAnB,OAAOA,GAAwBA,AAAY,OAAZA,EAC/B,MAAO,kBACX,GAAIA,AAAsB,MAAtBA,EAAQyV,UAAU,EAAYzV,EAAQ5F,cAAc,CAAC,eACjD,CAAC8Q,EAAMmD,QAAQ,CAACrO,EAAQyV,UAAU,EAClC,MAAO,8BACf,GAAIzV,AAAuB,MAAvBA,EAAQ2T,WAAW,EAAY3T,EAAQ5F,cAAc,CAAC,gBAClD,CAAC8Q,EAAMgD,SAAS,CAAClO,EAAQ2T,WAAW,GAAK,CAAE3T,CAAAA,EAAQ2T,WAAW,EAAIzI,EAAMgD,SAAS,CAAClO,EAAQ2T,WAAW,CAACxF,GAAG,GAAKjD,EAAMgD,SAAS,CAAClO,EAAQ2T,WAAW,CAACvF,IAAI,GACtJ,MAAO,qCACf,GAAIpO,AAAkC,MAAlCA,EAAQ0V,sBAAsB,EAAY1V,EAAQ5F,cAAc,CAAC,2BAC7D,CAAC8Q,EAAMgD,SAAS,CAAClO,EAAQ0V,sBAAsB,GAAK,CAAE1V,CAAAA,EAAQ0V,sBAAsB,EAAIxK,EAAMgD,SAAS,CAAClO,EAAQ0V,sBAAsB,CAACvH,GAAG,GAAKjD,EAAMgD,SAAS,CAAClO,EAAQ0V,sBAAsB,CAACtH,IAAI,GAClM,MAAO,gDACf,GAAIpO,AAAmC,MAAnCA,EAAQ2V,uBAAuB,EAAY3V,EAAQ5F,cAAc,CAAC,4BAC9D,CAAC8Q,EAAMgD,SAAS,CAAClO,EAAQ2V,uBAAuB,GAAK,CAAE3V,CAAAA,EAAQ2V,uBAAuB,EAAIzK,EAAMgD,SAAS,CAAClO,EAAQ2V,uBAAuB,CAACxH,GAAG,GAAKjD,EAAMgD,SAAS,CAAClO,EAAQ2V,uBAAuB,CAACvH,IAAI,GACtM,MAAO,iDACf,GAAIpO,AAAmC,MAAnCA,EAAQ4T,uBAAuB,EAAY5T,EAAQ5F,cAAc,CAAC,4BAC9D,CAAC8Q,EAAMgD,SAAS,CAAClO,EAAQ4T,uBAAuB,GAAK,CAAE5T,CAAAA,EAAQ4T,uBAAuB,EAAI1I,EAAMgD,SAAS,CAAClO,EAAQ4T,uBAAuB,CAACzF,GAAG,GAAKjD,EAAMgD,SAAS,CAAClO,EAAQ4T,uBAAuB,CAACxF,IAAI,GACtM,MAAO,iDACf,GAAIpO,AAAwB,MAAxBA,EAAQ8T,YAAY,EAAY9T,EAAQ5F,cAAc,CAAC,gBAAiB,CACxE,IAAIwb,EAKJ,GAAI,CAAC5c,MAAMqF,OAAO,CAHduX,EADA5V,AAAwB,MAAxBA,EAAQ8T,YAAY,EAAY9T,EAAQ8T,YAAY,CAACa,OAAO,CACnD3U,EAAQ8T,YAAY,CAACa,OAAO,GAE5B3U,EAAQ8T,YAAY,EAE7B,MAAO,+BACX,IAAK,IAAItM,EAAI,EAAGA,EAAIoO,EAAO9c,MAAM,CAAE,EAAE0O,EACjC,GAAI,CAAC0D,EAAMgD,SAAS,CAAC0H,CAAM,CAACpO,EAAE,GAAK,CAAEoO,CAAAA,CAAM,CAACpO,EAAE,EAAI0D,EAAMgD,SAAS,CAAC0H,CAAM,CAACpO,EAAE,CAAC2G,GAAG,GAAKjD,EAAMgD,SAAS,CAAC0H,CAAM,CAACpO,EAAE,CAAC4G,IAAI,GAC9G,MAAO,uCACnB,CACA,OAAO,IACX,EAWAoH,EAAUlH,QAAQ,CAAG,SAAkBtO,CAAO,CAAE5O,CAAO,EAC/C,CAACA,GACDA,CAAAA,EAAU,CAAC,GACf,IAAIwM,EAAS,CAAC,EA2Bd,GA1BIxM,CAAAA,EAAQ8e,MAAM,EAAI9e,EAAQmd,QAAQ,AAAD,GACjC3Q,CAAAA,EAAOkW,YAAY,CAAG,EAAE,AAAD,EACvB1iB,EAAQmd,QAAQ,GAChB3Q,EAAO6X,UAAU,CAAG,GACpB7X,EAAO+V,WAAW,CAAG,EACrB/V,EAAO8X,sBAAsB,CAAG,EAChC9X,EAAOgW,uBAAuB,CAAG,EACjChW,EAAO+X,uBAAuB,CAAG,GAEX,MAAtB3V,EAAQyV,UAAU,EAAYzV,EAAQ5F,cAAc,CAAC,eACrDwD,CAAAA,EAAO6X,UAAU,CAAGzV,EAAQyV,UAAU,AAAD,EACd,MAAvBzV,EAAQ2T,WAAW,EAAY3T,EAAQ5F,cAAc,CAAC,iBAClD,AAA+B,UAA/B,OAAO4F,EAAQ2T,WAAW,CAC1B/V,EAAO+V,WAAW,CAAGviB,EAAQod,KAAK,GAAK/H,OAASA,OAAOzG,EAAQ2T,WAAW,EAAI3T,EAAQ2T,WAAW,CAEjG/V,EAAO+V,WAAW,CAAGviB,EAAQod,KAAK,GAAK/H,OAASyE,EAAMuD,IAAI,CAAC9U,SAAS,CAAC5K,QAAQ,CAACyL,IAAI,CAACwF,EAAQ2T,WAAW,EAAIviB,EAAQod,KAAK,GAAKE,OAAS,IAAIxD,EAAMyD,QAAQ,CAAC3O,EAAQ2T,WAAW,CAACxF,GAAG,GAAK,EAAGnO,EAAQ2T,WAAW,CAACvF,IAAI,GAAK,GAAGQ,QAAQ,CAAC,IAAQ5O,EAAQ2T,WAAW,EAC7N,MAAlC3T,EAAQ0V,sBAAsB,EAAY1V,EAAQ5F,cAAc,CAAC,4BAC7D,AAA0C,UAA1C,OAAO4F,EAAQ0V,sBAAsB,CACrC9X,EAAO8X,sBAAsB,CAAGtkB,EAAQod,KAAK,GAAK/H,OAASA,OAAOzG,EAAQ0V,sBAAsB,EAAI1V,EAAQ0V,sBAAsB,CAElI9X,EAAO8X,sBAAsB,CAAGtkB,EAAQod,KAAK,GAAK/H,OAASyE,EAAMuD,IAAI,CAAC9U,SAAS,CAAC5K,QAAQ,CAACyL,IAAI,CAACwF,EAAQ0V,sBAAsB,EAAItkB,EAAQod,KAAK,GAAKE,OAAS,IAAIxD,EAAMyD,QAAQ,CAAC3O,EAAQ0V,sBAAsB,CAACvH,GAAG,GAAK,EAAGnO,EAAQ0V,sBAAsB,CAACtH,IAAI,GAAK,GAAGQ,QAAQ,CAAC,IAAQ5O,EAAQ0V,sBAAsB,EACnR,MAAnC1V,EAAQ4T,uBAAuB,EAAY5T,EAAQ5F,cAAc,CAAC,6BAC9D,AAA2C,UAA3C,OAAO4F,EAAQ4T,uBAAuB,CACtChW,EAAOgW,uBAAuB,CAAGxiB,EAAQod,KAAK,GAAK/H,OAASA,OAAOzG,EAAQ4T,uBAAuB,EAAI5T,EAAQ4T,uBAAuB,CAErIhW,EAAOgW,uBAAuB,CAAGxiB,EAAQod,KAAK,GAAK/H,OAASyE,EAAMuD,IAAI,CAAC9U,SAAS,CAAC5K,QAAQ,CAACyL,IAAI,CAACwF,EAAQ4T,uBAAuB,EAAIxiB,EAAQod,KAAK,GAAKE,OAAS,IAAIxD,EAAMyD,QAAQ,CAAC3O,EAAQ4T,uBAAuB,CAACzF,GAAG,GAAK,EAAGnO,EAAQ4T,uBAAuB,CAACxF,IAAI,GAAK,GAAGQ,QAAQ,CAAC,IAAQ5O,EAAQ4T,uBAAuB,EAC3T5T,EAAQ8T,YAAY,EAAI9T,EAAQ8T,YAAY,CAAChb,MAAM,CAAE,CACrD8E,EAAOkW,YAAY,CAAG,EAAE,CACxB,IAAK,IAAIjE,EAAI,EAAGA,EAAI7P,EAAQ8T,YAAY,CAAChb,MAAM,CAAE,EAAE+W,EAC3C,AAAmC,UAAnC,OAAO7P,EAAQ8T,YAAY,CAACjE,EAAE,CAC9BjS,EAAOkW,YAAY,CAACjE,EAAE,CAAGze,EAAQod,KAAK,GAAK/H,OAASA,OAAOzG,EAAQ8T,YAAY,CAACjE,EAAE,EAAI7P,EAAQ8T,YAAY,CAACjE,EAAE,CAE7GjS,EAAOkW,YAAY,CAACjE,EAAE,CAAGze,EAAQod,KAAK,GAAK/H,OAASyE,EAAMuD,IAAI,CAAC9U,SAAS,CAAC5K,QAAQ,CAACyL,IAAI,CAACwF,EAAQ8T,YAAY,CAACjE,EAAE,EAAIze,EAAQod,KAAK,GAAKE,OAAS,IAAIxD,EAAMyD,QAAQ,CAAC3O,EAAQ8T,YAAY,CAACjE,EAAE,CAAC1B,GAAG,GAAK,EAAGnO,EAAQ8T,YAAY,CAACjE,EAAE,CAACzB,IAAI,GAAK,GAAGQ,QAAQ,GAAK5O,EAAQ8T,YAAY,CAACjE,EAAE,AACvR,CAMA,OALuC,MAAnC7P,EAAQ2V,uBAAuB,EAAY3V,EAAQ5F,cAAc,CAAC,6BAC9D,AAA2C,UAA3C,OAAO4F,EAAQ2V,uBAAuB,CACtC/X,EAAO+X,uBAAuB,CAAGvkB,EAAQod,KAAK,GAAK/H,OAASA,OAAOzG,EAAQ2V,uBAAuB,EAAI3V,EAAQ2V,uBAAuB,CAErI/X,EAAO+X,uBAAuB,CAAGvkB,EAAQod,KAAK,GAAK/H,OAASyE,EAAMuD,IAAI,CAAC9U,SAAS,CAAC5K,QAAQ,CAACyL,IAAI,CAACwF,EAAQ2V,uBAAuB,EAAIvkB,EAAQod,KAAK,GAAKE,OAAS,IAAIxD,EAAMyD,QAAQ,CAAC3O,EAAQ2V,uBAAuB,CAACxH,GAAG,GAAK,EAAGnO,EAAQ2V,uBAAuB,CAACvH,IAAI,GAAK,GAAGQ,QAAQ,CAAC,IAAQ5O,EAAQ2V,uBAAuB,EACxT/X,CACX,EASA4X,EAAU7b,SAAS,CAACoV,MAAM,CAAG,WACzB,OAAO,IAAI,CAAC9N,WAAW,CAACqN,QAAQ,CAAC,IAAI,CAAEzD,EAAUM,IAAI,CAAC6D,aAAa,CACvE,EAEOwG,CACX,IAEApK,EAAMmK,QAAQ,CAAG,AAAC,WAiBd,SAASA,EAAShK,CAAU,EAExB,GADA,IAAI,CAACsK,YAAY,CAAG,CAAC,EACjBtK,EACA,IAAK,IAAItR,EAAOnM,OAAOmM,IAAI,CAACsR,GAAa/D,EAAI,EAAGA,EAAIvN,EAAKnB,MAAM,CAAE,EAAE0O,EACpC,MAAvB+D,CAAU,CAACtR,CAAI,CAACuN,EAAE,CAAC,EACnB,KAAI,CAACvN,CAAI,CAACuN,EAAE,CAAC,CAAG+D,CAAU,CAACtR,CAAI,CAACuN,EAAE,CAAC,AAAD,CAClD,CAoKA,OA5JA+N,EAAS5b,SAAS,CAACkc,YAAY,CAAG3K,EAAMuE,WAAW,CAUnD8F,EAAS7iB,MAAM,CAAG,SAAgB6Y,CAAU,EACxC,OAAO,IAAIgK,EAAShK,EACxB,EAWAgK,EAAS5I,MAAM,CAAG,SAAgB3M,CAAO,CAAE4M,CAAM,EAG7C,GAFI,CAACA,GACDA,CAAAA,EAAS5B,EAAQtY,MAAM,EAAC,EACxBsN,AAAwB,MAAxBA,EAAQ6V,YAAY,EAAY/nB,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,gBACpE,IAAK,IAAI/F,EAAOnM,OAAOmM,IAAI,CAAC+F,EAAQ6V,YAAY,EAAGrO,EAAI,EAAGA,EAAIvN,EAAKnB,MAAM,CAAE,EAAE0O,EACzEoF,EAAOE,MAAM,CAAwB,IAAIC,IAAI,GAAGD,MAAM,CAAwB,IAAIjJ,MAAM,CAAC5J,CAAI,CAACuN,EAAE,EAChG4D,EAAMoK,SAAS,CAAC7I,MAAM,CAAC3M,EAAQ6V,YAAY,CAAC5b,CAAI,CAACuN,EAAE,CAAC,CAAEoF,EAAOE,MAAM,CAAwB,IAAIC,IAAI,IAAIC,MAAM,GAAGA,MAAM,GAE9H,OAAOJ,CACX,EAWA2I,EAAS9H,eAAe,CAAG,SAAyBzN,CAAO,CAAE4M,CAAM,EAC/D,OAAO,IAAI,CAACD,MAAM,CAAC3M,EAAS4M,GAAQI,MAAM,EAC9C,EAaAuI,EAAS7H,MAAM,CAAG,SAAgBC,CAAM,CAAE7U,CAAM,EACxC,CAAE6U,CAAAA,aAAkB7C,CAAM,GAC1B6C,CAAAA,EAAS7C,EAAQpY,MAAM,CAACib,EAAM,EAElC,IADA,IAAmGpU,EAA/FqU,EAAM9U,AAAWiC,KAAAA,IAAXjC,EAAuB6U,EAAOE,GAAG,CAAGF,EAAOG,GAAG,CAAGhV,EAAQkH,EAAU,IAAIoL,EAAMmK,QAAQ,CACxF5H,EAAOG,GAAG,CAAGF,GAAK,CACrB,IAAIhO,EAAM+N,EAAOb,MAAM,GACvB,GAAQlN,IAAQ,GACX,EACD+N,EAAO+B,IAAI,GAAG5B,GAAG,GACb9N,EAAQ6V,YAAY,GAAK3K,EAAMuE,WAAW,EAC1CzP,CAAAA,EAAQ6V,YAAY,CAAG,CAAC,GAC5Btc,EAAMoU,EAAO9J,MAAM,GACnB8J,EAAOG,GAAG,GACV9N,EAAQ6V,YAAY,CAACtc,EAAI,CAAG6R,EAAMoK,SAAS,CAAC9H,MAAM,CAACC,EAAQA,EAAOb,MAAM,SAGxEa,EAAOI,QAAQ,CAACnO,AAAM,EAANA,EAGxB,CACA,OAAOI,CACX,EAYAuV,EAASvH,eAAe,CAAG,SAAyBL,CAAM,EAGtD,MAFI,CAAEA,CAAAA,aAAkB7C,CAAM,GAC1B6C,CAAAA,EAAS,IAAI7C,EAAQ6C,EAAM,EACxB,IAAI,CAACD,MAAM,CAACC,EAAQA,EAAOb,MAAM,GAC5C,EAUAyI,EAAStH,MAAM,CAAG,SAAgBjO,CAAO,EACrC,GAAI,AAAmB,UAAnB,OAAOA,GAAwBA,AAAY,OAAZA,EAC/B,MAAO,kBACX,GAAIA,AAAwB,MAAxBA,EAAQ6V,YAAY,EAAY7V,EAAQ5F,cAAc,CAAC,gBAAiB,CACxE,GAAI,CAAC8Q,EAAMpM,QAAQ,CAACkB,EAAQ6V,YAAY,EACpC,MAAO,gCAEX,IAAK,IADDtc,EAAMzL,OAAOmM,IAAI,CAAC+F,EAAQ6V,YAAY,EACjCrO,EAAI,EAAGA,EAAIjO,EAAIT,MAAM,CAAE,EAAE0O,EAAG,CACjC,IAAIiD,EAAQW,EAAMoK,SAAS,CAACvH,MAAM,CAACjO,EAAQ6V,YAAY,CAACtc,CAAG,CAACiO,EAAE,CAAC,EAC/D,GAAIiD,EACA,MAAO,gBAAkBA,CACjC,CACJ,CACA,OAAO,IACX,EAWA8K,EAASjH,QAAQ,CAAG,SAAkBtO,CAAO,CAAE5O,CAAO,EAC9C,CAACA,GACDA,CAAAA,EAAU,CAAC,GACf,IAGIue,EAHA/R,EAAS,CAAC,EAId,GAHIxM,CAAAA,EAAQwe,OAAO,EAAIxe,EAAQmd,QAAQ,AAAD,GAClC3Q,CAAAA,EAAOiY,YAAY,CAAG,CAAC,GAEvB7V,EAAQ6V,YAAY,EAAI,AAAClG,CAAAA,EAAQ7hB,OAAOmM,IAAI,CAAC+F,EAAQ6V,YAAY,GAAG/c,MAAM,CAAE,CAC5E8E,EAAOiY,YAAY,CAAG,CAAC,EACvB,IAAK,IAAIhG,EAAI,EAAGA,EAAIF,EAAM7W,MAAM,CAAE,EAAE+W,EAChCjS,EAAOiY,YAAY,CAAClG,CAAK,CAACE,EAAE,CAAC,CAAGzE,EAAMoK,SAAS,CAAClH,QAAQ,CAACtO,EAAQ6V,YAAY,CAAClG,CAAK,CAACE,EAAE,CAAC,CAAEze,EACjG,CACA,OAAOwM,CACX,EASA2X,EAAS5b,SAAS,CAACoV,MAAM,CAAG,WACxB,OAAO,IAAI,CAAC9N,WAAW,CAACqN,QAAQ,CAAC,IAAI,CAAEzD,EAAUM,IAAI,CAAC6D,aAAa,CACvE,EAEOuG,CACX,IAEAnK,EAAM5X,uBAAuB,CAAG,AAAC,WAkB7B,SAASA,EAAwB+X,CAAU,EAEvC,GADA,IAAI,CAACjY,UAAU,CAAG,EAAE,CAChBiY,EACA,IAAK,IAAItR,EAAOnM,OAAOmM,IAAI,CAACsR,GAAa/D,EAAI,EAAGA,EAAIvN,EAAKnB,MAAM,CAAE,EAAE0O,EACpC,MAAvB+D,CAAU,CAACtR,CAAI,CAACuN,EAAE,CAAC,EACnB,KAAI,CAACvN,CAAI,CAACuN,EAAE,CAAC,CAAG+D,CAAU,CAACtR,CAAI,CAACuN,EAAE,CAAC,AAAD,CAClD,CA+KA,OAvKAhU,EAAwBmG,SAAS,CAACrG,UAAU,CAAG4X,EAAM6E,UAAU,CAQ/Dvc,EAAwBmG,SAAS,CAAClG,WAAW,CAAG,GAUhDD,EAAwBd,MAAM,CAAG,SAAgB6Y,CAAU,EACvD,OAAO,IAAI/X,EAAwB+X,EACvC,EAWA/X,EAAwBmZ,MAAM,CAAG,SAAgB3M,CAAO,CAAE4M,CAAM,EAG5D,GAFI,CAACA,GACDA,CAAAA,EAAS5B,EAAQtY,MAAM,EAAC,EACxBsN,AAAsB,MAAtBA,EAAQ1M,UAAU,EAAY0M,EAAQ1M,UAAU,CAACwF,MAAM,CACvD,IAAK,IAAI0O,EAAI,EAAGA,EAAIxH,EAAQ1M,UAAU,CAACwF,MAAM,CAAE,EAAE0O,EAC7CoF,EAAOE,MAAM,CAAwB,IAAIjJ,MAAM,CAAC7D,EAAQ1M,UAAU,CAACkU,EAAE,EAG7E,OAF2B,MAAvBxH,EAAQvM,WAAW,EAAY3F,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,gBACnE4M,EAAOE,MAAM,CAAwB,IAAIQ,IAAI,CAACtN,EAAQvM,WAAW,EAC9DmZ,CACX,EAWApZ,EAAwBia,eAAe,CAAG,SAAyBzN,CAAO,CAAE4M,CAAM,EAC9E,OAAO,IAAI,CAACD,MAAM,CAAC3M,EAAS4M,GAAQI,MAAM,EAC9C,EAaAxZ,EAAwBka,MAAM,CAAG,SAAgBC,CAAM,CAAE7U,CAAM,EACvD,CAAE6U,CAAAA,aAAkB7C,CAAM,GAC1B6C,CAAAA,EAAS7C,EAAQpY,MAAM,CAACib,EAAM,EAElC,IADA,IAAIC,EAAM9U,AAAWiC,KAAAA,IAAXjC,EAAuB6U,EAAOE,GAAG,CAAGF,EAAOG,GAAG,CAAGhV,EAAQkH,EAAU,IAAIoL,EAAM5X,uBAAuB,CACvGma,EAAOG,GAAG,CAAGF,GAAK,CACrB,IAAIhO,EAAM+N,EAAOb,MAAM,GACvB,OAAQlN,IAAQ,GAChB,KAAK,EACG,CAAEI,CAAAA,EAAQ1M,UAAU,EAAI0M,EAAQ1M,UAAU,CAACwF,MAAM,AAAD,GAChDkH,CAAAA,EAAQ1M,UAAU,CAAG,EAAE,AAAD,EAC1B0M,EAAQ1M,UAAU,CAACuJ,IAAI,CAAC8Q,EAAO9J,MAAM,IACrC,KACJ,MAAK,EACD7D,EAAQvM,WAAW,CAAGka,EAAOL,IAAI,GACjC,KACJ,SACIK,EAAOI,QAAQ,CAACnO,AAAM,EAANA,EAEpB,CACJ,CACA,OAAOI,CACX,EAYAxM,EAAwBwa,eAAe,CAAG,SAAyBL,CAAM,EAGrE,MAFI,CAAEA,CAAAA,aAAkB7C,CAAM,GAC1B6C,CAAAA,EAAS,IAAI7C,EAAQ6C,EAAM,EACxB,IAAI,CAACD,MAAM,CAACC,EAAQA,EAAOb,MAAM,GAC5C,EAUAtZ,EAAwBya,MAAM,CAAG,SAAgBjO,CAAO,EACpD,GAAI,AAAmB,UAAnB,OAAOA,GAAwBA,AAAY,OAAZA,EAC/B,MAAO,kBACX,GAAIA,AAAsB,MAAtBA,EAAQ1M,UAAU,EAAY0M,EAAQ5F,cAAc,CAAC,cAAe,CACpE,GAAI,CAACpB,MAAMqF,OAAO,CAAC2B,EAAQ1M,UAAU,EACjC,MAAO,6BACX,IAAK,IAAIkU,EAAI,EAAGA,EAAIxH,EAAQ1M,UAAU,CAACwF,MAAM,CAAE,EAAE0O,EAC7C,GAAI,CAAC0D,EAAMmD,QAAQ,CAACrO,EAAQ1M,UAAU,CAACkU,EAAE,EACrC,MAAO,+BACnB,QACA,AAAIxH,AAAuB,MAAvBA,EAAQvM,WAAW,EAAYuM,EAAQ5F,cAAc,CAAC,gBAClD,AAA+B,WAA/B,OAAO4F,EAAQvM,WAAW,CACnB,gCACR,IACX,EAWAD,EAAwB8a,QAAQ,CAAG,SAAkBtO,CAAO,CAAE5O,CAAO,EAC7D,CAACA,GACDA,CAAAA,EAAU,CAAC,GACf,IAAIwM,EAAS,CAAC,EAKd,GAJIxM,CAAAA,EAAQ8e,MAAM,EAAI9e,EAAQmd,QAAQ,AAAD,GACjC3Q,CAAAA,EAAOtK,UAAU,CAAG,EAAE,AAAD,EACrBlC,EAAQmd,QAAQ,EAChB3Q,CAAAA,EAAOnK,WAAW,CAAG,EAAI,EACzBuM,EAAQ1M,UAAU,EAAI0M,EAAQ1M,UAAU,CAACwF,MAAM,CAAE,CACjD8E,EAAOtK,UAAU,CAAG,EAAE,CACtB,IAAK,IAAIuc,EAAI,EAAGA,EAAI7P,EAAQ1M,UAAU,CAACwF,MAAM,CAAE,EAAE+W,EAC7CjS,EAAOtK,UAAU,CAACuc,EAAE,CAAG7P,EAAQ1M,UAAU,CAACuc,EAAE,AACpD,CAGA,OAF2B,MAAvB7P,EAAQvM,WAAW,EAAYuM,EAAQ5F,cAAc,CAAC,gBACtDwD,CAAAA,EAAOnK,WAAW,CAAGuM,EAAQvM,WAAW,AAAD,EACpCmK,CACX,EASApK,EAAwBmG,SAAS,CAACoV,MAAM,CAAG,WACvC,OAAO,IAAI,CAAC9N,WAAW,CAACqN,QAAQ,CAAC,IAAI,CAAEzD,EAAUM,IAAI,CAAC6D,aAAa,CACvE,EAEOxb,CACX,IAEA4X,EAAM0K,MAAM,CAAG,AAAC,WAqBZ,SAASA,EAAOvK,CAAU,EAEtB,GADA,IAAI,CAACwK,cAAc,CAAG,CAAC,EACnBxK,EACA,IAAK,IAAItR,EAAOnM,OAAOmM,IAAI,CAACsR,GAAa/D,EAAI,EAAGA,EAAIvN,EAAKnB,MAAM,CAAE,EAAE0O,EACpC,MAAvB+D,CAAU,CAACtR,CAAI,CAACuN,EAAE,CAAC,EACnB,KAAI,CAACvN,CAAI,CAACuN,EAAE,CAAC,CAAG+D,CAAU,CAACtR,CAAI,CAACuN,EAAE,CAAC,AAAD,CAClD,CAyPA,OAjPAsO,EAAOnc,SAAS,CAACqc,MAAM,CAAG,KAQ1BF,EAAOnc,SAAS,CAACoc,cAAc,CAAG7K,EAAMuE,WAAW,CAQnDqG,EAAOnc,SAAS,CAAC8R,OAAO,CAAG,KAQ3BqK,EAAOnc,SAAS,CAACsc,cAAc,CAAG,EAQlCH,EAAOnc,SAAS,CAACuc,mBAAmB,CAAG,GAUvCJ,EAAOpjB,MAAM,CAAG,SAAgB6Y,CAAU,EACtC,OAAO,IAAIuK,EAAOvK,EACtB,EAWAuK,EAAOnJ,MAAM,CAAG,SAAgB3M,CAAO,CAAE4M,CAAM,EAO3C,GANI,CAACA,GACDA,CAAAA,EAAS5B,EAAQtY,MAAM,EAAC,EACN,MAAlBsN,EAAQgW,MAAM,EAAYloB,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,WAC9DoL,EAAM6H,YAAY,CAACtG,MAAM,CAAC3M,EAAQgW,MAAM,CAAEpJ,EAAOE,MAAM,CAAwB,IAAIC,IAAI,IAAIC,MAAM,GAC9E,MAAnBhN,EAAQyL,OAAO,EAAY3d,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,YAC/DoL,EAAMT,MAAM,CAACC,QAAQ,CAACiC,SAAS,CAACF,MAAM,CAAC3M,EAAQyL,OAAO,CAAEmB,EAAOE,MAAM,CAAwB,IAAIC,IAAI,IAAIC,MAAM,GAC/GhN,AAA0B,MAA1BA,EAAQ+V,cAAc,EAAYjoB,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,kBACtE,IAAK,IAAI/F,EAAOnM,OAAOmM,IAAI,CAAC+F,EAAQ+V,cAAc,EAAGvO,EAAI,EAAGA,EAAIvN,EAAKnB,MAAM,CAAE,EAAE0O,EAC3EoF,EAAOE,MAAM,CAAwB,IAAIC,IAAI,GAAGD,MAAM,CAAwB,IAAIjJ,MAAM,CAAC5J,CAAI,CAACuN,EAAE,EAChG4D,EAAM+K,cAAc,CAACxJ,MAAM,CAAC3M,EAAQ+V,cAAc,CAAC9b,CAAI,CAACuN,EAAE,CAAC,CAAEoF,EAAOE,MAAM,CAAwB,IAAIC,IAAI,IAAIC,MAAM,GAAGA,MAAM,GAMrI,OAJ8B,MAA1BhN,EAAQiW,cAAc,EAAYnoB,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,mBACtE4M,EAAOE,MAAM,CAAwB,IAAIK,MAAM,CAACnN,EAAQiW,cAAc,EACvC,MAA/BjW,EAAQkW,mBAAmB,EAAYpoB,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,wBAC3E4M,EAAOE,MAAM,CAAwB,IAAIQ,IAAI,CAACtN,EAAQkW,mBAAmB,EACtEtJ,CACX,EAWAkJ,EAAOrI,eAAe,CAAG,SAAyBzN,CAAO,CAAE4M,CAAM,EAC7D,OAAO,IAAI,CAACD,MAAM,CAAC3M,EAAS4M,GAAQI,MAAM,EAC9C,EAaA8I,EAAOpI,MAAM,CAAG,SAAgBC,CAAM,CAAE7U,CAAM,EACtC,CAAE6U,CAAAA,aAAkB7C,CAAM,GAC1B6C,CAAAA,EAAS7C,EAAQpY,MAAM,CAACib,EAAM,EAElC,IADA,IAAiGpU,EAA7FqU,EAAM9U,AAAWiC,KAAAA,IAAXjC,EAAuB6U,EAAOE,GAAG,CAAGF,EAAOG,GAAG,CAAGhV,EAAQkH,EAAU,IAAIoL,EAAM0K,MAAM,CACtFnI,EAAOG,GAAG,CAAGF,GAAK,CACrB,IAAIhO,EAAM+N,EAAOb,MAAM,GACvB,OAAQlN,IAAQ,GAChB,KAAK,EACDI,EAAQgW,MAAM,CAAG5K,EAAM6H,YAAY,CAACvF,MAAM,CAACC,EAAQA,EAAOb,MAAM,IAChE,KACJ,MAAK,EACDa,EAAO+B,IAAI,GAAG5B,GAAG,GACb9N,EAAQ+V,cAAc,GAAK7K,EAAMuE,WAAW,EAC5CzP,CAAAA,EAAQ+V,cAAc,CAAG,CAAC,GAC9Bxc,EAAMoU,EAAO9J,MAAM,GACnB8J,EAAOG,GAAG,GACV9N,EAAQ+V,cAAc,CAACxc,EAAI,CAAG6R,EAAM+K,cAAc,CAACzI,MAAM,CAACC,EAAQA,EAAOb,MAAM,IAC/E,KACJ,MAAK,EACD9M,EAAQyL,OAAO,CAAGL,EAAMT,MAAM,CAACC,QAAQ,CAACiC,SAAS,CAACa,MAAM,CAACC,EAAQA,EAAOb,MAAM,IAC9E,KACJ,MAAK,EACD9M,EAAQiW,cAAc,CAAGtI,EAAOR,MAAM,GACtC,KACJ,MAAK,EACDnN,EAAQkW,mBAAmB,CAAGvI,EAAOL,IAAI,GACzC,KACJ,SACIK,EAAOI,QAAQ,CAACnO,AAAM,EAANA,EAEpB,CACJ,CACA,OAAOI,CACX,EAYA8V,EAAO9H,eAAe,CAAG,SAAyBL,CAAM,EAGpD,MAFI,CAAEA,CAAAA,aAAkB7C,CAAM,GAC1B6C,CAAAA,EAAS,IAAI7C,EAAQ6C,EAAM,EACxB,IAAI,CAACD,MAAM,CAACC,EAAQA,EAAOb,MAAM,GAC5C,EAUAgJ,EAAO7H,MAAM,CAAG,SAAgBjO,CAAO,EACnC,GAAI,AAAmB,UAAnB,OAAOA,GAAwBA,AAAY,OAAZA,EAC/B,MAAO,kBACX,GAAIA,AAAkB,MAAlBA,EAAQgW,MAAM,EAAYhW,EAAQ5F,cAAc,CAAC,UAAW,CAC5D,IAAIqQ,EAAQW,EAAM6H,YAAY,CAAChF,MAAM,CAACjO,EAAQgW,MAAM,EACpD,GAAIvL,EACA,MAAO,UAAYA,CAC3B,CACA,GAAIzK,AAA0B,MAA1BA,EAAQ+V,cAAc,EAAY/V,EAAQ5F,cAAc,CAAC,kBAAmB,CAC5E,GAAI,CAAC8Q,EAAMpM,QAAQ,CAACkB,EAAQ+V,cAAc,EACtC,MAAO,kCAEX,IAAK,IADDxc,EAAMzL,OAAOmM,IAAI,CAAC+F,EAAQ+V,cAAc,EACnCvO,EAAI,EAAGA,EAAIjO,EAAIT,MAAM,CAAE,EAAE0O,EAAG,CACjC,IAAIiD,EAAQW,EAAM+K,cAAc,CAAClI,MAAM,CAACjO,EAAQ+V,cAAc,CAACxc,CAAG,CAACiO,EAAE,CAAC,EACtE,GAAIiD,EACA,MAAO,kBAAoBA,CACnC,CACJ,CACA,GAAIzK,AAAmB,MAAnBA,EAAQyL,OAAO,EAAYzL,EAAQ5F,cAAc,CAAC,WAAY,CAC9D,IAAIqQ,EAAQW,EAAMT,MAAM,CAACC,QAAQ,CAACiC,SAAS,CAACoB,MAAM,CAACjO,EAAQyL,OAAO,EAClE,GAAIhB,EACA,MAAO,WAAaA,CAC5B,QACA,AAAIzK,AAA0B,MAA1BA,EAAQiW,cAAc,EAAYjW,EAAQ5F,cAAc,CAAC,mBACrD,CAAC8Q,EAAMgD,SAAS,CAAClO,EAAQiW,cAAc,GAAK,CAAEjW,CAAAA,EAAQiW,cAAc,EAAI/K,EAAMgD,SAAS,CAAClO,EAAQiW,cAAc,CAAC9H,GAAG,GAAKjD,EAAMgD,SAAS,CAAClO,EAAQiW,cAAc,CAAC7H,IAAI,GAC3J,wCACXpO,AAA+B,MAA/BA,EAAQkW,mBAAmB,EAAYlW,EAAQ5F,cAAc,CAAC,wBAC1D,AAAuC,WAAvC,OAAO4F,EAAQkW,mBAAmB,CAC3B,wCACR,IACX,EAWAJ,EAAOxH,QAAQ,CAAG,SAAkBtO,CAAO,CAAE5O,CAAO,EAC5C,CAACA,GACDA,CAAAA,EAAU,CAAC,GACf,IAaIue,EAbA/R,EAAS,CAAC,EAcd,GAbIxM,CAAAA,EAAQwe,OAAO,EAAIxe,EAAQmd,QAAQ,AAAD,GAClC3Q,CAAAA,EAAOmY,cAAc,CAAG,CAAC,GACzB3kB,EAAQmd,QAAQ,GAChB3Q,EAAOoY,MAAM,CAAG,KAChBpY,EAAO6N,OAAO,CAAG,KACjB7N,EAAOqY,cAAc,CAAG,EACxBrY,EAAOsY,mBAAmB,CAAG,IAEX,MAAlBlW,EAAQgW,MAAM,EAAYhW,EAAQ5F,cAAc,CAAC,WACjDwD,CAAAA,EAAOoY,MAAM,CAAG5K,EAAM6H,YAAY,CAAC3E,QAAQ,CAACtO,EAAQgW,MAAM,CAAE5kB,EAAO,EAChD,MAAnB4O,EAAQyL,OAAO,EAAYzL,EAAQ5F,cAAc,CAAC,YAClDwD,CAAAA,EAAO6N,OAAO,CAAGL,EAAMT,MAAM,CAACC,QAAQ,CAACiC,SAAS,CAACyB,QAAQ,CAACtO,EAAQyL,OAAO,CAAEra,EAAO,EAElF4O,EAAQ+V,cAAc,EAAI,AAACpG,CAAAA,EAAQ7hB,OAAOmM,IAAI,CAAC+F,EAAQ+V,cAAc,GAAGjd,MAAM,CAAE,CAChF8E,EAAOmY,cAAc,CAAG,CAAC,EACzB,IAAK,IAAIlG,EAAI,EAAGA,EAAIF,EAAM7W,MAAM,CAAE,EAAE+W,EAChCjS,EAAOmY,cAAc,CAACpG,CAAK,CAACE,EAAE,CAAC,CAAGzE,EAAM+K,cAAc,CAAC7H,QAAQ,CAACtO,EAAQ+V,cAAc,CAACpG,CAAK,CAACE,EAAE,CAAC,CAAEze,EAC1G,CAQA,OAP8B,MAA1B4O,EAAQiW,cAAc,EAAYjW,EAAQ5F,cAAc,CAAC,oBACrD,AAAkC,UAAlC,OAAO4F,EAAQiW,cAAc,CAC7BrY,EAAOqY,cAAc,CAAG7kB,EAAQod,KAAK,GAAK/H,OAASA,OAAOzG,EAAQiW,cAAc,EAAIjW,EAAQiW,cAAc,CAE1GrY,EAAOqY,cAAc,CAAG7kB,EAAQod,KAAK,GAAK/H,OAASyE,EAAMuD,IAAI,CAAC9U,SAAS,CAAC5K,QAAQ,CAACyL,IAAI,CAACwF,EAAQiW,cAAc,EAAI7kB,EAAQod,KAAK,GAAKE,OAAS,IAAIxD,EAAMyD,QAAQ,CAAC3O,EAAQiW,cAAc,CAAC9H,GAAG,GAAK,EAAGnO,EAAQiW,cAAc,CAAC7H,IAAI,GAAK,GAAGQ,QAAQ,CAAC,IAAQ5O,EAAQiW,cAAc,EAC/O,MAA/BjW,EAAQkW,mBAAmB,EAAYlW,EAAQ5F,cAAc,CAAC,wBAC9DwD,CAAAA,EAAOsY,mBAAmB,CAAGlW,EAAQkW,mBAAmB,AAAD,EACpDtY,CACX,EASAkY,EAAOnc,SAAS,CAACoV,MAAM,CAAG,WACtB,OAAO,IAAI,CAAC9N,WAAW,CAACqN,QAAQ,CAAC,IAAI,CAAEzD,EAAUM,IAAI,CAAC6D,aAAa,CACvE,EAEO8G,CACX,IAEA1K,EAAMgL,mBAAmB,CAAG,AAAC,WAmBzB,SAASA,EAAoB7K,CAAU,EAEnC,GADA,IAAI,CAAC+J,WAAW,CAAG,CAAC,EAChB/J,EACA,IAAK,IAAItR,EAAOnM,OAAOmM,IAAI,CAACsR,GAAa/D,EAAI,EAAGA,EAAIvN,EAAKnB,MAAM,CAAE,EAAE0O,EACpC,MAAvB+D,CAAU,CAACtR,CAAI,CAACuN,EAAE,CAAC,EACnB,KAAI,CAACvN,CAAI,CAACuN,EAAE,CAAC,CAAG+D,CAAU,CAACtR,CAAI,CAACuN,EAAE,CAAC,AAAD,CAClD,CAgNA,OAxMA4O,EAAoBzc,SAAS,CAACyb,OAAO,CAAG,KAQxCgB,EAAoBzc,SAAS,CAACwb,iBAAiB,CAAG,KAQlDiB,EAAoBzc,SAAS,CAAC2b,WAAW,CAAGpK,EAAMuE,WAAW,CAU7D2G,EAAoB1jB,MAAM,CAAG,SAAgB6Y,CAAU,EACnD,OAAO,IAAI6K,EAAoB7K,EACnC,EAWA6K,EAAoBzJ,MAAM,CAAG,SAAgB3M,CAAO,CAAE4M,CAAM,EAOxD,GANI,CAACA,GACDA,CAAAA,EAAS5B,EAAQtY,MAAM,EAAC,EACL,MAAnBsN,EAAQoV,OAAO,EAAYtnB,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,YAC/DoL,EAAM6J,YAAY,CAACtI,MAAM,CAAC3M,EAAQoV,OAAO,CAAExI,EAAOE,MAAM,CAAwB,IAAIC,IAAI,IAAIC,MAAM,GACrE,MAA7BhN,EAAQmV,iBAAiB,EAAYrnB,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,sBACzEoL,EAAMyI,iBAAiB,CAAClH,MAAM,CAAC3M,EAAQmV,iBAAiB,CAAEvI,EAAOE,MAAM,CAAwB,IAAIC,IAAI,IAAIC,MAAM,GACjHhN,AAAuB,MAAvBA,EAAQsV,WAAW,EAAYxnB,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,eACnE,IAAK,IAAI/F,EAAOnM,OAAOmM,IAAI,CAAC+F,EAAQsV,WAAW,EAAG9N,EAAI,EAAGA,EAAIvN,EAAKnB,MAAM,CAAE,EAAE0O,EACxEoF,EAAOE,MAAM,CAAwB,IAAIC,IAAI,GAAGD,MAAM,CAAwB,IAAIjJ,MAAM,CAAC5J,CAAI,CAACuN,EAAE,EAChG4D,EAAMmK,QAAQ,CAAC5I,MAAM,CAAC3M,EAAQsV,WAAW,CAACrb,CAAI,CAACuN,EAAE,CAAC,CAAEoF,EAAOE,MAAM,CAAwB,IAAIC,IAAI,IAAIC,MAAM,GAAGA,MAAM,GAE5H,OAAOJ,CACX,EAWAwJ,EAAoB3I,eAAe,CAAG,SAAyBzN,CAAO,CAAE4M,CAAM,EAC1E,OAAO,IAAI,CAACD,MAAM,CAAC3M,EAAS4M,GAAQI,MAAM,EAC9C,EAaAoJ,EAAoB1I,MAAM,CAAG,SAAgBC,CAAM,CAAE7U,CAAM,EACnD,CAAE6U,CAAAA,aAAkB7C,CAAM,GAC1B6C,CAAAA,EAAS7C,EAAQpY,MAAM,CAACib,EAAM,EAElC,IADA,IAA8GpU,EAA1GqU,EAAM9U,AAAWiC,KAAAA,IAAXjC,EAAuB6U,EAAOE,GAAG,CAAGF,EAAOG,GAAG,CAAGhV,EAAQkH,EAAU,IAAIoL,EAAMgL,mBAAmB,CACnGzI,EAAOG,GAAG,CAAGF,GAAK,CACrB,IAAIhO,EAAM+N,EAAOb,MAAM,GACvB,OAAQlN,IAAQ,GAChB,KAAK,EACDI,EAAQoV,OAAO,CAAGhK,EAAM6J,YAAY,CAACvH,MAAM,CAACC,EAAQA,EAAOb,MAAM,IACjE,KACJ,MAAK,EACD9M,EAAQmV,iBAAiB,CAAG/J,EAAMyI,iBAAiB,CAACnG,MAAM,CAACC,EAAQA,EAAOb,MAAM,IAChF,KACJ,MAAK,EACDa,EAAO+B,IAAI,GAAG5B,GAAG,GACb9N,EAAQsV,WAAW,GAAKpK,EAAMuE,WAAW,EACzCzP,CAAAA,EAAQsV,WAAW,CAAG,CAAC,GAC3B/b,EAAMoU,EAAO9J,MAAM,GACnB8J,EAAOG,GAAG,GACV9N,EAAQsV,WAAW,CAAC/b,EAAI,CAAG6R,EAAMmK,QAAQ,CAAC7H,MAAM,CAACC,EAAQA,EAAOb,MAAM,IACtE,KACJ,SACIa,EAAOI,QAAQ,CAACnO,AAAM,EAANA,EAEpB,CACJ,CACA,OAAOI,CACX,EAYAoW,EAAoBpI,eAAe,CAAG,SAAyBL,CAAM,EAGjE,MAFI,CAAEA,CAAAA,aAAkB7C,CAAM,GAC1B6C,CAAAA,EAAS,IAAI7C,EAAQ6C,EAAM,EACxB,IAAI,CAACD,MAAM,CAACC,EAAQA,EAAOb,MAAM,GAC5C,EAUAsJ,EAAoBnI,MAAM,CAAG,SAAgBjO,CAAO,EAChD,GAAI,AAAmB,UAAnB,OAAOA,GAAwBA,AAAY,OAAZA,EAC/B,MAAO,kBACX,GAAIA,AAAmB,MAAnBA,EAAQoV,OAAO,EAAYpV,EAAQ5F,cAAc,CAAC,WAAY,CAC9D,IAAIqQ,EAAQW,EAAM6J,YAAY,CAAChH,MAAM,CAACjO,EAAQoV,OAAO,EACrD,GAAI3K,EACA,MAAO,WAAaA,CAC5B,CACA,GAAIzK,AAA6B,MAA7BA,EAAQmV,iBAAiB,EAAYnV,EAAQ5F,cAAc,CAAC,qBAAsB,CAClF,IAAIqQ,EAAQW,EAAMyI,iBAAiB,CAAC5F,MAAM,CAACjO,EAAQmV,iBAAiB,EACpE,GAAI1K,EACA,MAAO,qBAAuBA,CACtC,CACA,GAAIzK,AAAuB,MAAvBA,EAAQsV,WAAW,EAAYtV,EAAQ5F,cAAc,CAAC,eAAgB,CACtE,GAAI,CAAC8Q,EAAMpM,QAAQ,CAACkB,EAAQsV,WAAW,EACnC,MAAO,+BAEX,IAAK,IADD/b,EAAMzL,OAAOmM,IAAI,CAAC+F,EAAQsV,WAAW,EAChC9N,EAAI,EAAGA,EAAIjO,EAAIT,MAAM,CAAE,EAAE0O,EAAG,CACjC,IAAIiD,EAAQW,EAAMmK,QAAQ,CAACtH,MAAM,CAACjO,EAAQsV,WAAW,CAAC/b,CAAG,CAACiO,EAAE,CAAC,EAC7D,GAAIiD,EACA,MAAO,eAAiBA,CAChC,CACJ,CACA,OAAO,IACX,EAWA2L,EAAoB9H,QAAQ,CAAG,SAAkBtO,CAAO,CAAE5O,CAAO,EACzD,CAACA,GACDA,CAAAA,EAAU,CAAC,GACf,IAWIue,EAXA/R,EAAS,CAAC,EAYd,GAXIxM,CAAAA,EAAQwe,OAAO,EAAIxe,EAAQmd,QAAQ,AAAD,GAClC3Q,CAAAA,EAAO0X,WAAW,CAAG,CAAC,GACtBlkB,EAAQmd,QAAQ,GAChB3Q,EAAOwX,OAAO,CAAG,KACjBxX,EAAOuX,iBAAiB,CAAG,MAER,MAAnBnV,EAAQoV,OAAO,EAAYpV,EAAQ5F,cAAc,CAAC,YAClDwD,CAAAA,EAAOwX,OAAO,CAAGhK,EAAM6J,YAAY,CAAC3G,QAAQ,CAACtO,EAAQoV,OAAO,CAAEhkB,EAAO,EACxC,MAA7B4O,EAAQmV,iBAAiB,EAAYnV,EAAQ5F,cAAc,CAAC,sBAC5DwD,CAAAA,EAAOuX,iBAAiB,CAAG/J,EAAMyI,iBAAiB,CAACvF,QAAQ,CAACtO,EAAQmV,iBAAiB,CAAE/jB,EAAO,EAE9F4O,EAAQsV,WAAW,EAAI,AAAC3F,CAAAA,EAAQ7hB,OAAOmM,IAAI,CAAC+F,EAAQsV,WAAW,GAAGxc,MAAM,CAAE,CAC1E8E,EAAO0X,WAAW,CAAG,CAAC,EACtB,IAAK,IAAIzF,EAAI,EAAGA,EAAIF,EAAM7W,MAAM,CAAE,EAAE+W,EAChCjS,EAAO0X,WAAW,CAAC3F,CAAK,CAACE,EAAE,CAAC,CAAGzE,EAAMmK,QAAQ,CAACjH,QAAQ,CAACtO,EAAQsV,WAAW,CAAC3F,CAAK,CAACE,EAAE,CAAC,CAAEze,EAC9F,CACA,OAAOwM,CACX,EASAwY,EAAoBzc,SAAS,CAACoV,MAAM,CAAG,WACnC,OAAO,IAAI,CAAC9N,WAAW,CAACqN,QAAQ,CAAC,IAAI,CAAEzD,EAAUM,IAAI,CAAC6D,aAAa,CACvE,EAEOoH,CACX,IAEAhL,EAAM+K,cAAc,CAAG,AAAC,WAoBpB,SAASA,EAAe5K,CAAU,EAK9B,GAJA,IAAI,CAAC0G,KAAK,CAAG,EAAE,CACf,IAAI,CAACoE,gBAAgB,CAAG,EAAE,CAC1B,IAAI,CAACjjB,sBAAsB,CAAG,CAAC,EAC/B,IAAI,CAACkjB,iCAAiC,CAAG,EAAE,CACvC/K,EACA,IAAK,IAAItR,EAAOnM,OAAOmM,IAAI,CAACsR,GAAa/D,EAAI,EAAGA,EAAIvN,EAAKnB,MAAM,CAAE,EAAE0O,EACpC,MAAvB+D,CAAU,CAACtR,CAAI,CAACuN,EAAE,CAAC,EACnB,KAAI,CAACvN,CAAI,CAACuN,EAAE,CAAC,CAAG+D,CAAU,CAACtR,CAAI,CAACuN,EAAE,CAAC,AAAD,CAClD,CAuRA,OA/QA2O,EAAexc,SAAS,CAACsY,KAAK,CAAG/G,EAAM6E,UAAU,CAQjDoG,EAAexc,SAAS,CAAC0c,gBAAgB,CAAGnL,EAAM6E,UAAU,CAQ5DoG,EAAexc,SAAS,CAACvG,sBAAsB,CAAG8X,EAAMuE,WAAW,CAQnE0G,EAAexc,SAAS,CAAC2c,iCAAiC,CAAGpL,EAAM6E,UAAU,CAU7EoG,EAAezjB,MAAM,CAAG,SAAgB6Y,CAAU,EAC9C,OAAO,IAAI4K,EAAe5K,EAC9B,EAWA4K,EAAexJ,MAAM,CAAG,SAAgB3M,CAAO,CAAE4M,CAAM,EAGnD,GAFI,CAACA,GACDA,CAAAA,EAAS5B,EAAQtY,MAAM,EAAC,EACxBsN,AAAiB,MAAjBA,EAAQiS,KAAK,EAAYjS,EAAQiS,KAAK,CAACnZ,MAAM,CAC7C,IAAK,IAMLyd,EANS/O,EAAI,EAAGA,EAAIxH,EAAQiS,KAAK,CAACnZ,MAAM,CAAE,EAAE0O,EACpCxH,EAAQiS,KAAK,CAACzK,EAAE,WAAY9M,YAC5BkS,EAAOE,MAAM,CAAwB,IACrCF,EAAO4J,KAAK,CAACxW,EAAQiS,KAAK,CAACzK,EAAE,GAE7B4D,EAAME,KAAK,CAACqB,MAAM,CAAC3M,EAAQiS,KAAK,CAACzK,EAAE,CAAEoF,EAAOE,MAAM,CAAwB,IAAIC,IAAI,IAAIC,MAAM,GAMxG,GAAIuJ,AAAU,OAHVA,EADAvW,AAA4B,MAA5BA,EAAQqW,gBAAgB,EAAYrW,EAAQqW,gBAAgB,CAAC1B,OAAO,CAC3D3U,EAAQqW,gBAAgB,CAAC1B,OAAO,GAEhC3U,EAAQqW,gBAAgB,GACfE,EAAOzd,MAAM,CAC/B,IAAK,IAAI0O,EAAI,EAAGA,EAAI+O,EAAOzd,MAAM,CAAE,EAAE0O,EACjC4D,EAAMgL,mBAAmB,CAACzJ,MAAM,CAAC4J,CAAM,CAAC/O,EAAE,CAAEoF,EAAOE,MAAM,CAAwB,IAAIC,IAAI,IAAIC,MAAM,GAC3G,GAAIhN,AAA6C,MAA7CA,EAAQsW,iCAAiC,EAAYtW,EAAQsW,iCAAiC,CAACxd,MAAM,CACrG,IAAK,IAAI0O,EAAI,EAAGA,EAAIxH,EAAQsW,iCAAiC,CAACxd,MAAM,CAAE,EAAE0O,EAChExH,EAAQsW,iCAAiC,CAAC9O,EAAE,WAAY9M,YACxDkS,EAAOE,MAAM,CAAwB,IACrCF,EAAO4J,KAAK,CAACxW,EAAQsW,iCAAiC,CAAC9O,EAAE,GAEzD4D,EAAME,KAAK,CAACqB,MAAM,CAAC3M,EAAQsW,iCAAiC,CAAC9O,EAAE,CAAEoF,EAAOE,MAAM,CAAwB,IAAIC,IAAI,IAAIC,MAAM,GACpI,GAAIhN,AAAkC,MAAlCA,EAAQ5M,sBAAsB,EAAYtF,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,0BAC9E,IAAK,IAAI/F,EAAOnM,OAAOmM,IAAI,CAAC+F,EAAQ5M,sBAAsB,EAAGoU,EAAI,EAAGA,EAAIvN,EAAKnB,MAAM,CAAE,EAAE0O,EACnFoF,EAAOE,MAAM,CAAwB,IAAIC,IAAI,GAAGD,MAAM,CAAwB,IAAIjJ,MAAM,CAAC5J,CAAI,CAACuN,EAAE,EAChG4D,EAAM5X,uBAAuB,CAACmZ,MAAM,CAAC3M,EAAQ5M,sBAAsB,CAAC6G,CAAI,CAACuN,EAAE,CAAC,CAAEoF,EAAOE,MAAM,CAAwB,IAAIC,IAAI,IAAIC,MAAM,GAAGA,MAAM,GAEtJ,OAAOJ,CACX,EAWAuJ,EAAe1I,eAAe,CAAG,SAAyBzN,CAAO,CAAE4M,CAAM,EACrE,OAAO,IAAI,CAACD,MAAM,CAAC3M,EAAS4M,GAAQI,MAAM,EAC9C,EAaAmJ,EAAezI,MAAM,CAAG,SAAgBC,CAAM,CAAE7U,CAAM,EAC9C,CAAE6U,CAAAA,aAAkB7C,CAAM,GAC1B6C,CAAAA,EAAS7C,EAAQpY,MAAM,CAACib,EAAM,EAElC,IADA,IAAyGpU,EAArGqU,EAAM9U,AAAWiC,KAAAA,IAAXjC,EAAuB6U,EAAOE,GAAG,CAAGF,EAAOG,GAAG,CAAGhV,EAAQkH,EAAU,IAAIoL,EAAM+K,cAAc,CAC9FxI,EAAOG,GAAG,CAAGF,GAAK,CACrB,IAAIhO,EAAM+N,EAAOb,MAAM,GACvB,OAAQlN,IAAQ,GAChB,KAAK,EACG,CAAEI,CAAAA,EAAQiS,KAAK,EAAIjS,EAAQiS,KAAK,CAACnZ,MAAM,AAAD,GACtCkH,CAAAA,EAAQiS,KAAK,CAAG,EAAE,AAAD,EACrBjS,EAAQiS,KAAK,CAACpV,IAAI,CAACuO,EAAME,KAAK,CAACoC,MAAM,CAACC,EAAQA,EAAOb,MAAM,KAC3D,KACJ,MAAK,EACG,CAAE9M,CAAAA,EAAQqW,gBAAgB,EAAIrW,EAAQqW,gBAAgB,CAACvd,MAAM,AAAD,GAC5DkH,CAAAA,EAAQqW,gBAAgB,CAAG,EAAE,AAAD,EAChCrW,EAAQqW,gBAAgB,CAACxZ,IAAI,CAACuO,EAAMgL,mBAAmB,CAAC1I,MAAM,CAACC,EAAQA,EAAOb,MAAM,KACpF,KACJ,MAAK,EACDa,EAAO+B,IAAI,GAAG5B,GAAG,GACb9N,EAAQ5M,sBAAsB,GAAK8X,EAAMuE,WAAW,EACpDzP,CAAAA,EAAQ5M,sBAAsB,CAAG,CAAC,GACtCmG,EAAMoU,EAAO9J,MAAM,GACnB8J,EAAOG,GAAG,GACV9N,EAAQ5M,sBAAsB,CAACmG,EAAI,CAAG6R,EAAM5X,uBAAuB,CAACka,MAAM,CAACC,EAAQA,EAAOb,MAAM,IAChG,KACJ,MAAK,EACG,CAAE9M,CAAAA,EAAQsW,iCAAiC,EAAItW,EAAQsW,iCAAiC,CAACxd,MAAM,AAAD,GAC9FkH,CAAAA,EAAQsW,iCAAiC,CAAG,EAAE,AAAD,EACjDtW,EAAQsW,iCAAiC,CAACzZ,IAAI,CAACuO,EAAME,KAAK,CAACoC,MAAM,CAACC,EAAQA,EAAOb,MAAM,KACvF,KACJ,SACIa,EAAOI,QAAQ,CAACnO,AAAM,EAANA,EAEpB,CACJ,CACA,OAAOI,CACX,EAYAmW,EAAenI,eAAe,CAAG,SAAyBL,CAAM,EAG5D,MAFI,CAAEA,CAAAA,aAAkB7C,CAAM,GAC1B6C,CAAAA,EAAS,IAAI7C,EAAQ6C,EAAM,EACxB,IAAI,CAACD,MAAM,CAACC,EAAQA,EAAOb,MAAM,GAC5C,EAUAqJ,EAAelI,MAAM,CAAG,SAAgBjO,CAAO,EAC3C,GAAI,AAAmB,UAAnB,OAAOA,GAAwBA,AAAY,OAAZA,EAC/B,MAAO,kBACX,GAAIA,AAAiB,MAAjBA,EAAQiS,KAAK,EAAYjS,EAAQ5F,cAAc,CAAC,SAAU,CAC1D,GAAI,CAACpB,MAAMqF,OAAO,CAAC2B,EAAQiS,KAAK,EAC5B,MAAO,wBACX,IAAK,IAQDsE,EARK/O,EAAI,EAAGA,EAAIxH,EAAQiS,KAAK,CAACnZ,MAAM,CAAE,EAAE0O,EACxC,GAAI,CAAExH,CAAAA,EAAQiS,KAAK,CAACzK,EAAE,WAAY9M,UAAS,EAAI,CAC3C,IAAI+P,EAAQW,EAAME,KAAK,CAAC2C,MAAM,CAACjO,EAAQiS,KAAK,CAACzK,EAAE,EAC/C,GAAIiD,EACA,MAAO,SAAWA,CAC1B,CACR,CACA,GAAIzK,AAA4B,MAA5BA,EAAQqW,gBAAgB,EAAYrW,EAAQ5F,cAAc,CAAC,oBAAqB,CAMhF,GAAI,CAACpB,MAAMqF,OAAO,CAHdkY,EADAvW,AAA4B,MAA5BA,EAAQqW,gBAAgB,EAAYrW,EAAQqW,gBAAgB,CAAC1B,OAAO,CAC3D3U,EAAQqW,gBAAgB,CAAC1B,OAAO,GAEhC3U,EAAQqW,gBAAgB,EAEjC,MAAO,mCACX,IAAK,IAAI7O,EAAI,EAAGA,EAAI+O,EAAOzd,MAAM,CAAE,EAAE0O,EAAG,CACpC,IAAIiD,EAAQW,EAAMgL,mBAAmB,CAACnI,MAAM,CAACsI,CAAM,CAAC/O,EAAE,EACtD,GAAIiD,EACA,MAAO,oBAAsBA,CACrC,CACJ,CACA,GAAIzK,AAAkC,MAAlCA,EAAQ5M,sBAAsB,EAAY4M,EAAQ5F,cAAc,CAAC,0BAA2B,CAC5F,GAAI,CAAC8Q,EAAMpM,QAAQ,CAACkB,EAAQ5M,sBAAsB,EAC9C,MAAO,0CAEX,IAAK,IADDmG,EAAMzL,OAAOmM,IAAI,CAAC+F,EAAQ5M,sBAAsB,EAC3CoU,EAAI,EAAGA,EAAIjO,EAAIT,MAAM,CAAE,EAAE0O,EAAG,CACjC,IAAIiD,EAAQW,EAAM5X,uBAAuB,CAACya,MAAM,CAACjO,EAAQ5M,sBAAsB,CAACmG,CAAG,CAACiO,EAAE,CAAC,EACvF,GAAIiD,EACA,MAAO,0BAA4BA,CAC3C,CACJ,CACA,GAAIzK,AAA6C,MAA7CA,EAAQsW,iCAAiC,EAAYtW,EAAQ5F,cAAc,CAAC,qCAAsC,CAClH,GAAI,CAACpB,MAAMqF,OAAO,CAAC2B,EAAQsW,iCAAiC,EACxD,MAAO,oDACX,IAAK,IAAI9O,EAAI,EAAGA,EAAIxH,EAAQsW,iCAAiC,CAACxd,MAAM,CAAE,EAAE0O,EACpE,GAAI,CAAExH,CAAAA,EAAQsW,iCAAiC,CAAC9O,EAAE,WAAY9M,UAAS,EAAI,CACvE,IAAI+P,EAAQW,EAAME,KAAK,CAAC2C,MAAM,CAACjO,EAAQsW,iCAAiC,CAAC9O,EAAE,EAC3E,GAAIiD,EACA,MAAO,qCAAuCA,CACtD,CACR,CACA,OAAO,IACX,EAWA0L,EAAe7H,QAAQ,CAAG,SAAkBtO,CAAO,CAAE5O,CAAO,EACpD,CAACA,GACDA,CAAAA,EAAU,CAAC,GACf,IAuBIue,EAvBA/R,EAAS,CAAC,EAQd,GAPIxM,CAAAA,EAAQ8e,MAAM,EAAI9e,EAAQmd,QAAQ,AAAD,IACjC3Q,EAAOqU,KAAK,CAAG,EAAE,CACjBrU,EAAOyY,gBAAgB,CAAG,EAAE,CAC5BzY,EAAO0Y,iCAAiC,CAAG,EAAE,EAE7CllB,CAAAA,EAAQwe,OAAO,EAAIxe,EAAQmd,QAAQ,AAAD,GAClC3Q,CAAAA,EAAOxK,sBAAsB,CAAG,CAAC,GACjC4M,EAAQiS,KAAK,EAAIjS,EAAQiS,KAAK,CAACnZ,MAAM,CAAE,CACvC8E,EAAOqU,KAAK,CAAG,EAAE,CACjB,IAAK,IAAIpC,EAAI,EAAGA,EAAI7P,EAAQiS,KAAK,CAACnZ,MAAM,CAAE,EAAE+W,EACxCjS,EAAOqU,KAAK,CAACpC,EAAE,CAAGzE,EAAME,KAAK,CAACgD,QAAQ,CAACtO,EAAQiS,KAAK,CAACpC,EAAE,CAAEze,EACjE,CACA,GAAI4O,EAAQqW,gBAAgB,EAAIrW,EAAQqW,gBAAgB,CAACvd,MAAM,CAAE,CAC7D8E,EAAOyY,gBAAgB,CAAG,EAAE,CAC5B,IAAK,IAAIxG,EAAI,EAAGA,EAAI7P,EAAQqW,gBAAgB,CAACvd,MAAM,CAAE,EAAE+W,EACnDjS,EAAOyY,gBAAgB,CAACxG,EAAE,CAAGzE,EAAMgL,mBAAmB,CAAC9H,QAAQ,CAACtO,EAAQqW,gBAAgB,CAACxG,EAAE,CAAEze,EACrG,CACA,GAAI4O,EAAQsW,iCAAiC,EAAItW,EAAQsW,iCAAiC,CAACxd,MAAM,CAAE,CAC/F8E,EAAO0Y,iCAAiC,CAAG,EAAE,CAC7C,IAAK,IAAIzG,EAAI,EAAGA,EAAI7P,EAAQsW,iCAAiC,CAACxd,MAAM,CAAE,EAAE+W,EACpEjS,EAAO0Y,iCAAiC,CAACzG,EAAE,CAAGzE,EAAME,KAAK,CAACgD,QAAQ,CAACtO,EAAQsW,iCAAiC,CAACzG,EAAE,CAAEze,EACzH,CAEA,GAAI4O,EAAQ5M,sBAAsB,EAAI,AAACuc,CAAAA,EAAQ7hB,OAAOmM,IAAI,CAAC+F,EAAQ5M,sBAAsB,GAAG0F,MAAM,CAAE,CAChG8E,EAAOxK,sBAAsB,CAAG,CAAC,EACjC,IAAK,IAAIyc,EAAI,EAAGA,EAAIF,EAAM7W,MAAM,CAAE,EAAE+W,EAChCjS,EAAOxK,sBAAsB,CAACuc,CAAK,CAACE,EAAE,CAAC,CAAGzE,EAAM5X,uBAAuB,CAAC8a,QAAQ,CAACtO,EAAQ5M,sBAAsB,CAACuc,CAAK,CAACE,EAAE,CAAC,CAAEze,EACnI,CACA,OAAOwM,CACX,EASAuY,EAAexc,SAAS,CAACoV,MAAM,CAAG,WAC9B,OAAO,IAAI,CAAC9N,WAAW,CAACqN,QAAQ,CAAC,IAAI,CAAEzD,EAAUM,IAAI,CAAC6D,aAAa,CACvE,EAEOmH,CACX,IAEA/K,EAAMT,MAAM,EASRA,CAFIA,EAAS,CAAC,GAEPC,QAAQ,EASXA,CAFIA,EAAW,CAAC,GAEPiC,SAAS,CAAG,AAAC,WAkBlB,SAASA,EAAUtB,CAAU,EACzB,GAAIA,EACA,IAAK,IAAItR,EAAOnM,OAAOmM,IAAI,CAACsR,GAAa/D,EAAI,EAAGA,EAAIvN,EAAKnB,MAAM,CAAE,EAAE0O,EACpC,MAAvB+D,CAAU,CAACtR,CAAI,CAACuN,EAAE,CAAC,EACnB,KAAI,CAACvN,CAAI,CAACuN,EAAE,CAAC,CAAG+D,CAAU,CAACtR,CAAI,CAACuN,EAAE,CAAC,AAAD,CAClD,CAwKA,OAhKAqF,EAAUlT,SAAS,CAAC8c,OAAO,CAAG,EAQ9B5J,EAAUlT,SAAS,CAAC+c,KAAK,CAAG,EAU5B7J,EAAUna,MAAM,CAAG,SAAgB6Y,CAAU,EACzC,OAAO,IAAIsB,EAAUtB,EACzB,EAWAsB,EAAUF,MAAM,CAAG,SAAgB3M,CAAO,CAAE4M,CAAM,EAO9C,MANI,CAACA,GACDA,CAAAA,EAAS5B,EAAQtY,MAAM,EAAC,EACL,MAAnBsN,EAAQyW,OAAO,EAAY3oB,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,YAC/D4M,EAAOE,MAAM,CAAwB,GAAGuC,KAAK,CAACrP,EAAQyW,OAAO,EAC5C,MAAjBzW,EAAQ0W,KAAK,EAAY5oB,OAAOsM,cAAc,CAACI,IAAI,CAACwF,EAAS,UAC7D4M,EAAOE,MAAM,CAAwB,IAAIsC,KAAK,CAACpP,EAAQ0W,KAAK,EACzD9J,CACX,EAWAC,EAAUY,eAAe,CAAG,SAAyBzN,CAAO,CAAE4M,CAAM,EAChE,OAAO,IAAI,CAACD,MAAM,CAAC3M,EAAS4M,GAAQI,MAAM,EAC9C,EAaAH,EAAUa,MAAM,CAAG,SAAgBC,CAAM,CAAE7U,CAAM,EACzC,CAAE6U,CAAAA,aAAkB7C,CAAM,GAC1B6C,CAAAA,EAAS7C,EAAQpY,MAAM,CAACib,EAAM,EAElC,IADA,IAAIC,EAAM9U,AAAWiC,KAAAA,IAAXjC,EAAuB6U,EAAOE,GAAG,CAAGF,EAAOG,GAAG,CAAGhV,EAAQkH,EAAU,IAAIoL,EAAMT,MAAM,CAACC,QAAQ,CAACiC,SAAS,CACzGc,EAAOG,GAAG,CAAGF,GAAK,CACrB,IAAIhO,EAAM+N,EAAOb,MAAM,GACvB,OAAQlN,IAAQ,GAChB,KAAK,EACDI,EAAQyW,OAAO,CAAG9I,EAAO0B,KAAK,GAC9B,KACJ,MAAK,EACDrP,EAAQ0W,KAAK,CAAG/I,EAAOyB,KAAK,GAC5B,KACJ,SACIzB,EAAOI,QAAQ,CAACnO,AAAM,EAANA,EAEpB,CACJ,CACA,OAAOI,CACX,EAYA6M,EAAUmB,eAAe,CAAG,SAAyBL,CAAM,EAGvD,MAFI,CAAEA,CAAAA,aAAkB7C,CAAM,GAC1B6C,CAAAA,EAAS,IAAI7C,EAAQ6C,EAAM,EACxB,IAAI,CAACD,MAAM,CAACC,EAAQA,EAAOb,MAAM,GAC5C,EAUAD,EAAUoB,MAAM,CAAG,SAAgBjO,CAAO,QACtC,AAAI,AAAmB,UAAnB,OAAOA,GAAwBA,AAAY,OAAZA,EACxB,kBACPA,AAAmB,MAAnBA,EAAQyW,OAAO,EAAYzW,EAAQ5F,cAAc,CAAC,YAC9C,CAAC8Q,EAAMgD,SAAS,CAAClO,EAAQyW,OAAO,GAAK,CAAEzW,CAAAA,EAAQyW,OAAO,EAAIvL,EAAMgD,SAAS,CAAClO,EAAQyW,OAAO,CAACtI,GAAG,GAAKjD,EAAMgD,SAAS,CAAClO,EAAQyW,OAAO,CAACrI,IAAI,GAC/H,iCACXpO,AAAiB,MAAjBA,EAAQ0W,KAAK,EAAY1W,EAAQ5F,cAAc,CAAC,UAC5C,CAAC8Q,EAAMgD,SAAS,CAAClO,EAAQ0W,KAAK,EACvB,0BACR,IACX,EAWA7J,EAAUyB,QAAQ,CAAG,SAAkBtO,CAAO,CAAE5O,CAAO,EAC/C,CAACA,GACDA,CAAAA,EAAU,CAAC,GACf,IAAIwM,EAAS,CAAC,EAYd,OAXIxM,EAAQmd,QAAQ,GAChB3Q,EAAO6Y,OAAO,CAAG,EACjB7Y,EAAO8Y,KAAK,CAAG,GAEI,MAAnB1W,EAAQyW,OAAO,EAAYzW,EAAQ5F,cAAc,CAAC,aAC9C,AAA2B,UAA3B,OAAO4F,EAAQyW,OAAO,CACtB7Y,EAAO6Y,OAAO,CAAGrlB,EAAQod,KAAK,GAAK/H,OAASA,OAAOzG,EAAQyW,OAAO,EAAIzW,EAAQyW,OAAO,CAErF7Y,EAAO6Y,OAAO,CAAGrlB,EAAQod,KAAK,GAAK/H,OAASyE,EAAMuD,IAAI,CAAC9U,SAAS,CAAC5K,QAAQ,CAACyL,IAAI,CAACwF,EAAQyW,OAAO,EAAIrlB,EAAQod,KAAK,GAAKE,OAAS,IAAIxD,EAAMyD,QAAQ,CAAC3O,EAAQyW,OAAO,CAACtI,GAAG,GAAK,EAAGnO,EAAQyW,OAAO,CAACrI,IAAI,GAAK,GAAGQ,QAAQ,GAAK5O,EAAQyW,OAAO,EACtN,MAAjBzW,EAAQ0W,KAAK,EAAY1W,EAAQ5F,cAAc,CAAC,UAChDwD,CAAAA,EAAO8Y,KAAK,CAAG1W,EAAQ0W,KAAK,AAAD,EACxB9Y,CACX,EASAiP,EAAUlT,SAAS,CAACoV,MAAM,CAAG,WACzB,OAAO,IAAI,CAAC9N,WAAW,CAACqN,QAAQ,CAAC,IAAI,CAAEzD,EAAUM,IAAI,CAAC6D,aAAa,CACvE,EAEOnC,CACX,IAEOjC,GAGJD,GAGXrW,EAAOtG,OAAO,CAAGod,C,iOCnjQV,SAASuL,EAAiB1E,CAAK,CAAE2E,CAAC,CAAEC,CAAW,EAClD,IAAMC,EAAWD,EACX,IAAIE,EACJC,EACN,GAAI/E,EAAMpa,IAAI,EACNof,EAAqBhF,EAAMpa,IAAI,CAAEif,EAAUF,IAG/C3E,EAAM7F,SAAS,EACX8K,AAIZ,SAASA,EAAqBtoB,CAAI,CAAEkoB,CAAQ,CAAEF,CAAC,QAC3C,EAAKhoB,IAEDA,EAAKwiB,KAAK,EAAEa,OAAOpa,MAAQjJ,EAAKwiB,KAAK,CAACW,WAAW,CAC1CkF,EAAqBroB,EAAKwiB,KAAK,CAACa,KAAK,CAACpa,IAAI,CAAEif,EAASnG,KAAK,CAAC,CAAC,QAAQ,EAAE/hB,EAAKwiB,KAAK,CAACW,WAAW,CAAC,CAAC,EAAG6E,GAExGhoB,EAAKyiB,OAAO,EAAEziB,KACPsoB,EAAqBtoB,EAAKyiB,OAAO,CAACziB,IAAI,CAAEkoB,EAAUF,GAEzDhoB,EAAKuiB,QAAQ,EAAEW,MACRljB,EAAKuiB,QAAQ,CAACW,KAAK,CAACqF,IAAI,CAAC,AAACvoB,GAASsoB,EAAqBtoB,EAAMkoB,EAAUF,MAE/EhoB,EAAKsiB,QAAQ,EAAEY,OACRljB,EAAKsiB,QAAQ,CAACY,KAAK,CAACqF,IAAI,CAAC,AAACvoB,GAASsoB,EAAqBtoB,EAAMkoB,EAAUF,IAGvF,EApBiC3E,EAAM7F,SAAS,CAAE0K,EAAUF,GAHhD,MAMZ,CAkBA,SAASK,EAAqBroB,CAAI,CAAEsP,CAAI,CAAE0Y,CAAC,QACvC,EAAIA,EAAEhoB,EAAMsP,IAGJtP,CAAAA,EAAK+hB,KAAK,EAAEwG,KAAK,AAACxG,IACtB,IAAMyG,EAAYzG,EAAMC,YAAY,CAC9B1S,EAAKyS,KAAK,CAACA,EAAMC,YAAY,EAC7B1S,EACN,OAAO+Y,EAAqBtG,EAAOyG,EAAWR,EAClD,IAAM,EAAI,CACd,CACA,IAAMI,EAAqC,CACvCrC,UACI,MAAMviB,MAAM,wBAChB,EACAue,QACI,OAAO,IAAI,AACf,CACJ,CACA,OAAMoG,EACFpC,SAAU,CACN,MAAO,EAAE,AACb,CACAhE,MAAMC,CAAY,CAAE,CAChB,OAAO,IAAIyG,EAAqCzG,EAAc,IAAI,CACtE,CACJ,CACA,MAAMyG,EACFpW,YAAY2P,CAAY,CAAE0G,CAAI,CAAE,CAC5B,IAAI,CAAC1G,YAAY,CAAGA,EACpB,IAAI,CAAC0G,IAAI,CAAGA,CAChB,CACA3C,SAAU,CACN,IAAM4C,EAAM,EAAE,CACVC,EAAO,IAAI,CACf,KAAOA,aAAgBH,GACnBE,EAAI1a,IAAI,CAAC2a,EAAK5G,YAAY,EAC1B4G,EAAOA,EAAKF,IAAI,CAEpB,OAAOC,EAAIE,OAAO,EACtB,CACA9G,MAAMC,CAAY,CAAE,CAChB,OAAO,IAAIyG,EAAqCzG,EAAc,IAAI,CACtE,CACJ,CC1EO,MAAM8G,EACT/C,SAAU,CACN,IAAIgD,EAAiB,EACfC,EAAc,EAAE,CACtB,IAAK,IAAM3pB,KAAS,IAAI,CAAC4pB,OAAO,CACxB5pB,AAAU,IAAVA,EACA0pB,KAGIA,AAAmB,IAAnBA,EACAC,EAAY/a,IAAI,CAAC,GAEO,IAAnB8a,GACLC,EAAY/a,IAAI,CAAC,CAAC8a,GAEtBC,EAAY/a,IAAI,CAAC1B,KAAK2c,KAAK,CAAC7pB,IAC5B0pB,EAAiB,GAGzB,OAAOC,CACX,CACA,OAAOG,iBAAiBrM,CAAU,CAAE,CAEhC,IAAMsM,EAAkB7c,KAAK8c,IAAI,CAAC7N,AADtBjP,KAAKiP,GAAG,CAACsB,EAAa,KACMgM,EAAkBQ,YAAY,EACtE,OAAOF,GAAmB,GAAKtJ,OAAOyJ,KAAK,CAACH,GACtC,EACAA,GAAmBN,EAAkBU,YAAY,CAC7CV,EAAkBU,YAAY,CAAG,EACjCJ,CACd,CACAK,kBAAkB3M,CAAU,CAAEzd,EAAQ,CAAC,CAAE,CAErC,OADA,IAAI,CAACqqB,eAAe,CAACZ,EAAkBK,gBAAgB,CAACrM,GAAazd,GAC9D,IAAI,AACf,CACAqqB,gBAAgBC,CAAM,CAAEtqB,EAAQ,CAAC,CAAE,CAC/B,GAAIsqB,GAAUb,EAAkBU,YAAY,CACxC,MAAMhmB,MAAM,gDAEhB,GAAImmB,GAAU,IAAI,CAACV,OAAO,CAAC/e,MAAM,CAAE,CAC/B,IAAM0f,EAAY,IAAI,CAACX,OAAO,CAAC/e,MAAM,AACrC,KAAI,CAAC+e,OAAO,CAAC/e,MAAM,CAAGyf,EAAS,EAC/B,IAAI,CAACV,OAAO,CAACY,IAAI,CAAC,EAAGD,EACzB,CACA,IAAI,CAACX,OAAO,CAACU,EAAO,EAAItqB,CAC5B,CACAyqB,QAAQC,CAAc,CAAE,CACpB,IAAK,IAAInR,EAAI,EAAGA,EAAImR,EAAed,OAAO,CAAC/e,MAAM,CAAE0O,IAC/C,IAAI,CAAC8Q,eAAe,CAAC9Q,EAAGmR,EAAed,OAAO,CAACrQ,EAAE,CAEzD,CACAvG,YAAY7P,CAAO,CAAE,CACjB,IAAMwnB,EAAWxnB,GAASwnB,UAAY,GAChCf,EAAUzmB,GAASymB,QACnBgB,EAAgB1d,KAAKC,GAAG,CAACyc,GAAS/e,QAAU,EAAG8f,EACrD,KAAI,CAACf,OAAO,CAAG7e,MAAM6f,GAAeJ,IAAI,CAAC,GACrCZ,GACAA,EAAQve,OAAO,CAAC,CAAC/D,EAAKsD,IAAW,IAAI,CAACgf,OAAO,CAAChf,EAAM,CAAGtD,EAE/D,CACJ,CACAmiB,EAAkBU,YAAY,CAAG,IACjCV,EAAkBQ,YAAY,CAAG/c,KAAKiP,GAAG,CAAC,IC1DnC,OAAM0O,EACT7X,aAAc,CACV,IAAI,CAACuV,KAAK,CAAG,CACjB,CACJ,CACO,MAAMuC,EACT9X,YAAY+U,CAAM,CAAE,CAChB,IAAI,CAACA,MAAM,CAAGA,EACd,IAAI,CAACE,mBAAmB,CAAG,GAC3B,IAAI,CAACH,cAAc,CAAGjoB,OAAO4E,MAAM,CAAC,MACpC,IAAI,CAAC+Y,OAAO,CAAG,KACf,IAAI,CAACwK,cAAc,CAAG,EACtB,IAAI,CAAC+C,aAAa,CAAG,IAAIF,CAC7B,CACAG,yBAA0B,CACtB,IAAK,IAAMC,KAAkBprB,OAAO0D,MAAM,CAAC,IAAI,CAACukB,cAAc,EAC1DmD,EAAeD,uBAAuB,EAE9C,CACAE,SAAS,CAAEC,eAAAA,CAAc,CAAEnH,MAAAA,CAAK,CAAEoH,QAAAA,CAAO,CAAEjmB,uBAAAA,CAAsB,CAAEkmB,cAAAA,EAAgB,QAAgB,CAAEC,kBAAAA,CAAiB,CAAG,CAAE,CACvH,IAAML,EAAiB,IAAI,CAACM,iBAAiB,CAAC,CAC1CJ,eAAAA,EACAhmB,uBAAAA,CACJ,GACA,GAAIimB,EAAS,CACT,IAAMI,EAAe,WAAY,CAACxH,GAAOyH,MAAM,EAC3C,EAACvB,MAAMmB,IAAkBG,EAAa3gB,MAAM,CAAGwgB,EAC/CJ,EAAe7C,gBAAgB,CAAC8C,QAAQ,CAAClH,EAAO,IAAI,CAAC+G,aAAa,CAAEO,IAGpEL,EAAejH,KAAK,CAACpV,IAAI,CAAC4c,GAC1B,IAAI,CAACT,aAAa,CAACxC,KAAK,EAAI,EAAIiD,EAAa3gB,MAAM,CAE3D,MAEIogB,EAAe7C,gBAAgB,CAAC8C,QAAQ,CAAClH,EAAO,IAAI,CAAC+G,aAAa,CAAEO,EAE5E,CACAC,kBAAkB,CAAEJ,eAAAA,CAAc,CAAEhmB,uBAAAA,CAAsB,CAAG,CAAE,CAC3D,IAAMumB,EAAW,IAAI,CAAC5D,cAAc,CAACqD,EAAe,CACpD,GAAIO,EACA,OAAOA,EAGX,IAAK,GAAM,CAACtmB,EAAUumB,EAAwB,GAD9C,IAAI,CAACZ,aAAa,CAACxC,KAAK,EAAIqD,EAAwBT,GACFtrB,OAAOyF,OAAO,CAACH,IAM7D,IAAK,IAAMP,KALX,IAAI,CAACmmB,aAAa,CAACxC,KAAK,EAAI,EACxBoD,EAAwBnmB,WAAW,EACnC,KAAI,CAACulB,aAAa,CAACxC,KAAK,EAAI,GAEhC,IAAI,CAACwC,aAAa,CAACxC,KAAK,EAAIqD,EAAwBxmB,GAC5BumB,EAAwBtmB,UAAU,EACtD,IAAI,CAAC0lB,aAAa,CAACxC,KAAK,EAAIqD,EAAwBhnB,GAG5D,OAAQ,IAAI,CAACkjB,cAAc,CAACqD,EAAe,CAAG,IAAIU,EAAkB1mB,EACxE,CACJ,CACA,MAAM0mB,EACF7Y,YAAY7N,CAAsB,CAAE,CAChC,IAAI,CAACA,sBAAsB,CAAGA,EAC9B,IAAI,CAAC6e,KAAK,CAAG,EAAE,CACf,IAAI,CAACoE,gBAAgB,CAAG,IAAI0D,EAC5B,IAAI,CAACzD,iCAAiC,CAAG,EAAE,AAC/C,CACA2C,yBAA0B,CACtB,IAAI,CAAC5C,gBAAgB,CAAC4C,uBAAuB,EACjD,CACJ,CACA,MAAMc,EACF9Y,aAAc,CACV,IAAI,CAAC7H,GAAG,CAAGtL,OAAO4E,MAAM,CAAC,KAC7B,CACAiiB,SAAU,CACN,OAAO7mB,OAAO0D,MAAM,CAAC,IAAI,CAAC4H,GAAG,CACjC,CACA6f,yBAA0B,CACtB,IAAK,IAAMe,KAAuBlsB,OAAO0D,MAAM,CAAC,IAAI,CAAC4H,GAAG,EACpD4gB,EAAoBf,uBAAuB,EAEnD,CACAE,SAASlH,CAAK,CAAE+G,CAAa,CAAEO,CAAiB,CAAE,CAC9C,IAAI,CAACU,sBAAsB,CAAChI,EAAO+G,GAAeG,QAAQ,CAAClH,EAAO+G,EAAeO,EACrF,CACAU,uBAAuBhI,CAAK,CAAE+G,CAAa,CAAE,CACzC,IAAMkB,EAAe,CACjBlO,WAAYiG,EAAMjG,UAAU,CAC5BC,cAAegG,EAAMhG,aAAa,AACtC,EACMkO,EAAkB3qB,KAAKC,SAAS,CAACyqB,GACjCP,EAAW,IAAI,CAACvgB,GAAG,CAAC+gB,EAAgB,CAC1C,GAAIR,EACA,OAAOA,CAEXX,CAAAA,EAAcxC,KAAK,EACf,GACIqD,EAAwB5H,EAAMjG,UAAU,EACxC6N,EAAwB5H,EAAMhG,aAAa,EACnD,IAAM+N,EAAsB,IAAII,EAAuBF,GAEvD,OADA,IAAI,CAAC9gB,GAAG,CAAC+gB,EAAgB,CAAGH,EACrBA,CACX,CACJ,CACO,MAAMI,EACTnZ,YAAYmU,CAAO,CAAE,CACjB,IAAI,CAACA,OAAO,CAAGA,EACf,IAAI,CAACD,iBAAiB,CAAG,IAAIkF,EAC7B,IAAI,CAAC/E,WAAW,CAAGxnB,OAAO4E,MAAM,CAAC,KACrC,CACAumB,yBAA0B,CACtB,IAAK,IAAMqB,KAAYxsB,OAAO0D,MAAM,CAAC,IAAI,CAAC8jB,WAAW,EACjDgF,EAASrB,uBAAuB,EAExC,CACAE,SAASlH,CAAK,CAAE+G,CAAa,CAAEO,EAAoB,EAAE,CAAE,CACnD,GAAM,CAAE7M,qBAAAA,CAAoB,CAAE,CAAGuF,EAYjC,GAXI,CAACvF,GACD,IAAI,CAACyI,iBAAiB,CAACV,mCAAmC,GAE9D,IAAI,CAACU,iBAAiB,CAACjB,YAAY,GAC/BjC,EAAM5F,iBAAiB,EACvB,IAAI,CAAC8I,iBAAiB,CAACpB,iBAAiB,CAACsE,iBAAiB,CAACpG,EAAMvG,UAAU,EAC3E,IAAI,CAACyJ,iBAAiB,CAAChB,SAAS,IAGhC,IAAI,CAACgB,iBAAiB,CAACrB,YAAY,CAACuE,iBAAiB,CAACpG,EAAMvG,UAAU,EAEtE,CAACuG,EAAM5F,iBAAiB,EAAI4F,EAAM9F,WAAW,EAAEgD,UAAY,KAC3D,OAAQ8C,EAAM9F,WAAW,CAAC+C,KAAK,EAC3B,KAAK,8BAA+B,CAChC,IAAI,CAACiG,iBAAiB,CAAClB,oBAAoB,CAACoE,iBAAiB,CAACpG,EAAM9F,WAAW,CAACgD,QAAQ,EACxF,KACJ,MAAK,6BAA8B,CAC/B,IAAI,CAACgG,iBAAiB,CAACnB,mBAAmB,CAACqE,iBAAiB,CAACpG,EAAM9F,WAAW,CAACgD,QAAQ,CAE/F,CAEA8C,EAAM3F,iBAAiB,EACvB,IAAI,CAAC6I,iBAAiB,CAACf,kBAAkB,GAEzCnC,EAAM1F,sBAAsB,EAC5B,IAAI,CAAC4I,iBAAiB,CAACd,oBAAoB,GAE3CpC,EAAMxF,kBAAkB,EACxB,IAAI,CAAC0I,iBAAiB,CAACX,uBAAuB,GAE9CvC,EAAMzF,mBAAmB,EACzB,IAAI,CAAC2I,iBAAiB,CAACZ,wBAAwB,GAEnD,IAAIgG,EAAW,GACTC,EAAiB,IAAIhoB,IAgC3B,IAAK,GAAM,CAAEioB,SAAAA,CAAQ,CAAEvc,KAAAA,CAAI,CAAE,GAD7ByY,EAAiB1E,EA9BM,CAACrjB,EAAMsP,KAC1B,GAAItP,EAAK6b,KAAK,EAAE3R,OAAQ,CACpByhB,EAAW,GACX,IAAIG,EAAqB,IAAI,CAACvF,iBAAiB,CAACb,cAAc,CAC9DpW,EAAKyW,OAAO,GAAGrb,OAAO,CAAC,AAACqhB,IACpBD,EAAqBA,EAAmBE,QAAQ,CAACD,EAAS3B,EAC9D,GACAwB,EAAernB,GAAG,CAACunB,GACnBA,EAAmB/G,WAAW,EAAI/kB,EAAK6b,KAAK,CAAC3R,MAAM,AACvD,CACA,GAAI4T,EAAsB,CACtB,IAAM7Z,EAAYjE,EAAKiiB,iBAAiB,EAAIjiB,EAAKgiB,YAAY,CAC7D,GAAIhiB,EAAKmE,UAAU,EACfF,GACAjE,EAAKoU,IAAI,EACTpU,AAAgB,MAAhBA,EAAK6c,OAAO,EACZ7c,AAAkB,MAAlBA,EAAK4c,SAAS,EACd5c,EAAK6c,OAAO,EAAI7c,EAAK4c,SAAS,CAAE,CAEhC,IAAMqP,EAAYP,AADD,IAAI,CAACQ,WAAW,CAAClsB,EAAKmE,UAAU,CAAEimB,GACxB+B,YAAY,CAACloB,EAAWjE,EAAKoU,IAAI,CAAEgW,EAC9D6B,CAAAA,EAAUlH,WAAW,EAAI/kB,EAAK6b,KAAK,EAAE3R,QAAU,EAC/C+hB,EAAUnF,sBAAsB,GAChCmF,EAAUlF,uBAAuB,EAAIjJ,EACrCmO,EAAUjH,uBAAuB,EAC7B,AAAChlB,CAAAA,EAAK6b,KAAK,EAAE3R,QAAU,GAAK,EAAI,EAAI,EACxC+hB,EAAU/G,YAAY,CAACuE,iBAAiB,CAACzpB,EAAK6c,OAAO,CAAG7c,EAAK4c,SAAS,CAAEkB,EAC5E,CACJ,CACA,MAAO,EACX,EACwC,IACP6M,GAE7B,GADAgB,EAAW,GACPrc,EAAM,CACN,IAAIwc,EAAqB,IAAI,CAACvF,iBAAiB,CAACb,cAAc,CAACsG,QAAQ,CAAC,CAAC,QAAQ,EAAEH,EAAS,CAAC,CAAEzB,GAC/F9a,EAAK5E,OAAO,CAAC,AAACqhB,IACa,UAAnB,OAAOA,GACPD,CAAAA,EAAqBA,EAAmBE,QAAQ,CAACD,EAAS3B,EAAa,CAE/E,GACAwB,EAAernB,GAAG,CAACunB,GACnBA,EAAmB/G,WAAW,EAAI,CACtC,CAEJ,IAAK,IAAMqH,KAAaR,EACpBQ,EAAUpH,uBAAuB,EAAI,EAErC2G,GACA,IAAI,CAACpF,iBAAiB,CAACvB,uBAAuB,EAEtD,CACAkH,YAAY/nB,CAAU,CAAEimB,CAAa,CAAE,CACnC,IAAMW,EAAW,IAAI,CAACrE,WAAW,CAACviB,EAAW,CAC7C,GAAI4mB,EACA,OAAOA,CAEXX,CAAAA,EAAcxC,KAAK,EAAIqD,EAAwB9mB,GAC/C,IAAMunB,EAAW,IAAIW,EAErB,OADA,IAAI,CAAC3F,WAAW,CAACviB,EAAW,CAAGunB,EACxBA,CACX,CACJ,CACA,MAAMD,EACFpZ,aAAc,CACV,IAAI,CAAC6S,YAAY,CAAG,IAAI4D,EACxB,IAAI,CAACxD,YAAY,CAAG,EACpB,IAAI,CAACO,mCAAmC,CAAG,EAC3C,IAAI,CAACN,SAAS,CAAG,EACjB,IAAI,CAACC,kBAAkB,CAAG,EAC1B,IAAI,CAACC,oBAAoB,CAAG,EAC5B,IAAI,CAACN,iBAAiB,CAAG,IAAI2D,EAC7B,IAAI,CAACpD,cAAc,CAAG,IAAI4G,EAC1B,IAAI,CAACtH,uBAAuB,CAAG,EAC/B,IAAI,CAACI,mBAAmB,CAAG,IAAI0D,EAC/B,IAAI,CAACzD,oBAAoB,CAAG,IAAIyD,EAChC,IAAI,CAACnD,wBAAwB,CAAG,EAChC,IAAI,CAACC,uBAAuB,CAAG,CACnC,CACJ,CACA,MAAM0G,EACFja,aAAc,CACV,IAAI,CAACyS,QAAQ,CAAG5lB,OAAO4E,MAAM,CAAC,MAC9B,IAAI,CAACihB,WAAW,CAAG,EACnB,IAAI,CAACC,uBAAuB,CAAG,CACnC,CACAgH,SAASD,CAAO,CAAE3B,CAAa,CAAE,CAC7B,IAAMW,EAAW,IAAI,CAACjG,QAAQ,CAACiH,EAAQ,CACvC,GAAIhB,EACA,OAAOA,EAEX,IAAMhJ,EAAQ,IAAIuK,EAGlB,OAFA,IAAI,CAACxH,QAAQ,CAACiH,EAAQ,CAAGhK,EACzBqI,EAAcxC,KAAK,EAAIqD,EAAwBc,GAAW,EACnDhK,CACX,CACJ,CACA,MAAMsK,EACFha,aAAc,CACV,IAAI,CAAC4U,YAAY,CAAG/nB,OAAO4E,MAAM,CAAC,KACtC,CACAqoB,aAAaloB,CAAS,CAAE4iB,CAAU,CAAEuD,CAAa,CAAE,CAC/C,IAAMW,EAAW,IAAI,CAAC9D,YAAY,CAAChjB,EAAU,CAC7C,GAAI8mB,EACA,OAAOA,CAEXX,CAAAA,EAAcxC,KAAK,EACfqD,EAAwBhnB,GACpBgnB,EAAwBpE,GACxB,GACR,IAAMoF,EAAY,IAAIM,EAAa1F,GAEnC,OADA,IAAI,CAACI,YAAY,CAAChjB,EAAU,CAAGgoB,EACxBA,CACX,CACA5B,yBAA0B,CACtB,IAAK,IAAM4B,KAAa/sB,OAAO0D,MAAM,CAAC,IAAI,CAACqkB,YAAY,EACnDgF,EAAU5B,uBAAuB,EAEzC,CACJ,CACA,MAAMkC,EACFla,YAAYwU,CAAU,CAAE,CACpB,IAAI,CAACA,UAAU,CAAGA,EAClB,IAAI,CAAC9B,WAAW,CAAG,EACnB,IAAI,CAAC+B,sBAAsB,CAAG,EAC9B,IAAI,CAACC,uBAAuB,CAAG,EAC/B,IAAI,CAAC/B,uBAAuB,CAAG,EAC/B,IAAI,CAACE,YAAY,CAAG,IAAI4D,CAC5B,CACAuB,yBAA0B,CACtB,IAAI,CAACtD,uBAAuB,CAAGxa,KAAK2c,KAAK,CAAC,IAAI,CAACnC,uBAAuB,CAC1E,CACJ,CACA,SAASkE,EAAwBuB,CAAC,EAC9B,OAAO,EAAIvsB,OAAOgR,UAAU,CAACub,EACjC,C,2CC9QMC,EAAuB,CACzBlI,SAAU,UAAW,GACrBC,aAAc,CAAC,eAAe,EAAE,GAAc,CAAC,CAAC,CAChDE,eAAgB,CAAC,KAAK,EAAElb,QAAQkjB,OAAO,CAAC,CAAC,CACzC/H,MAAO,CAAC,EAAE,UAAW,GAAG,EAAE,EAAE,MAAO,GAAG,EAAE,EAAE,SAAU,GAAG,EAAE,EAAE,MAAO,GAAG,CAAC,CAAC,AAC3E,EACO,SAASgI,EAAiCnqB,EAAUtD,OAAO4E,MAAM,CAAC,KAAK,EAC1E,IAAM8oB,EAAkCpqB,EAAQqqB,yBAAyB,CACnEA,EAA4B,AAA2C,UAA3C,OAAOD,EACnC,SAAYrgB,KAAK2M,MAAM,GAAK0T,EACxB,EAAIA,EACJ,EACJA,GAEI,UAAY,EAAG,EACrBE,EAAyB,KAC7B,MAAO,QAAe,CAClBC,uBAAwB,iBACxBC,uBAAwB,GAClBC,gBAAN,MAAsBC,GAClB,AAAIJ,EACOA,EAAuBI,GAE3B,CAAC,EAEZ,MAAMC,gBAAgB,CAAEC,OAAQC,CAAY,CAAEC,OAAAA,CAAM,CAAEC,oBAAAA,CAAmB,CAAEnqB,OAAAA,CAAM,CAAG,MAsD5EoqB,EACAC,EAtDJ,IAAML,EAAS5qB,EAAQ4qB,MAAM,EAAIC,EAC3B,CAAE1iB,IAAAA,CAAG,CAAE2Z,SAAAA,CAAQ,CAAE,CAAGgJ,EAC1B,GAAI,CAAE3iB,CAAAA,GAAO2Z,CAAO,EAChB,MAAM,AAAI9gB,MAAM,uPAKpB,GAAI,QAAiBJ,GAAS,CAC1B,GAAIZ,EAAQkrB,2BAA2B,CAMnC,OALAN,EAAOO,IAAI,CAAC,0YAKL,CAAC,EAGRP,EAAOO,IAAI,CAAC,kTAKpB,CACAP,EAAOQ,IAAI,CACP,CAAC,0FAAuC,EAAEC,UAAUvJ,GAAU,CAAC,CAAC,EACpE,IAAMwJ,EAAyBtrB,EAAQsrB,sBAAsB,EAAIP,EAC7DQ,EAA4B,KAC1BC,EAA6B,IAAIrhB,IACjCshB,EAAsC,AAACrJ,IACzC,IAAMmG,EAAWiD,EAA2B9oB,GAAG,CAAC0f,GAChD,GAAImG,EACA,OAAOA,EAEX,IAAMmD,EAAS,IAAI/D,EAAU,IAAI,IAAY,CAAC,CAC1C,GAAGsC,CAAoB,CACvB7H,mBAAAA,EACAN,SAAAA,CACJ,IAEA,OADA0J,EAA2BnjB,GAAG,CAAC+Z,EAAoBsJ,GAC5CA,CACX,EACMC,EAAqB,AAACvJ,IACxB,IAAMsJ,EAASF,EAA2B9oB,GAAG,CAAC0f,UAC9C,AAAIsJ,GACAF,EAA2BI,MAAM,CAACxJ,GAC3BsJ,GAEJ,IACX,EACMG,EAA+B7rB,EAAQ8rB,sBAAsB,CAC7D,QAAsB9rB,EAAQ8rB,sBAAsB,EACpDniB,KAAAA,CAGF,EAAC2hB,GACDL,CAAAA,EAAcc,YAAY,IAAMC,IAAiChsB,EAAQisB,gBAAgB,EAAI,IAAS,EAE1G,IAAIC,EAAalsB,EAAQksB,UAAU,EAAI,GACjCC,EAAuBnsB,EAAQosB,iCAAiC,EAClEC,ACpGT,WACH,IAAMxgB,EAAQ,IAAI,GAAQ,CAAC,CACvBygB,QAASviB,QACTwiB,gBAAiB,CAACC,EAAMrkB,IACb,AAACA,GAAO1K,OAAOgR,UAAU,CAACtG,IAAS,CAElD,GACA,MAAO,CAAC0Y,EAAOmH,KACX,IAAMyE,EAAiB5L,EAAMxG,OAAO,EAAEgL,QACtC,GAAIoH,AAAkB,MAAlBA,EACA,MAAMzrB,MAAM,+CAEhB,IAAM0rB,EAAYC,AAc1B,SAAwB9L,CAAK,EACzB,IAAI6L,EAAY,GAQhB,OADAnH,EAAiB1E,EANjB,SAAwBrjB,CAAI,EAIxB,MAHKA,CAAAA,EAAK6b,KAAK,EAAE3R,QAAU,GAAK,GAC5BglB,CAAAA,EAAY,EAAG,EAEZA,CACX,EACwC,IACjCA,CACX,EAxByC7L,GAC3B+L,EAAWxuB,KAAKC,SAAS,CAAC,CAC5B2pB,EACA1B,EAAkBK,gBAAgB,CAAC9F,EAAMvG,UAAU,EACnDvQ,KAAK2c,KAAK,CAAC+F,EAAiB,IAC5BC,EAAY3iB,KAAK2c,KAAK,CAAC+F,EAAiB,GAAK,GAChD,QACD,CAAI5gB,EAAMnJ,GAAG,CAACkqB,KAGd/gB,EAAMxD,GAAG,CAACukB,EAAU,IACb,GACX,CACJ,ID4EgBC,EAAU,GACd,SAASC,EAA4BlsB,CAAM,EACvC,GAAIoqB,GAA8B+B,mBAAqBnsB,EACnD,OAAOoqB,EAA6B5I,kBAAkB,CAE1D,IAAMxC,EAAK,QAAsB,SAAYhf,IAK7C,OAJAoqB,EAA+B,CAC3B+B,iBAAkBnsB,EAClBwhB,mBAAoBxC,CACxB,EACOA,CACX,CACA,eAAeoM,IACX,MAAM3oB,QAAQ2pB,GAAG,CAAC,IAAIxB,EAA2B3iB,IAAI,GAAG,CAACb,GAAG,CAAC,AAACoa,GAAuB6K,EAA0B7K,IACnH,CACA,eAAe6K,EAA0B7K,CAAkB,EACvD,OAAO8K,EAAW9K,GAAoB/d,KAAK,CAAC,AAACX,IACrC1D,EAAQmtB,mBAAmB,CAC3BntB,EAAQmtB,mBAAmB,CAACzpB,GAG5BknB,EAAOvR,KAAK,CAAC3V,EAAIkL,OAAO,CAEhC,EACJ,CACA,IAAMse,EAAa,MAAO9K,IACtB,IAAIsJ,EAASC,EAAmBvJ,GAChC,GAAI,CAACsJ,GACAhvB,AAA8C,IAA9CA,OAAOmM,IAAI,CAAC6iB,EAAO/G,cAAc,EAAEjd,MAAM,EACtCgkB,AAA0B,IAA1BA,EAAO7G,cAAc,CACzB,MAEJ6G,CAAAA,EAAOrR,OAAO,CAAG,QAAqB,IAAI9B,MAC1CmT,EAAO7D,uBAAuB,GAC9B,IAAMuF,EAAgB,WAAa,CAAC1B,GACpC,GAAI0B,EACA,MAAM,AAAIpsB,MAAM,CAAC,wBAAwB,EAAEosB,EAAc,CAAC,EAE9D,IAAIxe,EAAU,WAAa,CAAC8c,GAAQpD,MAAM,GAE1C,GADAoD,EAAS,KACL1rB,EAAQqtB,iBAAiB,CAAE,CAC3B,IAAMC,EAAgB,WAAa,CAAC1e,GACpCgc,EAAOQ,IAAI,CAAC,CAAC,qBAAqB,EAAEhtB,KAAKC,SAAS,CAACivB,EAAc3P,MAAM,IAAI,CAAC,CAChF,CACA,IAAM4P,EAAa,MAAM,IAAIlqB,QAAQ,CAACC,EAASC,KAC3C,KAAAiqB,IAAA,EAAK5e,EAAS,CAACyK,EAAO1R,KAClB0R,EAAQ9V,EAAO8V,GAAS/V,EAAQqE,EACpC,EACJ,GACAiH,EAAU,KACV,IAAM6e,EAAUztB,EAAQytB,OAAO,EAAI,IAAK,CAClCC,EAAW,MAAM,EAAM,cAKrBC,EAJJ,IAAMC,EAAa,IAAI,EAAAC,eAAe,CAChCC,EAAenV,WAAW,KAC5BiV,EAAWG,KAAK,EACpB,EAAG/tB,EAAQguB,gBAAgB,EAAI,KAE/B,GAAI,CACAL,EAAc,MAAMF,EAAQ,AAACztB,CAAAA,EAAQiuB,WAAW,EAC5C,+CAA8C,EAC9C,sBAAuB,CACvBjX,OAAQ,OACRkX,QAAS,CACL,aAAc,mCACd,YAAa/lB,EACb,mBAAoB,OACpBgmB,OAAQ,kBACZ,EACAC,KAAMb,EACNc,OAAQT,EAAWS,MAAM,AAC7B,EACJ,QACQ,CACJhW,aAAayV,EACjB,CACA,GAAIH,CAAAA,CAAAA,EAAYW,MAAM,EAAI,GAAE,IAAKX,CAAAA,EAAYW,MAAM,CAAG,GAAE,EAIpD,OAAOX,CAHP,OAAM,AAAI3sB,MAAM,CAAC,YAAY,EAAE2sB,EAAYW,MAAM,CAAC,EAAE,EAAE,AAAC,MAAMX,EAAYY,IAAI,IAAO,YAAY,CAAC,CAKzG,EAAG,CACC3Y,QAAS,AAAC5V,CAAAA,EAAQwuB,WAAW,EAAI,GAAK,EACtCtY,WAAYlW,EAAQyuB,mBAAmB,EAAI,IAC3CxY,OAAQ,CACZ,GAAG5R,KAAK,CAAC,AAACX,IACN,MAAM,AAAI1C,MAAM,CAAC,wCAAwC,EAAE0C,EAAIkL,OAAO,CAAC,CAAC,CAC5E,GACA,GAAI8e,EAASY,MAAM,CAAG,KAAOZ,EAASY,MAAM,EAAI,IAC5C,MAAM,AAAIttB,MAAM,CAAC,oDAAoD,EAAE0sB,EAASY,MAAM,CAAC,EAAE,EAAE,AAAC,MAAMZ,EAASa,IAAI,IAAO,YAAY,CAAC,EAEvI,GAAIrC,GACAwB,AAAoB,MAApBA,EAASY,MAAM,EACfZ,EAASQ,OAAO,CACXxrB,GAAG,CAAC,iBACHiQ,MAAM,oCAAqC,KAE7C+b,EADJ,IAAMN,EAAO,MAAMV,EAASa,IAAI,GAEhC,GAAI,CACAG,EAAatwB,KAAKkZ,KAAK,CAAC8W,EAC5B,CACA,MAAOjnB,EAAG,CACN,MAAM,AAAInG,MAAM,CAAC,4CAA4C,EAAEmG,EAAE,CAAC,CACtE,CACiC,KAA7BunB,EAAWC,aAAa,GACxB/D,EAAOgE,KAAK,CAAC,yGAEb1C,EAAa,GAErB,CACIlsB,EAAQqtB,iBAAiB,EACzBzC,EAAOQ,IAAI,CAAC,CAAC,4BAA4B,EAAEsC,EAASY,MAAM,CAAC,CAAC,CAEpE,EA8NA,OA7NAhE,EAAyB,CAAC,CAAEuE,QAAAA,CAAO,CAAEjuB,OAAAA,CAAM,CAAEkuB,QAAS,CAAEhU,KAAAA,CAAI,CAAEiU,UAAAA,CAAS,CAAE,CAAG,IACxE,IAAMC,EAAc,IAAI,GAAgB,CAAC,CACrCC,SAAU,mCACVC,WAAYlvB,EAAQkvB,UAAU,AAClC,GACAF,EAAYG,WAAW,GACvBN,EAAQO,WAAW,CAAGJ,EAAYI,WAAW,CAC7C,IAAIC,EAA2B,GAC3BC,EAA8B,GAC9BC,EAAmC,KASvC,eAAeC,EAA4B9E,CAAc,EACrD,GAAI6E,AAAqC,OAArCA,GAEJ,GAAI,AAAkC,YAAlC,OAAOvvB,EAAQyvB,cAAc,CAAiB,CAC9CF,EAAmC,GACnC,MACJ,CAGgD,WAA5C,MAFJA,CAAAA,EACI,MAAMvvB,EAAQyvB,cAAc,CAAC/E,EAAc,IAE3CE,EAAOO,IAAI,CAAC,8EACZoE,EAAmC,IAE3C,CArBIzU,IACAkU,EAAYnO,KAAK,CAAC/F,IAAI,CAAG,IAAI,SAAU,CAAC,CACpC9D,OAAQ,gBAAiB,CAAC8D,EAAK9D,MAAM,CAAC,EAAI,wBAAyB,AACvE,GACIhX,EAAQ0vB,WAAW,EACnBC,AA2NjB,SAAgC7U,CAAI,CAAEoT,CAAO,CAAEwB,CAAW,EAC7D,GAAI,EAACA,GACA,YAAUA,CAAU,IAAKA,EAAYE,IAAI,AAAD,GACxC,WAASF,CAAU,IAAK,CAACA,EAAY1C,GAAG,AAAD,EAG5C,IAAK,GAAM,CAAC7kB,EAAKtL,EAAM,GAAIqxB,EAAS,CAChC,GAAI,CAAC,iBAAiBwB,GAClBA,EAAYG,WAAW,CAAC9J,IAAI,CAAC,AAAC+J,GACnBA,EAAaC,WAAW,KAAO5nB,EACzC,GACA,iBAAeunB,CAAU,IACtB,CAACA,EAAYM,SAAS,CAACjK,IAAI,CAAC,AAACnB,GAClBA,EAAOmL,WAAW,KAAO5nB,EACnC,EAGT,OAAQA,GACJ,IAAK,gBACL,IAAK,SACL,IAAK,aACD,KACJ,SACI2S,EAAKiE,cAAc,CAAC5W,EAAI,CAAG,IAAI,gBAAiB,CAAC,CAC7CtL,MAAO,CAACA,EAAM,AAClB,EACR,CACJ,CACJ,EAvP+CmyB,EAAYnO,KAAK,CAAC/F,IAAI,CAAEA,EAAKoT,OAAO,CAAEluB,EAAQ0vB,WAAW,GAiBxF,IAAIO,EAAmB,GACvB,MAAO,CACH,MAAMA,iBAAiBvF,CAAc,EACjCuF,EAAmB,GACfpB,EAAQ3T,iBAAiB,EACzB8T,CAAAA,EAAYnO,KAAK,CAAC3F,iBAAiB,CAAG,EAAG,EAEzC2T,EAAQ1T,sBAAsB,EAC9B6T,CAAAA,EAAYnO,KAAK,CAAC1F,sBAAsB,CAAG,EAAG,EAE9C4T,GACAC,CAAAA,EAAYnO,KAAK,CAAClG,OAAO,CAAGuV,AEpQjD,SAA0BnB,CAAS,CAAEoB,CAAkB,CAAEC,CAAe,EAC3E,IAAMzV,EAAU,IAAI,YAAa,CAC3B0V,EAAoB,AAAC,MACvB,GAAIF,CAAAA,IAAsB,eAAeA,CAAiB,EActD,OAAOpB,CAdkD,EACzD,IAAMuB,EAAe5zB,OAAOmM,IAAI,CAACkmB,GACjC,GAAI,CACA,IAAMwB,EAAoBJ,EAAmB3rB,SAAS,CAAC,CACnDuqB,UAAWA,EACXqB,gBAAiBA,CACrB,GACA,OAAOI,AAyCvB,SAAgCF,CAAY,CAAEC,CAAiB,EAC3D,IAAME,EAAmB/zB,OAAO4E,MAAM,CAAC,MAIvC,OAHAgvB,EAAapoB,OAAO,CAAC,AAACxG,IAClB+uB,CAAgB,CAAC/uB,EAAK,CAAG6uB,CAAiB,CAAC7uB,EAAK,AACpD,GACO+uB,CACX,EA/C8CH,EAAcC,EAChD,CACA,MAAOppB,EAAG,CACN,OAAOupB,AA+BvB,SAA2CC,CAAa,EACpD,IAAMJ,EAAoB7zB,OAAO4E,MAAM,CAAC,MAIxC,OAHAqvB,EAAczoB,OAAO,CAAC,AAACxG,IACnB6uB,CAAiB,CAAC7uB,EAAK,CAAG,4BAC9B,GACO6uB,CACX,EArCyDD,EAC7C,CACJ,CAIJ,KAuBA,OAtBA5zB,OAAOmM,IAAI,CAACwnB,GAAmBnoB,OAAO,CAAC,AAACxG,IACpC,GAAI,CAACyuB,GACA,SAAUA,GAAsBA,EAAmBP,IAAI,EACvD,QAASO,GAAsB,CAACA,EAAmBnD,GAAG,EACtD,gBAAiBmD,GACdA,EAAmBN,WAAW,CAACe,QAAQ,CAAClvB,IAC3C,cAAeyuB,GACZ,CAACA,EAAmBH,SAAS,CAACY,QAAQ,CAAClvB,GAC3CiZ,EAAQyD,aAAa,CAAC1c,EAAK,CAAG,QAG9B,GAAI,CACAiZ,EAAQyD,aAAa,CAAC1c,EAAK,CACvB,AAAmC,SAA5B2uB,CAAiB,CAAC3uB,EAAK,CACxB,GACAtD,KAAKC,SAAS,CAACgyB,CAAiB,CAAC3uB,EAAK,CACpD,CACA,MAAOyF,EAAG,CACNwT,EAAQyD,aAAa,CAAC1c,EAAK,CAAGtD,KAAKC,SAAS,CAAC,oCACjD,CAER,GACOsc,CACX,EFyNyEoU,EAAW/uB,EAAQmwB,kBAAkB,CAAEzF,EAAe5Z,MAAM,GAE7G,IAAM+f,EAAa,AAAC7wB,CAAAA,EAAQ8wB,kBAAkB,EA0NtE,SAAmC,CAAEhC,QAAAA,CAAO,CAAG,EAC3C,IAAMiC,EAAsB,4BACtBC,EAAyB,sCAC/B,AAAIlC,EAAQhU,IAAI,EAAEoT,SAASxrB,IAAIquB,IAC3BjC,EAAQhU,IAAI,EAAEoT,SAASxrB,IAAIsuB,GACpB,CACHpW,WAAYkU,EAAQhU,IAAI,EAAEoT,SAASxrB,IAAIquB,GACvClW,cAAeiU,EAAQhU,IAAI,EAAEoT,SAASxrB,IAAIsuB,EAC9C,EAEKlC,EAAQmC,UAAU,EAAEJ,WAClB/B,EAAQmC,UAAU,CAACJ,UAAU,CAG7B,CAAC,CAEhB,CA1OkG,EAAGnG,GAC7E,GAAImG,EAAY,CACZ,GAAM,CAAEjW,WAAAA,CAAU,CAAEC,cAAAA,CAAa,CAAE,CAAGgW,CACtC7B,CAAAA,EAAYnO,KAAK,CAAChG,aAAa,CAAGA,GAAiB,GACnDmU,EAAYnO,KAAK,CAACjG,UAAU,CAAGA,GAAc,EACjD,CACJ,EACMsW,mBAAN,SACW,MAAOC,IACV9B,EAA2B8B,EAAAA,GACrBA,AAA4B,IAA5BA,EAAiBzpB,MAAM,AAEjC,EAEJ,MAAM0pB,oBAAoB1G,CAAc,EAIpC,GAHA4E,EACI5E,AAA6B/gB,KAAAA,IAA7B+gB,EAAezmB,SAAS,CAC5B,MAAMurB,EAA4B9E,GAC9B6E,GACA,CAACD,GACGT,AAA0BllB,KAAAA,IAA1BklB,EAAQwC,aAAa,CAAgB,CACrC,IAAMC,EAAY,MAAMjH,EAA0BK,EAClDsE,CAAAA,EAAYnO,KAAK,CAACvF,oBAAoB,CAClC,AAAqB,UAArB,OAAOgW,EAAyBA,EAAYA,EAAY,EAAI,EAChEzC,EAAQwC,aAAa,CACjB,CAAC,CAACrC,EAAYnO,KAAK,CAACvF,oBAAoB,AAChD,CAER,EACA,MAAMiW,oBACF,GAAK1C,EAAQwC,aAAa,CAE1B,MAAO,CACHG,iBAAAA,CAAiB,CAAEpG,KAAAA,CAAI,CAAE,GACd4D,EAAYwC,gBAAgB,CAACpG,EAE5C,CACJ,EACA,MAAMqG,6BAA6BC,CAAe,CAAEzY,CAAM,EACtD+V,EAAY2C,kBAAkB,CAAC1Y,EACnC,EACA,MAAM2Y,0BAA0BlH,CAAc,CAAEmH,CAAO,EAC/C,CAACA,EAAQC,OAAO,EAChB,MAAMC,EAAkBrH,EAEhC,EACA,MAAMsH,iBAAiBtH,CAAc,EAC5BuF,IAEDvF,EAAezR,MAAM,EACrB+V,EAAY2C,kBAAkB,CAACjH,EAAezR,MAAM,EAEd,WAAtCyR,EAAegD,QAAQ,CAACU,IAAI,CAAC6D,IAAI,EACjC,MAAMF,EAAkBrH,GAEhC,CACJ,EACA,eAAeqH,EAAkBrH,CAAc,EAC3C,IAAMwH,EAAoB,CAAC,CAACxH,EAAezmB,SAAS,AACpD,OAAMurB,EAA4B9E,GAClCsE,EAAYmD,UAAU,GACtB,IAAM/P,EAAqByJ,GAAgCiB,EAA4BlsB,GACvF,GAAI2uB,AAAqC,KAArCA,EAA4C,CACxC2C,GACAzG,EAAoCrJ,GAC/ByC,cAAc,GAEvB,MACJ,CACAmK,EAAYnO,KAAK,CAAC5F,iBAAiB,CAAG,CAAC,CAAC4T,EAAQuD,gBAAgB,CAChEpD,EAAYnO,KAAK,CAACxF,kBAAkB,CAAG,CAAC,CAACwT,EAAQxT,kBAAkB,CACnE2T,EAAYnO,KAAK,CAACzF,mBAAmB,CAAG,CAAC,CAACyT,EAAQzT,mBAAmB,CACrE,IAAMiX,EAAoB3H,EAAe4H,kBAAkB,CAACD,iBAAiB,GAe7E,eAAetK,QASP/lB,EADAgmB,EAPJ,GAAI6E,EACA,MAEJ,OAAM,IAAIxpB,QAAQ,AAACkvB,GAAQC,aAAaD,IACxC,IAAMnQ,EAAqByJ,GACvBiB,EAA4BlsB,GAC1B,CAAEigB,MAAAA,CAAK,CAAE,CAAGmO,CAGbtE,CAAAA,EAAe/pB,QAAQ,CAGnB0uB,EACLrH,EAAiB,CAAC;AAA6B,CAAC,CAE3CsH,GACLtH,CAAAA,EAAiB,CAAC;AAAgC,CAAC,AAAD,EANlDA,EAAiB,CAAC;AAAwB,CAAC,CAQ/C,IAAMyK,EAAezK,AAAmBre,KAAAA,IAAnBqe,EACrB,GAAIA,EACIhoB,EAAQ0yB,kCAAkC,GAC1C7R,EAAMpG,uBAAuB,CAAGiQ,EAAe5Z,MAAM,CACrD+P,EAAMnG,uBAAuB,CACzBgQ,EAAeoE,OAAO,CAAC7xB,aAAa,EAAI,IAEhD+E,EAAyBtF,OAAO4E,MAAM,CAAC,UAEtC,CACD,IAAMqxB,EAAuBC,AA8BrC,eGhYyBC,EAAW51B,EHiYhC,GAAI,CAACytB,EAAe/pB,QAAQ,CACxB,MAAM,AAAIK,MAAM,gBAEpB,IAAM4rB,GGpYeiG,EHoYyBnI,EAAemI,SAAS,CGpYtC51B,EHoYwCytB,EAAeztB,aAAa,EAAI,GGnYrH,CAAC,EAAE41B,EAAU,EAAE51B,GAAiB,IAAMA,EAAc,CAAC,EHoYpC,EAACsuB,GACDA,EAA0BuH,SAAS,GAAKlyB,CAAK,GAC7C2qB,CAAAA,EAA4B,CACxBuH,UAAWlyB,EACXiL,MAAOknB,AGjahC,SAAyC,CAAEnI,OAAAA,CAAM,CAAG,MACnDoI,EACJ,IAAIC,EAAgB,EACpB,OAAO,IAAI,GAAQ,CAAC,CAChB1G,gBAAAA,AAAgBzV,GACLrZ,OAAOgR,UAAU,CAACrQ,KAAKC,SAAS,CAACyY,GAAM,QAElDwV,QAASviB,SACTmpB,UACID,IACI,EAACD,GAAY,IAAIza,OAAOC,OAAO,GAAKwa,EAASxa,OAAO,GAAK,GAAI,IAC7Dwa,EAAW,IAAIza,KACfqS,EAAOO,IAAI,CAAC,6EAEM8H,wMAIjB,EACDA,EAAgB,EAExB,CACJ,EACJ,EH0YuE,CAAErI,OAAAA,CAAO,EACpD,GAEJ,IAAMuI,EAA6B5H,EAA0B1f,KAAK,CAACnJ,GAAG,CAACkqB,GACvE,GAAIuG,EACA,OAAOA,EAGX,IAAMC,EAAgC,CAClC5Y,UAFuB,AAACxa,CAAAA,EAAQqzB,kBAAkB,EAAI,EAAA9wB,uBAAuB,AAAvB,EAAyBmoB,EAAe/pB,QAAQ,CAAE+pB,EAAeztB,aAAa,EAAI,IAGxI+E,uBAAwB,KAAAvB,+BAAA,EAAgC,CACpDE,SAAU+pB,EAAe/pB,QAAQ,CACjCC,OAAAA,EACAC,sBAAuB6pB,EAAeztB,aAAa,EAAI,IAC3D,EACJ,EAEA,OADAsuB,EAA0B1f,KAAK,CAACxD,GAAG,CAACukB,EAAUwG,GACvCA,CACX,IAxDQpL,EAAiB,CAAC,EAAE,EAAE0C,EAAeztB,aAAa,EAAI,IAAI;AAAE,EAAE01B,EAAqBnY,SAAS,CAAC,CAAC,CAC9FxY,EACI2wB,EAAqB3wB,sBAAsB,AACnD,CACA,IAAMorB,EAAgB,WAAY,CAACvM,GACnC,GAAIuM,EACA,MAAM,AAAIpsB,MAAM,CAAC,sBAAsB,EAAEosB,EAAc,CAAC,EAExD8E,GACAzG,EAAoCrJ,GAC/ByC,cAAc,GAEvB4G,EAAoCrJ,GAAoB2F,QAAQ,CAAC,CAC7DC,eAAAA,EACAnH,MAAAA,EACAoH,QAASiE,GACJ,EAACuG,GAAgB,CAAC,CAAC5D,EAAQwC,aAAa,AAAD,GACxC,CAACxC,EAAQ1G,iBAAiB,EAAEzgB,QAC5BykB,EAAqBtL,EAAOmH,GAChChmB,uBAAAA,EACAmmB,kBAAmB0G,EAAQ1G,iBAAiB,EAAI,EAAE,AACtD,GACImD,CAAAA,GACAG,EAAoCrJ,GAC/BwF,aAAa,CAACxC,KAAK,EACnBplB,CAAAA,EAAQszB,yBAAyB,EAAI,OAAc,CAAC,GACzD,MAAMrG,EAA0B7K,EAExC,CAxEIiQ,GACArD,CAAAA,EAAYnO,KAAK,CAAC9F,WAAW,CAAG,IAAI,gBAAiB,CAAC,CAClD+C,MAAOuU,AAA4B,YAA5BA,EAAkBvU,KAAK,CACxB,8BAA+B,CAC/BuU,AAA4B,WAA5BA,EAAkBvU,KAAK,CACnB,6BAA8B,CAC9B,8BAA+B,CACzCC,SAAUsU,AAA2B,IAA3BA,EAAkBkB,MAAM,AACtC,EAAC,EAED1E,EAAQ2E,cAAc,EACtBxE,CAAAA,EAAYnO,KAAK,CAAC7F,SAAS,CAAG6T,EAAQ2E,cAAc,AAAD,EAEvDzL,IAAW1jB,KAAK,CAACumB,EAAOvR,KAAK,CAwFjC,CACJ,EACO,CACH,MAAMoa,iBACExI,IACAyI,cAAczI,GACdA,EAActhB,KAAAA,GAElBkjB,EAAU,GACV,MAAMb,GACV,CACJ,CACJ,CACJ,EACJ,C"}